#ifndef _QAC_
//******************************************************************************
// Company:      Johnson Controls Inc.
// -----------------------------------------------------------------------------
// Copyright:    This software is JCI property.
//               Duplication or disclosure without JCI written authorization
//               is prohibited.
// -----------------------------------------------------------------------------
// Project:      X90_BCM
// Language:     ANSI-C
// -----------------------------------------------------------------------------
// Component:    The component is responsible for the generation of sequences 
//               for controlling an audio producing device to generate sounds 
//               and melodies, that are described in the parameterization file 
//               DAT_BUZx.H
// -----------------------------------------------------------------------------
// $Date:   Mar 10 2010 12:06:10  $
// $Archive::   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/DAT/DAT_BUZ/DAT_BUZ.h-arc  $
// $Revision:   1.2  $
// -----------------------------------------------------------------------------
// $Log:   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/DAT/DAT_BUZ/DAT_BUZ.h-arc  $
// 
//    Rev 1.2   Mar 10 2010 12:06:10   adzhelp
// Cm006814: Code review corrections
// 
//    Rev 1.1   Oct 19 2009 12:42:18   amarinm1
// Cm005858: Code review corrections, binary code not affected.
// 
//    Rev 1.0   Feb 24 2009 12:25:42   amarinm1
// Initial revision.
//******************************************************************************
#endif

#ifndef I_DAT_BUZ_H
#define I_DAT_BUZ_H

//------------------------------------------------------------------------------
// Included files to resolve specific definitions in this file
//------------------------------------------------------------------------------
// parameterized melodies IDs
#include "DAT_BUZp.h"

//------------------------------------------------------------------------------
// Constant data
//------------------------------------------------------------------------------

// This is an example:
// #define cu16LAYCmpConstantName   ((U16)ConstantValue)

// post structure to LDB size
// size in elements - see the type of the DATBuzBuffer
#define cDATBuzBufferSize             1

// the strict periodicity timing that comes from some interrupt in the system
#define cDATBuzTaskTimeInUs           5000UL // Equal to DATBuzTask period

// infinite repetitions for a sound - it must be stopped with a command 
#define cDATBuzRepetitionsInfinite    ((U8)0xFFU)

//Buzzer buffer index
#define cBufferFlashers               (0) // Highest priority
#define cBufferLWS                    (1)
#define cBufferSeatBelt               (2)
#define cBufferOverSpeed              (3)
#define cBufferExtLights              (4) // Lowest priority
#define cNumberOfBuffers              (5)

//------------------------------------------------------------------------------
// Exported type
//------------------------------------------------------------------------------

// This is an example:
// typedef Expression tLAYCmpTypeName;

typedef enum tDATBuzState_enum
{
    DATBUZ_IDLE                 = 0,
    DATBUZ_PROCESS_START        = 1,
    DATBUZ_PROCESS_SOUND_PERIOD = 2,
    DATBUZ_PROCESS_SOUND_PAUSE  = 3,
    DATBUZ_PROCESS_MELODY_PAUSE = 4,
    DATBUZ_PROCESS_FINISHED     = 5
}tDATBuzState;



// This type is used to describe a simple sound sequence that is to be used
// in more complex sound generation. It consists of the following parameters:
// 
// Frequency    :   The frequency that is output during the active time in Hz
// ActiveTime   :   The time in mS during which the frequency is played
// InactiveTime :   The time in mS of silence after the active period.
//
// In picture, it looks like this:
//
//
//      +---------------------------------+
//      |                                 |
//      | Active time (playing frequency) | Inactive time (silence)
//      |                                 |
//  ----+                                 +-----------------------------------
//

typedef struct tPERIOD_DESC_struct
{
    U16         Frequency;
    U16         ActiveTime;
    U16         InactiveTime;
}tPERIOD_DESC;


// This type is used to describe a complex sound that must be generated by the 
// buzzer; It consists of the following parameters:
//
//  Period array: may describe up to 'cDATBuzMAXFrequenciesPerSound' simple sounds
//  (look in the above structure description)
//
//  Repetitions:the number of repetitions of the sounds described in the Period 
//  array. It works like this: Period[0] is first played, then immediately Period[1] 
//  and so one.
//

typedef struct tSND_DESC_struct
{
    tPERIOD_DESC  * Motive;    
    U8              NumFrequencies;
    U8              Repetitions;
}tSND_DESC;


// This type is used for description of a melody that must be played by the buzzer.
// It consists of the following parameters:
// 
// Sound: The sound structure that describes the complex sound to be played; 
// (look in the above structure definitions)
//
// Pause: The pause that must be performed after the Sound is played in mS
//
// Repetitions: The number of repetitions of the sequence sound-pause must be
// performed.
//

typedef struct tMELODY_DESC_struct
{
    tSND_DESC       Sound;
    U16             Pause;
    U8              Repetitions;
//QACJ 3205: amarinm1: It is used in DAT_BUZx.h
}tMELODY_DESC;


//Sound buffer struct
typedef struct tSoundStruct_struct
{	
    U16           Buffer[cDATBuzBufferSize];
    tDATBuzState  DATBuzState;
    U32		      ticks_to_elapse;
    tPERIOD_DESC* pmotive;
    tSOUND		  sound;
    U8		      melody_repetitions;
    U8		      sound_repetitions;
    U8		      sound_index;
    tSOUND		  DATBuzSoundToPlay;

}tSoundStruct;

//------------------------------------------------------------------------------
// Exported data
//------------------------------------------------------------------------------

// This is an example:
// Reduce to minimum the usage of extern data members!!!
// extern  tType   LAYCmpVariableName;
// extern  tType*  pLAYCmpVariableName;
// extern  U8      u8LAYCmpVariableName;
// extern  U16*    pu16LAYCmpVariableName;

extern tSoundStruct	DATBuzBuffer[cNumberOfBuffers];

//------------------------------------------------------------------------------
// Constant exported data
//------------------------------------------------------------------------------

// This is an example:
// Reduce to minimum the usage of extern constant data members!!!
// extern const tType  cLAYCmpConstantName;
// extern const U32    cu32LAYCmpConstantName;

//------------------------------------------------------------------------------
// Exported Macros
//------------------------------------------------------------------------------

// MB: Warning! the U8Bit used in this macro is derived from compilation 
// option --small_enum which makes the enum to be of size 8 bits. 
// Care to be paid if the enum is signed or not!!! by default in GHS,
// enum is unsigned.
//#define mDATWriteU8BitBuzzerSoundDefault(x)				                   
//	mLIBassert((x) < cNumberOfMelodies);						               
//	DATBuzBuffer[cBufferBuzzers].DATBuzSoundToPlay = (x)
// MM: Same applies for the (y) parameter in the macro below:

#define mDATWriteTableU1BitBUZZERDefault(y, x)      DATBuzSetBuzzRequest(y, x)
 
#define mDATReadU1BitIsBuzzerSoundPlayingDefault()  DATBuzIsSoundPlaying()


// industrialization
#define mDATControlDATBuzDiagBuzz(Stop)             DATBuzDiagBuzzStop()

#define mDATWriteU16BitDATBuzDiagBuzzDefault(x)     DATBuzDiagBuzzStart(x)


//------------------------------------------------------------------------------
// Exported functions
//------------------------------------------------------------------------------

// This is an example:
// tType LAYCmpFunctionName( tTypeArgument1 ArgumentName1, ... );

extern  void        DATBuzInit                  (void);
extern  void        DATBuzStart                 (void);
extern  void        DATBuzStop                  (void);
extern  void        DATBuzTask                  (void);
extern  BOOL        DATBuzIsSoundPlaying        (void);
extern  void        DATBuzSetBuzzRequest        (const tSOUND SoundRequestP, const BOOL bSoundStateP);

extern  void        DATBuzNormalVoltage         (void);
extern  void        DATBuzAbnormalVoltage       (void);

// industrialization
extern  void        DATBuzDiagBuzzStart         (const U16 u16FreqP);
extern  void        DATBuzDiagBuzzStop          (void);


#endif   // I_LAY_CMP_H
