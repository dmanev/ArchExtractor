###############################################################################
#                                                                             #
# IAR C/C++ Compiler V4.61A/W32 for 78K0 and 78K0S      15/Feb/2011  13:29:42 #
# Copyright 1992-2008 IAR Systems AB.                                         #
#                                                                             #
#    Core         =  78k0                                                     #
#    Code model   =  Standard                                                 #
#                 =                                                           #
#    Source file  =  D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\LAP\L #
#                    AP_FLI.C                                                 #
#    Command line =  --code_model standard --core 78k0 -e                     #
#                    -DMEM_TYPE=__banked -DMEM_FAST=__saddr                   #
#                    -DCALLT_TYPE=__callt -DX90_PROJECT                       #
#                    --generate_callt_runtime_library_calls -r -Ohs           #
#                    "-IC:\Program Files\IAR Systems\Embedded Workbench       #
#                    5.0\78k\inc" "-IC:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.0\78k\inc\clib" -I. -I..\EXE\GEN\            #
#                    -I..\SOURCES\DAT -I..\SOURCES\LAP -I..\SOURCES\LDB_API   #
#                    -I..\SOURCES\LIB -I..\SOURCES\TOS -I.\LDB -DEMUL         #
#                    -DDEBUG -DUSE_LIBSTK -DDONT_KEEP_OLD_TYPE_COMPATIBILITY  #
#                    -l ..\EXE\TARGET_D\LAP_FLI.LST -o                        #
#                    ..\EXE\TARGET_D\LAP_FLI.R26                              #
#                    D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\LAP\L #
#                    AP_FLI.C                                                 #
#    List file    =  ..\EXE\TARGET_D\LAP_FLI.LST                              #
#    Object file  =  ..\EXE\TARGET_D\LAP_FLI.R26                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\LAP\LAP_FLI.C
      1          //******************************************************************************
      2          // Company:      Johnson Controls Inc.
      3          // -----------------------------------------------------------------------------
      4          // Copyright:    This software is JCI property.
      5          //               Duplication or disclosure without JCI written authorization
      6          //               is prohibited.
      7          // -----------------------------------------------------------------------------
      8          // Project:      X90_BCM
      9          // Language:     ANSI-C
     10          // -----------------------------------------------------------------------------
     11          // Component:    LAP_FLI
     12          //               Flashers management
     13          // -----------------------------------------------------------------------------
     14          // $Log:   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/LAP/LAP_FLI/LAP_FLI.c-arc  $
     15          // 
     16          //    Rev 1.37   Mar 17 2010 13:55:08   amanevd
     17          // Cm006814: Code review corrections
     18          // 
     19          //    Rev 1.36   Mar 02 2010 10:22:00   adzhelp
     20          // Cm006814: TPS_CLI, TPS_CLIDEGRAD, TPS_RETARD_DETRESSE, TIMER_DETRESSE normalized
     21          // 
     22          //    Rev 1.35   Mar 01 2010 11:26:08   adzhelp
     23          // Cm007610: Integration changes - removed counter for SC VBAT
     24          // 
     25          //    Rev 1.34   Feb 26 2010 18:23:44   amanevd
     26          // Cm007610: Included new strategy for detecting SC BAT
     27          // 
     28          //    Rev 1.33   Feb 26 2010 10:24:50   amanevd
     29          // Cm007611:LAPFliLampsOn(void) is updated according prsFS_HWP-1022, prsFS_HWP-1088, prsFS_HWP-1089
     30          // 
     31          //    Rev 1.32   Feb 19 2010 15:50:00   adzhelp
     32          // Cm007466: Crash hazard duration timout divided into steps
     33          // 
     34          //    Rev 1.31   Feb 13 2010 16:07:06   amanevd
     35          // Cm007063: VBATT and Open Load detection correction
     36          // 
     37          //    Rev 1.30   Feb 13 2010 12:31:56   amanevd
     38          // Cm007063: VBATT and Open Load detection implemented
     39          // 
     40          //    Rev 1.29   Feb 11 2010 14:27:46   amanevd
     41          // Cm007465: Volatile defect flag is not cleared when Hazard mode is requested
     42          // 
     43          //    Rev 1.28   Feb 11 2010 14:09:30   adzhelp
     44          // Cm007433: EEP_CrashHazardIsRequested maintains active state
     45          // 
     46          //    Rev 1.27   Feb 10 2010 12:49:58   amanevd
     47          // Cm006744: Perform 32-bit math operations only when values are changed v2
     48          // 
     49          //    Rev 1.26   Feb 08 2010 09:26:52   amanevd
     50          // Cm006744: Perform 32-bit math operations only when values are changed
     51          // 
     52          //    Rev 1.25   Jan 27 2010 15:11:34   amanevd
     53          // Cm007185: In case of hazard activation, flashers are always unprotected
     54          // 
     55          //    Rev 1.24   Jan 07 2010 15:30:56   amanevd
     56          // Cm005566: Deprotection of hazard occurs on next feature(Hazard) activation
     57          // 
     58          //    Rev 1.23   Dec 16 2009 09:12:56   adzhelp
     59          // Cm005566: No buzzer in case of active HWP for Hazard mode
     60          // 
     61          //    Rev 1.22   Dec 14 2009 11:02:18   amanevd
     62          // Cm005566: Full Hardware Protection
     63          // 
     64          //    Rev 1.21   Nov 17 2009 14:35:32   amarinm1
     65          // Cm006596: Unlock feedback now has higher priority and interrupts a lock one.
     66          // 
     67          //    Rev 1.20   Nov 04 2009 17:01:20   adzhelp
     68          // Cm005566: Implementation of HW Protection
     69          // 
     70          //    Rev 1.19   Nov 03 2009 14:02:46   amarinm1
     71          // Cm006156: Buffer time between RF feedback and hazard warning changed to 150ms.
     72          // 
     73          //    Rev 1.18   Oct 14 2009 11:12:32   amarinm1
     74          // Cm006277: EEP_CrashHazardIsRequested when crash warning duration is elapsed.
     75          // 
     76          //    Rev 1.17   Oct 13 2009 16:46:42   amarinm1
     77          // Cm006475: LockUnlockConfirmationIsRequested_Memo is cleared in LAPFliLampsRequestHasChanged() in the case of 'No signal'
     78          // 
     79          //    Rev 1.16   Oct 05 2009 13:49:32   amarinm1
     80          // Cm004936: Updating of FlashingFrequency is now done for both sides flashing too.
     81          // 
     82          //    Rev 1.15   Sep 29 2009 14:06:52   amarinm1
     83          // Cm006156: New variable was added to keep the current flashing mode.
     84          // 
     85          //    Rev 1.14   Sep 25 2009 10:27:56   adzhelp
     86          // Cm005225: Hazard enabled on request of perimeter alarm
     87          // 
     88          //    Rev 1.13   Sep 14 2009 15:34:30   amarinm1
     89          // Cm006191, Cm005603: Crash warning management was changed according to both TCRs.
     90          // 
     91          //    Rev 1.12   Sep 14 2009 13:15:08   amarinm1
     92          // Cm006156: Buffer time between hazard and RF feedback was changed to 150ms.
     93          // 
     94          //    Rev 1.11   12 Aug 2009 16:00:48   amarinm1
     95          // Cm005756: Times that need precision were decreased with 1 tick.
     96          // 
     97          //    Rev 1.10   Aug 06 2009 16:10:16   amarinm1
     98          // Cm005601: Changed the input management for left and right side indicators.
     99          // 
    100          //    Rev 1.9   Jul 30 2009 13:39:28   amarinm1
    101          // Cm004936: Update of flashing frequency was implemented;
    102          // Some issues from the code review were fixed.
    103          // 
    104          //    Rev 1.8   Jun 24 2009 15:04:00   amarinm1
    105          // Cm005164: Lock/unlock feedback is now cleared on '>=' instead of '=='.
    106          // 
    107          //    Rev 1.7   Jun 24 2009 14:59:56   amarinm1
    108          // Cm005167: Before incrementing the lock/unlock counter it is checked that the currently executed pattern is lock/unlock one.
    109          // 
    110          //    Rev 1.6   May 07 2009 21:02:42   amanevd
    111          // Cm004975 - Unexpected warning activation
    112          // 
    113          //    Rev 1.5   Apr 29 2009 14:10:56   adzhelp
    114          // Cm003263: Functions moved to banked memory area
    115          // 
    116          //    Rev 1.4   Apr 24 2009 17:19:16   amarinm1
    117          // Cm003263: The timeout to measure the current was changed;
    118          // Direction change is now taken into account immediately.
    119          // 
    120          //    Rev 1.3   Apr 22 2009 14:45:30   amarinm1
    121          // Cm003263: The times for the directional indication and hazard flashing were fixed.
    122          // 
    123          //    Rev 1.2   Apr 15 2009 12:31:50   amarinm1
    124          // Cm003263 & Cm004774: Implementation of the overload protection and corresponding TFC test. Other minor changes.
    125          // 
    126          //    Rev 1.1   Mar 20 2009 17:59:52   amarinm1
    127          // <TCR_ID to be filled>: Changes for integration.
    128          // 
    129          //    Rev 1.0   Feb 05 2009 12:07:48   amarinm1
    130          // Initial revision.
    131          //
    132          //******************************************************************************
    133          
    134          //------------------------------------------------------------------------------
    135          // Body Identification
    136          //------------------------------------------------------------------------------
    137          #define LAP_FLI  "LAP_FLI"
    138          
    139          //------------------------------------------------------------------------------
    140          // Included files to resolve specific definitions in this file
    141          //
    142          // #include <system_file_name.h>
    143          // #include "project_file_name.h"
    144          //------------------------------------------------------------------------------
    145          #include "lib.h"
    146          #include "tos.h"
    147          #include "dat.h"
    148          
    149          #include "LAP_FLI.h"
    150          #include "LAP_FLI.hgr"

   \                                 In  segment CONST, align 2
   \   tTOSSeqRuleType const __near LAPFliLampsState[8]
   \                     LAPFliLampsState:
   \   0000   ........       DW LAPFliLampsRequestHasChanged, LAPFliLampsOn
   \   0004   FF01           DB 255, 1
   \   0006   ........       DW LAPFliLampsRequestHasChanged, LAPFliLampsOn
   \   000A   0201           DB 2, 1
   \   000C   ........       DW LAPFliLampsOnTimeIsElapsed, LAPFliLampsOff
   \   0010   0503           DB 5, 3
   \   0012   ........       DW LAPFliLampsRequestHasChanged, LAPFliLampsOn
   \   0016   0401           DB 4, 1
   \   0018   ........       DW LAPFliLampsOffTimeIsElapsed, LAPFliLampsOn
   \   001C   FF01           DB 255, 1
   \   001E   ........       DW LAPFliMeasureCurrentOk, LAPFliMeasureCurrent
   \   0022   FF06           DB 255, 6
   \   0024   ........       DW LAPFliLampsRequestHasChanged, LAPFliLampsOn
   \   0028   0701           DB 7, 1
   \   002A   ........       DW LAPFliLampsOnTimeIsElapsed, LAPFliLampsOff
   \   002E   FF03           DB 255, 3

   \                                 In  segment CONST, align 2
   \   tTOSSeqRuleType const __near LAPFliInput[1]
   \                     LAPFliInput:
   \   0000   ........       DW TOSSeqTrueEval, LAPFliInputManagement
   \   0004   FF00           DB 255, 0

   \                                 In  segment CONST, align 2
   \   tTOSSeqRuleType const __near LAPFliProtectionManagement[1]
   \                     LAPFliProtectionManagement:
   \   0000   ........       DW TOSSeqTrueEval, LAPFliProtectionTask
   \   0004   FF00           DB 255, 0
    151          
    152          //------------------------------------------------------------------------------
    153          // Local constants
    154          //
    155          // #define cConstantName   ((tType) ConstantValue)
    156          //------------------------------------------------------------------------------
    157          #define cMeasureDefaultIntervalInMs     ((U32) 130)
    158          #define cMeasureOffsetForSmallInterval  20UL
    159          
    160          #define cRFOnTimeInMs               400UL
    161          #define cRFOffTimeInMs              400UL
    162          #define cHazardRFBufferTimeInMs     150UL
    163          #define cLockUnlockBufferTimeInMs   150UL
    164          #define cNumberOfLockFlashes    ((U8)    2)
    165          #define cNumberOfUnlockFlashes  ((U8)    1)
    166          #define cDiagOnTimeInMs         ((U16) 200)
    167          
    168          // Constants are 50 because the step is 100ms and represent
    169          // the whole on/off period while we need the duration of only one phase.
    170          #define cTPS_CLI_step               (U16)50
    171          #define cTPS_CLIDEGRAD_step         (U16)50
    172          
    173          #define cTPS_RETARD_DETRESSE_step   (U16)100
    174          
    175          #define cTIMER_DETRESSE_step        (U16)25000UL
    176          
    177          // DI Lamps
    178          #define cRightAndLeftSideOff    ((U8)    0)
    179          #define cLeftSideOn             ((U8)    1)
    180          #define cRightSideOn            ((U8)    2)
    181          #define cRightAndLeftSideOn     ((U8)    3)
    182          
    183          // Flashing Modes
    184          #define cOff                    ((U8)    0)
    185          #define cLeftTurn               ((U8)    1)
    186          #define cRightTurn              ((U8)    2)
    187          #define cHazard                 ((U8)    3)
    188          #define cCrashHazard            ((U8)    4)
    189          #define cRFFeedback             ((U8)    5)
    190          #define cLeftTFC                ((U8)    6)
    191          #define cRightTFC               ((U8)    7)
    192          
    193          
    194          // HW Protection
    195          #define cProtectionHeatCountInitial ((U8)20U)
    196          #define cSCToGNDCountThreshold      ((U8)10U)
    197          
    198          //------------------------------------------------------------------------------
    199          // Local macros
    200          //
    201          // #define mMacroName   (MacroDefinition)
    202          //------------------------------------------------------------------------------
    203          //QACJ 3410: amarinm1: This is intentionally done and works correctly.
    204          #define mSet(DataName)            (FLAControlStatus.DataName  = cTrue)
    205          //QACJ 3410: amarinm1: This is intentionally done and works correctly.
    206          #define mClear(DataName)          (FLAControlStatus.DataName  = cFalse)
    207          //QACJ 3410: amarinm1: This is intentionally done and works correctly.
    208          #define mRead(DataName)           (FLAControlStatus.DataName)
    209          
    210          
    211          
    212          // The times below are multiplied by 50 because the step is 100ms and represent
    213          // the whole on/off period while we need the duration of only one phase.
    214          #define mReadHazardOnTimeInMs()                                                \
    215                  ( (U16)                                                          \
    216                    /* //QACJ 3443: amarinm1: There is no recursion in the macro! */     \
    217                    (cTPS_CLI_step * mDATRead(U8Bit, NEEP_TPS_CLI, Default)) )
    218          
    219          #define mReadHazardOffTimeInMs()                                               \
    220                  ( (U16)                                                          \
    221                    /* //QACJ 3443: amarinm1: There is no recursion in the macro! */     \
    222                    (cTPS_CLI_step * mDATRead(U8Bit, NEEP_TPS_CLI, Default)) )
    223          
    224          #define mReadNormalDIOnTimeInMs()                                              \
    225                  ( (U16)                                                          \
    226                    /* //QACJ 3443: amarinm1: There is no recursion in the macro! */     \
    227                    (cTPS_CLI_step * mDATRead(U8Bit, NEEP_TPS_CLI, Default)) )
    228          
    229          #define mReadNormalDIOffTimeInMs()                                             \
    230                  ( (U16)                                                          \
    231                    /* //QACJ 3443: amarinm1: There is no recursion in the macro! */     \
    232                    (cTPS_CLI_step * mDATRead(U8Bit, NEEP_TPS_CLI, Default)) )
    233          
    234          #define mReadDegradedDIOnTimeInMs()                                            \
    235                  ( (U16)                                                          \
    236                    /* //QACJ 3443: amarinm1: There is no recursion in the macro! */     \
    237                    (cTPS_CLIDEGRAD_step * mDATRead(U8Bit, NEEP_TPS_CLIDEGRAD, Default)) )
    238          
    239          #define mReadDegradedDIOffTimeInMs()                                           \
    240                  ( (U16)                                                          \
    241                    /* //QACJ 3443: amarinm1: There is no recursion in the macro! */     \
    242                    (cTPS_CLIDEGRAD_step * mDATRead(U8Bit, NEEP_TPS_CLIDEGRAD, Default)) )
    243          
    244          
    245          #define mCalcCrashHazardDelayInTimerTick()  \
    246                      ( mTOSConvMsInTimerTick((U32) (cTPS_RETARD_DETRESSE_step * \
    247                          /* //QACJ 3443: amarinm1: There is no recursion in the macro! */ \
    248                          (u8TPS_RETARD_DETRESSE = mDATRead(U8Bit, NEEP_TPS_RETARD_DETRESSE, Default)))) )
    249          
    250          #define mReadCrashHazardDelayInTimerTick() \
    251                      (CalculatedTPS_RETARD_DETRESSE = \
    252                          (u8TPS_RETARD_DETRESSE == mDATRead(U8Bit, NEEP_TPS_RETARD_DETRESSE, Default)) \
    253                          ? CalculatedTPS_RETARD_DETRESSE \
    254              /*//QACJ 3443:amanevd: Last instance of mDATRead is a concatenation of mDATRead ## DataType## DataName ## TreatmentType()*/ \
    255                          : mCalcCrashHazardDelayInTimerTick())
    256          
    257          #define mReadCrashHazardDurationStepInTimerTick() \
    258              mTOSConvMsInTimerTick((U32)cTIMER_DETRESSE_step)
    259          #define mReadCrashHazardDurationSteps() \
    260              /*//QACJ 3443: adzhelp: Standard STK macros used */ \
    261              mDATRead(U8Bit, NEEP_TIMER_DETRESSE, Default)
    262          
    263          // The times below are multiplied by 50 because the step is 100ms and represent
    264          // the whole on/off period while we need the duration of only one phase.
    265          #define mCalcHazardOffTimeInTimerTick() \
    266                      ( mTOSConvMsInTimerTick( (U32)(cTPS_CLI_step * \
    267          /*//QACJ 3443:amanevd: Last instance of mDATRead is a concatenation of mDATRead ## DataType## DataName ## TreatmentType()*/ \
    268                          (u8TPS_CLI = mDATRead(U8Bit, NEEP_TPS_CLI, Default))) ) - (tTOSTimer)1 )
    269          
    270          #define mReadHazardOffTimeInTimerTick()                                        \
    271                      (CalculatedTPS_CLI = \
    272                          (u8TPS_CLI == mDATRead(U8Bit, NEEP_TPS_CLI, Default)) \
    273                          ? CalculatedTPS_CLI \
    274              /*//QACJ 3443:amanevd: Last instance of mDATRead is a concatenation of mDATRead ## DataType## DataName ## TreatmentType()*/ \
    275                          : mCalcHazardOffTimeInTimerTick())
    276          
    277          #define mCalcDegradedDIOnTimeInTimerTick() \
    278                      ( mTOSConvMsInTimerTick( (U32)(cTPS_CLIDEGRAD_step * \
    279                          /* //QACJ 3443: amarinm1: There is no recursion in the macro! */ \
    280                          (u8TPS_CLIDEGRAD = mDATRead(U8Bit, NEEP_TPS_CLIDEGRAD, Default))) ) - (tTOSTimer)1U )
    281          
    282          #define mReadDegradedDIOnTimeInTimerTick() \
    283                      (CalculatedTPS_CLIDEGRAD = \
    284                          (u8TPS_CLIDEGRAD == mDATRead(U8Bit, NEEP_TPS_CLIDEGRAD, Default)) \
    285                          ? CalculatedTPS_CLIDEGRAD \
    286              /*//QACJ 3443:amanevd: Last instance of mDATRead is a concatenation of mDATRead ## DataType## DataName ## TreatmentType()*/ \
    287                          : mCalcDegradedDIOnTimeInTimerTick())
    288          
    289          //QACJ 3443:amanevd: Last instance of mDATRead is a concatenation of mDATRead ## DataType## DataName ## TreatmentType()
    290          #define mReadDegradedDIOffTimeInTimerTick() mReadDegradedDIOnTimeInTimerTick()
    291          
    292          #define mReadRFOnTimeInTimerTick()                                             \
    293          (tTOSTimer)( mTOSConvMsInTimerTick( (U32)cRFOnTimeInMs ) - (tTOSTimer)1U )
    294          
    295          #define mReadRFOffTimeInTimerTick()                                            \
    296          (tTOSTimer)( mTOSConvMsInTimerTick( (U32)cRFOffTimeInMs ) - (tTOSTimer)1U )
    297          
    298          #define mReadMeasureDefaultIntervalInTicks()                                       \
    299          (tTOSTimer)( mTOSConvMsInTimerTick( cMeasureDefaultIntervalInMs ) - (tTOSTimer)1U )
    300          
    301          #define mReadHazardRFBufferTimeInTicks()                                           \
    302          (tTOSTimer)( mTOSConvMsInTimerTick( cHazardRFBufferTimeInMs ) - (tTOSTimer)1U )
    303          
    304          #define mAllDoorsAreClosed()                                                   \
    305                  ((BOOL)(   (mDATRead(U1Bit, RR_DOORS_SW, Default) == 0)                \
    306                         /* //QACJ 3443: amarinm1: There is no recursion in the macro! */\
    307                          && (mDATRead(U1Bit, FR_DOORS_SW, Default) == 0)  ))
    308          
    309          #define mLockUnlockConfirmationIsRequested()                                   \
    310                  ((BOOL)(   (mRead(LockConfirmationIsRequested)   == cTrue)             \
    311                          || (mRead(UnlockConfirmationIsRequested) == cTrue)   ))
    312          
    313          // FlasherSCBatOrOpenLoad detects only Open Load
    314          #define mFlasherOpenLoad()      mDATReadU1BitFlasherSCBatOrOpenLoadDefault()
    315          //------------------------------------------------------------------------------
    316          // Local types
    317          //
    318          // typedef Expression    tTypeName;
    319          //------------------------------------------------------------------------------
    320          typedef struct sFlasherSignal
    321          {
    322              U16   TimeDILampOn;
    323              U16   TimeDILampOff;
    324              U8    DILampCycleNumber;
    325              U8    DILampSideOn;
    326              U8    FlashingMode;
    327          } tFlasherSignal;
    328          
    329          typedef struct sFlasherFlag
    330          {
    331              BOOL  TurnLeftIsRequested;
    332              BOOL  TurnRightIsRequested;          
    333              BOOL  DILampRequestHasChanged;
    334              BOOL  DILampHazard;    
    335              BOOL  CrashHazardIsRequested;
    336              BOOL  LockConfirmationIsRequested;
    337              BOOL  UnlockConfirmationIsRequested;
    338              BOOL  LockUnlockConfirmationIsRequested_Memo;
    339              BOOL  TFCFlashingIsRequested;
    340              BOOL  BulbFailureDetected;
    341              BOOL  OverVoltageIsDetected;
    342              BOOL  ShortCircuitIsDetected; // when set disables buzzer
    343              BOOL  TurnLeftIsRequestedByTFC;
    344              BOOL  TurnRightIsRequestedByTFC;          
    345          } tFlasherFlag;
    346          
    347          
    348          //------------------------------------------------------------------------------
    349          // Data prefix
    350          //
    351          // unsigned int {u8,u16,u32} / signed int {s8,s16,s32} 
    352          // register size unsigned int {r} / float {f32,f64}  / s for struct 
    353          //
    354          // -----------------------------------------------------------------------------
    355          // Local data
    356          //
    357          // static  tType   u8VariableName;  
    358          // static  tType*  pu8VariableName; 
    359          //------------------------------------------------------------------------------

   \                                 In  segment NEAR_Z, align 2, align-sorted
    360          static  tFlasherSignal  DILampSignal;
   \                     DILampSignal:
   \   0000                  DS 8
   \   0008                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    361          static  tFlasherFlag    FLAControlStatus;
   \                     FLAControlStatus:
   \   0000                  DS 14
   \   000E                  REQUIRE __INIT_NEAR_Z
    362          

   \                                 In  segment NEAR_Z, align 2, align-sorted
    363          static  tTOSTimer       TimerDILamps;
   \                     TimerDILamps:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    364          static  tTOSTimer       TimerCrashHazardDelay;
   \                     TimerCrashHazardDelay:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    365          static  tTOSTimer       TimerCrashHazardDurationStep;
   \                     TimerCrashHazardDurationStep:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    366          static  tTOSTimer       TimerCurrentActiveTimeOut;
   \                     TimerCurrentActiveTimeOut:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    367          static  tTOSTimer       TimerCurrentInactiveTimeOut;
   \                     TimerCurrentInactiveTimeOut:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z
    368          

   \                                 In  segment NEAR_Z, align 2, align-sorted
    369          static  tTOSTimer       CalculatedTPS_RETARD_DETRESSE;
   \                     CalculatedTPS_RETARD_DETRESSE:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    370          static  tTOSTimer       CalculatedTPS_CLI;
   \                     CalculatedTPS_CLI:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    371          static  tTOSTimer       CalculatedTPS_CLIDEGRAD;
   \                     CalculatedTPS_CLIDEGRAD:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z
    372          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    373          static U8               u8TimerStepCrashHazard;
   \                     u8TimerStepCrashHazard:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    374          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    375          static U8               u8FlashCount;
   \                     u8FlashCount:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    376          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    377          static  BOOL            bBothIndicatorsRequested;
   \                     bBothIndicatorsRequested:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    378          
    379          // HW Protection

   \                                 In  segment NEAR_Z, align 1, align-sorted
    380          static  BOOL            bPWR_IGNOld;
   \                     bPWR_IGNOld:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    381          static  BOOL            bLeftFlasherStopped;
   \                     bLeftFlasherStopped:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    382          static  BOOL            bFlasherSCBatOrOpenLoadReadAllowed;
   \                     bFlasherSCBatOrOpenLoadReadAllowed:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    383          static  BOOL            bSCBattDetected;
   \                     bSCBattDetected:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    384          static  U8              u8ProtectionCounterLeft;
   \                     u8ProtectionCounterLeft:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    385          static  U8              u8ProtectionCounterRight;
   \                     u8ProtectionCounterRight:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    386          static  U8              u8FaultCounter;
   \                     u8FaultCounter:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    387          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    388          static  U8              u8TPS_RETARD_DETRESSE;
   \                     u8TPS_RETARD_DETRESSE:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    389          static  U8              u8TPS_CLI;
   \                     u8TPS_CLI:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    390          static  U8              u8TPS_CLIDEGRAD;
   \                     u8TPS_CLIDEGRAD:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    391          
    392          //------------------------------------------------------------------------------
    393          // Constant local data
    394          //
    395          // static const tType  VariableName;
    396          //------------------------------------------------------------------------------
    397          
    398          //------------------------------------------------------------------------------
    399          // Exported data
    400          //
    401          // tType   u8LAYCmpVariableName; (LAY: 3 characters to identify the layer)
    402          // tType*  pu8LAYCmpVariableName;(Cmp: 3 characters to identify the component)
    403          //------------------------------------------------------------------------------
    404          
    405          //------------------------------------------------------------------------------
    406          // Constant exported data
    407          //
    408          //             (LAY: 3 characters to identify the layer)
    409          //             (Cmp: 3 characters to identify this component)
    410          // 
    411          // const tType   LAYCmpVariableName;
    412          //------------------------------------------------------------------------------
    413          
    414          //------------------------------------------------------------------------------
    415          // Local function prototypes
    416          // 
    417          // static tTypeRetour FunctionName(tTypeArgument1 ArgumentName1, ... );
    418          //------------------------------------------------------------------------------
    419          static MEM_TYPE void SetFlasherSignal( const U16, const U16, const U8, const U8 );
    420          static MEM_TYPE void ClearRFEvents( void );
    421          static MEM_TYPE BOOL CrashHazardDurationTimerIsElapsed( void );
    422          static MEM_TYPE void SetFlasherDefect(const BOOL bLeftP, const BOOL bRightP, const BOOL bChkOpenLoadP);
    423          
    424          #ifdef X90_PROJECT
    425          static MEM_TYPE void LAPFliInitialize_Static(void);
    426          static MEM_TYPE BOOL LAPFliLampsRequestHasChanged_Static( void );
    427          static MEM_TYPE void LAPFliInputManagement_Static( void );
    428          static MEM_TYPE void LAPFliLampsOn_Static(void);
    429          static MEM_TYPE void LAPFliLampsOff_Static(void);
    430          static MEM_TYPE void LAPFliMeasureCurrent_Static(void);
    431          static MEM_TYPE void LAPFliProtectionTask_Static(void);
    432          #endif
    433          
    434          //==============================================================================
    435          //=========================== LOCAL FUNCTIONS ==================================
    436          //==============================================================================
    437          
    438          //==============================================================================
    439          // DESCRIPTION:         < short description of the function >
    440          //
    441          // PARAMETERS:          < type,usage and constraints for all parameters >
    442          //
    443          // RETURN VALUE:        < type and usage >
    444          //
    445          // DESIGN INFORMATION:  < usage, pseudo code, algorithm, constraints ... >
    446          //==============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    447          static MEM_TYPE void SetFlasherSignal(
   \                     SetFlasherSignal:
    448                                       const U16 TimeDILampOnP, 
    449                                       const U16 TimeDILampOffP, 
    450                                       const U8 DILampCycleNumberP, 
    451                                       const U8 DILampSideOnP
    452                                      )
    453          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 4
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 2
   \   0001   D4             MOVW      DE,AX
   \   0002   891C           MOVW      AX,SP
   \   0004   D6             MOVW      HL,AX
   \   0005   AE08           MOV       A,[HL+0x08]
   \   0007   73             MOV       B,A
   \   0008   AE0A           MOV       A,[HL+0x0A]
   \   000A   72             MOV       C,A
    454              if (   (DILampSignal.TimeDILampOff      != TimeDILampOffP    ) 
    455                  || (DILampSignal.TimeDILampOn       != TimeDILampOnP     )
    456                  || (DILampSignal.DILampCycleNumber  != DILampCycleNumberP)
    457                  || (DILampSignal.DILampSideOn       != DILampSideOnP     ) )
   \   000B   87             MOV       A,[HL]
   \   000C   70             MOV       X,A
   \   000D   AE01           MOV       A,[HL+0x01]
   \   000F   D6             MOVW      HL,AX
   \   0010   02....         MOVW      AX,DILampSignal+2
   \   0013   30             XCH       A,X
   \   0014   611E           SUB       A,L
   \   0016   30             XCH       A,X
   \   0017   613F           SUBC      A,H
   \   0019   6168           OR        A,X
   \   001B   BD1B           BNZ       ??LAPFliProtectionTask_Static_0
   \   001D   02....         MOVW      AX,DILampSignal
   \   0020   30             XCH       A,X
   \   0021   611C           SUB       A,E
   \   0023   30             XCH       A,X
   \   0024   613D           SUBC      A,D
   \   0026   6168           OR        A,X
   \   0028   BD0E           BNZ       ??LAPFliProtectionTask_Static_0
   \   002A   8E....         MOV       A,DILampSignal+4
   \   002D   614B           CMP       A,B
   \   002F   BD07           BNZ       ??LAPFliProtectionTask_Static_0
   \   0031   8E....         MOV       A,DILampSignal+5
   \   0034   614A           CMP       A,C
   \   0036   AD35           BZ        ??LAPFliProtectionTask_Static_1
    458              {
    459                          // -> RF pattern in progress
    460                  if (   (DILampSignal.DILampCycleNumber != 0)  
    461                          // -> Lamp was OFF
    462                      || (DILampSignal.DILampSideOn  == cRightAndLeftSideOff)
    463                      || (DILampSideOnP              == cRightAndLeftSideOff)
    464                          // -> Flashing side has changed
    465                      || (DILampSignal.DILampSideOn  != DILampSideOnP       )    )
   \                     ??LAPFliProtectionTask_Static_0:
   \   0038   8E....         MOV       A,DILampSignal+4
   \   003B   4D00           CMP       A,#0
   \   003D   BD13           BNZ       ??LAPFliProtectionTask_Static_2
   \   003F   8E....         MOV       A,DILampSignal+5
   \   0042   4D00           CMP       A,#0
   \   0044   AD0C           BZ        ??LAPFliProtectionTask_Static_2
   \   0046   62             MOV       A,C
   \   0047   4D00           CMP       A,#0
   \   0049   AD07           BZ        ??LAPFliProtectionTask_Static_2
   \   004B   8E....         MOV       A,DILampSignal+5
   \   004E   614A           CMP       A,C
   \   0050   AD05           BZ        ??LAPFliProtectionTask_Static_3
    466                  { 
    467                      mSet(DILampRequestHasChanged);  // immediate reinitialisation
   \                     ??LAPFliProtectionTask_Static_2:
   \   0052   A101           MOV       A,#1
   \   0054   9E....         MOV       FLAControlStatus+2,A
    468                  }
    469                  else
    470                  {
    471                      // Do nothing
    472                  }
    473                  DILampSignal.TimeDILampOff     = TimeDILampOffP;
   \                     ??LAPFliProtectionTask_Static_3:
   \   0057   891C           MOVW      AX,SP
   \   0059   D6             MOVW      HL,AX
   \   005A   87             MOV       A,[HL]
   \   005B   70             MOV       X,A
   \   005C   AE01           MOV       A,[HL+0x01]
   \   005E   03....         MOVW      DILampSignal+2,AX
    474                  DILampSignal.TimeDILampOn      = TimeDILampOnP;
   \   0061   C4             MOVW      AX,DE
   \   0062   03....         MOVW      DILampSignal,AX
    475                  DILampSignal.DILampCycleNumber = DILampCycleNumberP;
   \   0065   63             MOV       A,B
   \   0066   9E....         MOV       DILampSignal+4,A
    476                  DILampSignal.DILampSideOn      = DILampSideOnP;
   \   0069   62             MOV       A,C
   \   006A   9E....         MOV       DILampSignal+5,A
    477              }
    478              else
    479              {
    480                  // Do nothing
    481              }
    482          }
   \                     ??LAPFliProtectionTask_Static_1:
   \   006D   B0             POP       AX
   \   006E   ..             CALLT     [__T_?FUNC_LEAVE_L06]
   \   006F   0480           DW        0x8004
   \   0071                  REQUIRE ?CL78K_V4_6_L00
    483          
    484          
    485          //==============================================================================
    486          // DESCRIPTION:         < short description of the function >
    487          //
    488          // PARAMETERS:          < type,usage and constraints for all parameters >
    489          //
    490          // RETURN VALUE:        < type and usage >
    491          //
    492          // DESIGN INFORMATION:  < usage, pseudo code, algorithm, constraints ... >
    493          //==============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    494          static MEM_TYPE void ClearRFEvents(void)
   \                     ClearRFEvents:
    495          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    496              mClear(LockConfirmationIsRequested);
   \   0000   A100           MOV       A,#0
   \   0002   16....         MOVW      HL,#FLAControlStatus+5
   \   0005   97             MOV       [HL],A
    497              mClear(UnlockConfirmationIsRequested);
   \   0006   86             INCW      HL
   \   0007   97             MOV       [HL],A
    498              //QACJ 3200: amarinm1: Reading is done just to clear the signal.
    499              TOSReadSignal(cTOSSignalLAPFliEventRfLockAll);
   \   0008   A023           MOV       X,#35
   \   000A   ..             CALLT     [__T_TOSReadSignal]
    500              //QACJ 3200: amarinm1: Reading is done just to clear the signal.
    501              TOSReadSignal(cTOSSignalLAPFliEventRfUnlockAll);
   \   000B   102400         MOVW      AX,#36
   \   000E   ..             CALLT     [__T_TOSReadSignal]
    502          }
   \   000F   AF             RET       
   \   0010                  REQUIRE ?CL78K_V4_6_L00
    503          
    504          
    505          //==============================================================================
    506          // DESCRIPTION:         < short description of the function >
    507          //
    508          // PARAMETERS:          < type,usage and constraints for all parameters >
    509          //
    510          // RETURN VALUE:        < type and usage >
    511          //
    512          // DESIGN INFORMATION:  < usage, pseudo code, algorithm, constraints ... >
    513          //==============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    514          static MEM_TYPE BOOL CrashHazardDurationTimerIsElapsed( void )
   \                     CrashHazardDurationTimerIsElapsed:
    515          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   10....         MOVW      AX,#TimerCrashHazardDurationStep
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
    516              const BOOL bTimerIsStartedL = TOSIsTimerStarted( &TimerCrashHazardDurationStep );
   \   0004   9A....         CALL      TOSIsTimerStarted
    517              BOOL bTimerIsElapsedL;
    518              BOOL bReturnL = cFalse;
   \   0007   A400           MOV       E,#0
    519          
    520              if (bTimerIsStartedL != cFalse)
   \   0009   4D00           CMP       A,#0
   \   000B   AD20           BZ        ??LAPFliProtectionTask_Static_4
    521              {
    522                  bTimerIsElapsedL = TOSIsTimerElapsed(&TimerCrashHazardDurationStep, 
    523                                                       mReadCrashHazardDurationStepInTimerTick() );
    524                  if (bTimerIsElapsedL != cFalse)
   \   000D   10....         MOVW      AX,#TimerCrashHazardDurationStep
   \   0010   12C409         MOVW      BC,#2500
   \   0013   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0014   4D00           CMP       A,#0
   \   0016   AD15           BZ        ??LAPFliProtectionTask_Static_4
    525                  {
    526                      if (u8TimerStepCrashHazard > 0)
   \   0018   8E....         MOV       A,u8TimerStepCrashHazard
   \   001B   4D00           CMP       A,#0
   \   001D   AD0C           BZ        ??LAPFliProtectionTask_Static_5
    527                      {
    528                          u8TimerStepCrashHazard--;
    529                      }
    530          
    531                      if (u8TimerStepCrashHazard != 0)
   \   001F   51             DEC       A
   \   0020   9E....         MOV       u8TimerStepCrashHazard,A
   \   0023   AD06           BZ        ??LAPFliProtectionTask_Static_5
    532                      {
    533                          TOSStartTimer(&TimerCrashHazardDurationStep);
   \   0025   10....         MOVW      AX,#TimerCrashHazardDurationStep
   \   0028   ..             CALLT     [__T_TOSStartTimer]
   \   0029   FA02           BR        ??LAPFliProtectionTask_Static_4
    534                      }
    535                      else
    536                      {
    537                          bReturnL = cTrue;
   \                     ??LAPFliProtectionTask_Static_5:
   \   002B   A401           MOV       E,#1
    538                      }
    539                  }
    540              }
    541          
    542              return bReturnL;
   \                     ??LAPFliProtectionTask_Static_4:
   \   002D   64             MOV       A,E
   \   002E   B2             POP       BC
   \   002F   AF             RET       
   \   0030                  REQUIRE ?CL78K_V4_6_L00
    543          }
    544          
    545          //==============================================================================
    546          // DESCRIPTION:         < short description of the function >
    547          //
    548          // PARAMETERS:          < type,usage and constraints for all parameters >
    549          //
    550          // RETURN VALUE:        < type and usage >
    551          //
    552          // DESIGN INFORMATION:  < usage, pseudo code, algorithm, constraints ... >
    553          //==============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    554          static MEM_TYPE void SetFlasherDefect(const BOOL bLeftP, const BOOL bRightP, const BOOL bChkOpenLoadP)
   \                     SetFlasherDefect:
    555          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    556              U16 u16TempL;
    557          
    558              if(cFalse != bLeftP)
   \   0000   4D00           CMP       A,#0
   \   0002   AD3F           BZ        ??LAPFliProtectionTask_Static_6
    559              {
    560                  mDATWrite(U1Bit, DefClignL, 1, Default);
   \   0004   A101           MOV       A,#1
   \   0006   16....         MOVW      HL,#DATCmnData+15
   \   0009   97             MOV       [HL],A
    561                  mDATWrite(U1Bit, EEP_DefClignL, 1, Default);
   \   000A   16....         MOVW      HL,#DATDbkMirrors+19
   \   000D   31B607         BT        [HL].3, ??LAPFliProtectionTask_Static_7
   \   0010   A100           MOV       A,#0
   \   0012   71B2           SET1      [HL].3
   \   0014   9A....         CALL      DATDbkStartUpdate
    562          
    563                  // Check if Open load is detected depending on bChkOpenLoadP flag.
    564                  // if bChkOpenLoadP==cTrue and Open load detected the output will
    565                  // not be protected
    566                  if(     (cFalse == bChkOpenLoadP)
    567                       || (cFalse == mFlasherOpenLoad())
    568                    )
   \                     ??LAPFliProtectionTask_Static_7:
   \   0017   62             MOV       A,C
   \   0018   4D00           CMP       A,#0
   \   001A   AD07           BZ        ??LAPFliProtectionTask_Static_8
   \   001C   8E....         MOV       A,bDATPanFlasherSCBatOrOpenLoad
   \   001F   4D00           CMP       A,#0
   \   0021   BD20           BNZ       ??LAPFliProtectionTask_Static_6
    569                  {
    570                      mDATWrite(U1Bit, DI_LEFTProtection, 1, Default);
   \                     ??LAPFliProtectionTask_Static_8:
   \   0023   101000         MOVW      AX,#16
   \   0026   6A..           SET1      S:DATPouHardMaskBuffer+3.6
   \   0028   9A....         CALL      TOSActivateTask
    571                      u16TempL = mDATRead(U16Bit, EEP_CDLeftInd, Default);
   \   002B   02....         MOVW      AX,DATDbkMirrors+8
   \   002E   D6             MOVW      HL,AX
    572                      if(u16TempL < mDATRead(U16Bit, EEP_SCLimit, Default))
   \   002F   30             XCH       A,X
   \   0030   18....         SUB       A,DATDbkMirrors+14
   \   0033   60             MOV       A,X
   \   0034   38....         SUBC      A,DATDbkMirrors+15
   \   0037   9D0A           BNC       ??LAPFliProtectionTask_Static_6
    573                      {
    574                          u16TempL ++;
    575                          mDATWrite(U16Bit, EEP_CDLeftInd, u16TempL, Default);
   \   0039   86             INCW      HL
   \   003A   C6             MOVW      AX,HL
   \   003B   03....         MOVW      DATDbkMirrors+8,AX
   \   003E   A100           MOV       A,#0
   \   0040   9A....         CALL      DATDbkStartUpdate
    576                      }
    577                  }
    578              }
    579          
    580              if(cFalse != bRightP)
   \                     ??LAPFliProtectionTask_Static_6:
   \   0043   63             MOV       A,B
   \   0044   4D00           CMP       A,#0
   \   0046   AD42           BZ        ??LAPFliProtectionTask_Static_9
    581              {
    582                  mDATWrite(U1Bit, DefClignR, 1, Default);
   \   0048   A101           MOV       A,#1
   \   004A   16....         MOVW      HL,#DATCmnData+16
   \   004D   97             MOV       [HL],A
    583                  mDATWrite(U1Bit, EEP_DefClignR, 1, Default);
   \   004E   16....         MOVW      HL,#DATDbkMirrors+19
   \   0051   31C607         BT        [HL].4, ??LAPFliProtectionTask_Static_10
   \   0054   A100           MOV       A,#0
   \   0056   71C2           SET1      [HL].4
   \   0058   9A....         CALL      DATDbkStartUpdate
    584          
    585                  mLIBassert(cFalse != bChkOpenLoadP);
   \                     ??LAPFliProtectionTask_Static_10:
   \   005B   62             MOV       A,C
   \   005C   4D00           CMP       A,#0
   \   005E   BD03           BNZ       ??LAPFliProtectionTask_Static_11
   \   0060   9A....         CALL      LIBAssertionFailed
    586          
    587                  if(cFalse == mFlasherOpenLoad())
   \                     ??LAPFliProtectionTask_Static_11:
   \   0063   8E....         MOV       A,bDATPanFlasherSCBatOrOpenLoad
   \   0066   4D00           CMP       A,#0
   \   0068   BD20           BNZ       ??LAPFliProtectionTask_Static_9
    588                  {
    589                      mDATWrite(U1Bit, DI_RIGHTProtection, 1, Default);
   \   006A   101000         MOVW      AX,#16
   \   006D   7A..           SET1      S:DATPouHardMaskBuffer+3.7
   \   006F   9A....         CALL      TOSActivateTask
    590                      u16TempL = mDATRead(U16Bit, EEP_CDRightInd, Default);
   \   0072   02....         MOVW      AX,DATDbkMirrors+10
   \   0075   D6             MOVW      HL,AX
    591                      if(u16TempL < mDATRead(U16Bit, EEP_SCLimit, Default))
   \   0076   30             XCH       A,X
   \   0077   18....         SUB       A,DATDbkMirrors+14
   \   007A   60             MOV       A,X
   \   007B   38....         SUBC      A,DATDbkMirrors+15
   \   007E   9D0A           BNC       ??LAPFliProtectionTask_Static_9
    592                      {
    593                          u16TempL ++;
    594                          mDATWrite(U16Bit, EEP_CDRightInd, u16TempL, Default);
   \   0080   86             INCW      HL
   \   0081   C6             MOVW      AX,HL
   \   0082   03....         MOVW      DATDbkMirrors+10,AX
   \   0085   A100           MOV       A,#0
   \   0087   9A....         CALL      DATDbkStartUpdate
    595                      }
    596                  }
    597              }
    598          }
   \                     ??LAPFliProtectionTask_Static_9:
   \   008A   AF             RET       
   \   008B                  REQUIRE ?CL78K_V4_6_L00
    599          
    600          // [LOCAL_FUNCTIONS_END]
    601          
    602          
    603          //==============================================================================
    604          //=========================== EXPORTED FUNCTIONS ===============================
    605          //==============================================================================
    606          
    607          
    608          //==============================================================================
    609          // DESCRIPTION:         < short description of the function >
    610          //
    611          // PARAMETERS:          < type,usage and constraints for all parameters >
    612          //
    613          // RETURN VALUE:        < type and usage >
    614          //
    615          // DESIGN INFORMATION:  < usage, pseudo code, algorithm, constraints ... >
    616          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    617          void LAPFliInitialize( void )
   \                     LAPFliInitialize:
    618          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    619          #ifdef X90_PROJECT
    620              LAPFliInitialize_Static();
   \   0001   16....         MOVW      HL,#LWRD(LAPFliInitialize_Static)
   \   0004   A4..           MOV       E,#BYTE3(LAPFliInitialize_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    621          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    622          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    623          static MEM_TYPE void LAPFliInitialize_Static(void)
   \                     LAPFliInitialize_Static:
    624          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   100000         MOVW      AX,#0
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
    625          #endif
    626          
    627              DILampSignal.TimeDILampOff     = 0;
   \   0004   03....         MOVW      DILampSignal+2,AX
    628              DILampSignal.TimeDILampOn      = 0;
   \   0007   03....         MOVW      DILampSignal,AX
    629              DILampSignal.DILampCycleNumber = 0;
   \   000A   16....         MOVW      HL,#DILampSignal+4
   \   000D   97             MOV       [HL],A
    630              DILampSignal.DILampSideOn      = cRightAndLeftSideOff;
   \   000E   86             INCW      HL
   \   000F   97             MOV       [HL],A
    631              DILampSignal.FlashingMode      = cOff;
   \   0010   86             INCW      HL
   \   0011   97             MOV       [HL],A
    632              u8FlashCount                   = 0;
   \   0012   9E....         MOV       u8FlashCount,A
    633              bBothIndicatorsRequested       = cFalse;
   \   0015   9E....         MOV       bBothIndicatorsRequested,A
    634          
    635              mDATWrite(U8Bit, FlasherLampsTestResult, cDATCmnFlasherLampsNotTested, Default);
   \   0018   9E....         MOV       DATCmnData+2,A
    636          
    637              mLIBmemset(&FLAControlStatus, 0, sizeof(FLAControlStatus));
   \   001B   10....         MOVW      AX,#FLAControlStatus
   \   001E   140E00         MOVW      DE,#14
   \   0021   120000         MOVW      BC,#0
   \   0024   9A....         CALL      memset
    638              bPWR_IGNOld = cFalse;
   \   0027   A100           MOV       A,#0
   \   0029   9E....         MOV       bPWR_IGNOld,A
    639              u8ProtectionCounterLeft = cProtectionHeatCountInitial;
   \   002C   A114           MOV       A,#20
   \   002E   9E....         MOV       u8ProtectionCounterLeft,A
    640              u8ProtectionCounterRight = cProtectionHeatCountInitial;
   \   0031   9E....         MOV       u8ProtectionCounterRight,A
    641              u8FaultCounter           = 0;
   \   0034   A100           MOV       A,#0
   \   0036   9E....         MOV       u8FaultCounter,A
    642          }
   \   0039   B2             POP       BC
   \   003A   AF             RET       
   \   003B                  REQUIRE ?CL78K_V4_6_L00
    643          
    644          
    645          //==============================================================================
    646          // DESCRIPTION:         < short description of the function >
    647          //
    648          // PARAMETERS:          < type,usage and constraints for all parameters >
    649          //
    650          // RETURN VALUE:        < type and usage >
    651          //
    652          // DESIGN INFORMATION:  < usage, pseudo code, algorithm, constraints ... >
    653          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    654          void LAPFliEnterActiveState( void )
   \                     LAPFliEnterActiveState:
    655          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    656              mDATWrite(U8Bit, FlasherLampsTestResult, cDATCmnFlasherLampsNotTested, Default);
   \   0000   A100           MOV       A,#0
   \   0002   9E....         MOV       DATCmnData+2,A
    657          
    658              mClear( LockConfirmationIsRequested );
   \   0005   16....         MOVW      HL,#FLAControlStatus+5
   \   0008   97             MOV       [HL],A
    659              mClear( UnlockConfirmationIsRequested );
   \   0009   86             INCW      HL
   \   000A   97             MOV       [HL],A
    660              mClear( TFCFlashingIsRequested );      
   \   000B   16....         MOVW      HL,#FLAControlStatus+8
   \   000E   97             MOV       [HL],A
    661          
    662              TOSSeqActivateGraph( cTOSSeqGraphIdLAPFliInput );
   \   000F   A123           MOV       A,#35
   \   0011   ..             CALLT     [__T_TOSSeqActivateGraph]
    663              TOSSeqActivateGraph( cTOSSeqGraphIdLAPFliLampsState );
   \   0012   A124           MOV       A,#36
   \   0014   ..             CALLT     [__T_TOSSeqActivateGraph]
    664              TOSSeqActivateGraph( cTOSSeqGraphIdLAPFliProtectionManagement );
   \   0015   A10E           MOV       A,#14
   \   0017   ..             CALLT     [__T_TOSSeqActivateGraph]
    665              bPWR_IGNOld = cFalse;
   \   0018   A100           MOV       A,#0
   \   001A   9E....         MOV       bPWR_IGNOld,A
    666              u8ProtectionCounterLeft = cProtectionHeatCountInitial;
   \   001D   A114           MOV       A,#20
   \   001F   9E....         MOV       u8ProtectionCounterLeft,A
    667              u8ProtectionCounterRight = cProtectionHeatCountInitial;
   \   0022   9E....         MOV       u8ProtectionCounterRight,A
    668              u8FaultCounter = 0;
   \   0025   A100           MOV       A,#0
   \   0027   9E....         MOV       u8FaultCounter,A
    669          }
   \   002A   AF             RET       
   \   002B                  REQUIRE ?CL78K_V4_6_L00
    670          
    671          
    672          //==============================================================================
    673          // DESCRIPTION:         < short description of the function >
    674          //
    675          // PARAMETERS:          < type,usage and constraints for all parameters >
    676          //
    677          // RETURN VALUE:        < type and usage >
    678          //
    679          // DESIGN INFORMATION:  < usage, pseudo code, algorithm, constraints ... >
    680          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    681          void LAPFliLeaveActiveState( void )
   \                     LAPFliLeaveActiveState:
    682          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    683              mDATWrite(U1Bit, DI_LEFT,  0, Default);
    684              mDATWrite(U1Bit, DI_RIGHT, 0, Default);
   \   0000   A123           MOV       A,#35
   \   0002   D8..3F         AND       S:DATPouSoftOutputBuffer+3,#63
    685              TOSSeqDeactivateGraph( cTOSSeqGraphIdLAPFliInput );
   \   0005   ..             CALLT     [__T_TOSSeqDeactivateGraph]
    686              TOSSeqDeactivateGraph( cTOSSeqGraphIdLAPFliLampsState );
   \   0006   A124           MOV       A,#36
   \   0008   ..             CALLT     [__T_TOSSeqDeactivateGraph]
    687              TOSSeqDeactivateGraph( cTOSSeqGraphIdLAPFliProtectionManagement );
   \   0009   A10E           MOV       A,#14
   \   000B   ..             CALLT     [__T_TOSSeqDeactivateGraph]
    688          }
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
    689          
    690          
    691          //==============================================================================
    692          // DESCRIPTION:         < short description of the function >
    693          //
    694          // PARAMETERS:          < type,usage and constraints for all parameters >
    695          //
    696          // RETURN VALUE:        < type and usage >
    697          //
    698          // DESIGN INFORMATION:  < usage, pseudo code, algorithm, constraints ... >
    699          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    700          void LAPFliIsAnybodyMaintainActiveState( void )
   \                     LAPFliIsAnybodyMaintainActiveState:
    701          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    702              if (   (mDATRead(U1Bit, EEP_CrashHazardIsRequested, Default) != cFalse)
    703                  || (mLockUnlockConfirmationIsRequested() == cTrue)   )
   \   0000   16....         MOVW      HL,#DATDbkMirrors+24
   \   0003   31A60C         BT        [HL].2, ??LAPFliProtectionTask_Static_126
   \   0006   8E....         MOV       A,FLAControlStatus+5
   \   0009   51             DEC       A
   \   000A   AD06           BZ        ??LAPFliProtectionTask_Static_126
   \   000C   8E....         MOV       A,FLAControlStatus+6
   \   000F   51             DEC       A
   \   0010   BD04           BNZ       ??LAPFliProtectionTask_Static_127
    704              {
    705                  TOSWriteSignal(cTOSSignalSomebodyMaintainActiveState);
   \                     ??LAPFliProtectionTask_Static_126:
   \   0012   102900         MOVW      AX,#41
   \   0015   ..             CALLT     [__T_TOSWriteSignal]
    706              }
    707              else
    708              {
    709                  // Do nothing
    710              }
    711          }
   \                     ??LAPFliProtectionTask_Static_127:
   \   0016   AF             RET       
   \   0017                  REQUIRE ?CL78K_V4_6_L00
    712          
    713          
    714          //==============================================================================
    715          // DESCRIPTION : 
    716          //
    717          // PARAMETERS (Type,Name,Min,Max) :   none
    718          //
    719          // RETURN VALUE :   none
    720          //
    721          // DESIGN INFORMATION : (pseudo code, algorithm ... )
    722          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    723          BOOL LAPFliLampsRequestHasChanged( void )
   \                     LAPFliLampsRequestHasChanged:
    724          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    725          #ifdef X90_PROJECT
    726              return LAPFliLampsRequestHasChanged_Static();
   \   0001   16....         MOVW      HL,#LWRD(LAPFliLampsRequestHasChanged_Static)
   \   0004   A4..           MOV       E,#BYTE3(LAPFliLampsRequestHasChanged_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    727          }
    728          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    729          static MEM_TYPE BOOL LAPFliLampsRequestHasChanged_Static( void )
   \                     LAPFliLampsRequestHasChanged_Static:
    730          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
    731          #endif
    732          
    733              U8    u8DILampSideL;
    734              BOOL  bReturnValueL;
    735              BOOL  bBufferTimeHasElapsedL;
    736              BOOL  bCrashHazardDelayHasElapsedL;
    737              BOOL  bCrashhazardDurationTimerIsStartedL;
    738          
    739              tTOSTimer   CrashHazardDelayInTimerTickL;
    740              tTOSTimer   HazardOffTimeInTimerTickL;
    741                  
    742              
    743              // -------------------------------------------------------------------------
    744              // DIAGNOSTIC TEST
    745              // -------------------------------------------------------------------------
    746              if ( mRead(TurnLeftIsRequestedByTFC) == cTrue )
   \   0001   8E....         MOV       A,FLAControlStatus+12
   \   0004   51             DEC       A
   \   0005   BD56           BNZ       ??LAPFliProtectionTask_Static_12
    747              {
    748                  mClear(TurnLeftIsRequestedByTFC);
   \   0007   A100           MOV       A,#0
   \   0009   16....         MOVW      HL,#FLAControlStatus+12
   \   000C   97             MOV       [HL],A
    749                  SetFlasherSignal( cDiagOnTimeInMs, 0, 1, cLeftSideOn );
   \   000D   A001           MOV       X,#1
   \   000F   B1             PUSH      AX
   \   0010   B1             PUSH      AX
   \   0011   A0C8           MOV       X,#200
   \   0013   120000         MOVW      BC,#0
   \   0016   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   0019   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   001B   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
    750                  DILampSignal.FlashingMode = cLeftTFC;
   \   001C   A106           MOV       A,#6
   \                     ??LAPFliLampsRequestHasChanged_Static_0:
   \   001E   16....         MOVW      HL,#DILampSignal+6
   \   0021   97             MOV       [HL],A
    751                  mSet(TFCFlashingIsRequested);
   \   0022   A101           MOV       A,#1
   \   0024   16....         MOVW      HL,#FLAControlStatus+8
   \                     ??LAPFliLampsRequestHasChanged_Static_1:
   \   0027   97             MOV       [HL],A
    752              }
    753              else if ( mRead(TurnRightIsRequestedByTFC) == cTrue )
    754              {
    755                  mClear(TurnRightIsRequestedByTFC);
    756                  SetFlasherSignal( cDiagOnTimeInMs, 0, 1, cRightSideOn );
    757                  DILampSignal.FlashingMode = cRightTFC;
    758                  mSet(TFCFlashingIsRequested);
    759              }
    760              else if ( mRead(TFCFlashingIsRequested) == cTrue )
    761              {
    762                  // Do nothing
    763              }
    764          
    765              // -------------------------------------------------------------------------
    766              // UNLOCK ALL SIGNAL
    767              // -------------------------------------------------------------------------
    768              else if ( mRead(UnlockConfirmationIsRequested) == cTrue )
    769              {
    770                  if (   ( mRead(DILampHazard) == cTrue )
    771                      || ( mRead(LockConfirmationIsRequested) == cTrue )   )
    772                  {
    773                         // Only one side can be checked
    774                      if (mDATRead(U1Bit, DI_LEFT,  Default) == 0)
    775                      {
    776                          bBufferTimeHasElapsedL = 
    777                              TOSIsTimerElapsed( &TimerDILamps, 
    778                                                 mReadHazardRFBufferTimeInTicks() );
    779                          if (bBufferTimeHasElapsedL == cTrue)
    780                          {
    781                              SetFlasherSignal( cRFOnTimeInMs, 
    782                                                cRFOffTimeInMs, 
    783                                                cNumberOfUnlockFlashes, 
    784                                                cRightAndLeftSideOn
    785                                              );
    786                              DILampSignal.FlashingMode   =  cRFFeedback;
    787                              TimerCurrentActiveTimeOut   =  mReadRFOnTimeInTimerTick();
    788                              TimerCurrentInactiveTimeOut =  mReadRFOffTimeInTimerTick();
    789                              
    790                              if ( mRead(LockConfirmationIsRequested) == cTrue )
    791                              {
    792                                  mClear(LockConfirmationIsRequested);
    793                              }
    794                          }
    795                      }
    796                      else // ON phase
    797                      {
    798                          if ( mRead(LockConfirmationIsRequested) == cTrue )
    799                          {
    800                              // Forse both sides to off for the buffer time
    801                              SetFlasherSignal( cLockUnlockBufferTimeInMs, 
    802                                                cLockUnlockBufferTimeInMs, 
    803                                                1, 
    804                                                cRightAndLeftSideOff
    805                                              );
    806                          }
    807                      }
    808                  }
    809                  else
    810                  {
    811                      SetFlasherSignal( cRFOnTimeInMs, 
    812                                        cRFOffTimeInMs, 
    813                                        cNumberOfUnlockFlashes, 
    814                                        cRightAndLeftSideOn
    815                                      );
    816                      DILampSignal.FlashingMode = cRFFeedback;
    817                  }
    818              }
    819          
    820              // -------------------------------------------------------------------------
    821              // LOCK ALL SIGNAL
    822              // -------------------------------------------------------------------------
    823              else if ( mRead(LockConfirmationIsRequested) == cTrue )
    824              {
    825                  if ( mRead(DILampHazard) == cTrue )
    826                  {
    827                              // Only one side can be checked
    828                      if (   (mDATRead(U1Bit, DI_LEFT,  Default) == 0)
    829                          && (DILampSignal.FlashingMode != cRFFeedback)   )
    830                      {
    831                          bBufferTimeHasElapsedL = 
    832                              TOSIsTimerElapsed( &TimerDILamps, 
    833                                                 mReadHazardRFBufferTimeInTicks() );
    834                          if (bBufferTimeHasElapsedL == cTrue)
    835                          {
    836                              SetFlasherSignal( cRFOnTimeInMs, 
    837                                                cRFOffTimeInMs, 
    838                                                cNumberOfLockFlashes, 
    839                                                cRightAndLeftSideOn
    840                                              );
    841                              DILampSignal.FlashingMode   =  cRFFeedback;
    842                              TimerCurrentActiveTimeOut   =  mReadRFOnTimeInTimerTick();
    843                              TimerCurrentInactiveTimeOut =  mReadRFOffTimeInTimerTick();
    844                          }
    845                          else
    846                          {
    847                              // Do nothing
    848                          }
    849                      }
    850                      else
    851                      {
    852                          // Do nothing
    853                      }
    854                  }
    855                  else
    856                  {
    857                      SetFlasherSignal( cRFOnTimeInMs, 
    858                                        cRFOffTimeInMs, 
    859                                        cNumberOfLockFlashes, 
    860                                        cRightAndLeftSideOn
    861                                      );
    862                      DILampSignal.FlashingMode = cRFFeedback;
    863                  }
    864              }
    865                  
    866              // -------------------------------------------------------------------------
    867              // CRASH HAZARD SIGNAL
    868              // -------------------------------------------------------------------------
    869              else if ( mRead( CrashHazardIsRequested ) == cTrue )
    870              {
    871                  //QACJ 3226: amanevd: This is intentional and is checked out for problems.
    872                  CrashHazardDelayInTimerTickL = mReadCrashHazardDelayInTimerTick();
    873                  bCrashHazardDelayHasElapsedL = 
    874                      TOSIsTimerElapsed( &TimerCrashHazardDelay,
    875                                         CrashHazardDelayInTimerTickL );
    876                  if ( bCrashHazardDelayHasElapsedL == cTrue )
    877                  {
    878                      if ( mRead(LockUnlockConfirmationIsRequested_Memo) == cFalse )
    879                      {
    880                          SetFlasherSignal( mReadHazardOnTimeInMs(), 
    881                                            mReadHazardOffTimeInMs(), 
    882                                            0, 
    883                                            cRightAndLeftSideOn
    884                                          );
    885                          DILampSignal.FlashingMode = cCrashHazard;
    886                          bCrashhazardDurationTimerIsStartedL = 
    887                              TOSIsTimerStarted( &TimerCrashHazardDurationStep );
    888                          if ( bCrashhazardDurationTimerIsStartedL == cFalse )
    889                          {
    890                              TOSStartTimer( &TimerCrashHazardDurationStep );
    891                              u8TimerStepCrashHazard = mReadCrashHazardDurationSteps();
    892                          }
    893                          else
    894                          {
    895                              // Do nothing
    896                          }
    897                      }
    898                      else // LockUnlockConfirmationIsRequested_Memo == cTrue
    899                      {
    900                          //QACJ 3226: amanevd: This is intentional and is checked out for problems.
    901                          HazardOffTimeInTimerTickL = mReadHazardOffTimeInTimerTick();
    902                          bBufferTimeHasElapsedL = 
    903                              TOSIsTimerElapsed( &TimerDILamps, 
    904                                                 HazardOffTimeInTimerTickL );
    905                          if ( bBufferTimeHasElapsedL == cTrue )
    906                          {
    907                              SetFlasherSignal( mReadHazardOnTimeInMs(), 
    908                                                mReadHazardOffTimeInMs(), 
    909                                                0, 
    910                                                cRightAndLeftSideOn
    911                                              );
    912                              DILampSignal.FlashingMode = cCrashHazard;
    913                              TOSStartTimer( &TimerCrashHazardDurationStep );
    914                              u8TimerStepCrashHazard = mReadCrashHazardDurationSteps();
    915                              FLAControlStatus.LockUnlockConfirmationIsRequested_Memo = cFalse;
    916                          }
    917                          else
    918                          {
    919                              // Because LAPFliLampsOffTimeIsElapsed() checks THIS
    920                              //QACJ 3226: amanevd: This is intentional and is checked out for problems.
    921                              TimerCurrentInactiveTimeOut = 
    922                                  mReadHazardOffTimeInTimerTick();
    923                              DILampSignal.FlashingMode = cCrashHazard;
    924                          }
    925                      }
    926                  }
    927                  else
    928                  {
    929                      // Do nothing
    930                  }
    931              }
    932          
    933              // -------------------------------------------------------------------------
    934              // HAZARD SIGNAL
    935              // -------------------------------------------------------------------------
    936              else if ( mRead(DILampHazard) == cTrue )
    937              {
    938                  if ( mRead(LockUnlockConfirmationIsRequested_Memo) == cFalse )
    939                  {
    940                      SetFlasherSignal( mReadHazardOnTimeInMs(), 
    941                                        mReadHazardOffTimeInMs(), 
    942                                        0, 
    943                                        cRightAndLeftSideOn
    944                                      );
    945                      DILampSignal.FlashingMode = cHazard;
    946                  }
    947                  else // LockUnlockConfirmationIsRequested_Memo == cTrue
    948                  {
    949                      bBufferTimeHasElapsedL = 
    950                              TOSIsTimerElapsed( &TimerDILamps, 
    951                                                 mReadHazardRFBufferTimeInTicks() );
    952                      if ( bBufferTimeHasElapsedL == cTrue )
    953                      {
    954                          SetFlasherSignal( mReadHazardOnTimeInMs(), 
    955                                            mReadHazardOffTimeInMs(), 
    956                                            0, 
    957                                            cRightAndLeftSideOn
    958                                          );
    959                          DILampSignal.FlashingMode = cHazard;
    960                          FLAControlStatus.LockUnlockConfirmationIsRequested_Memo = cFalse;
    961                      }
    962                      else
    963                      {
    964                          // Because LAPFliLampsOffTimeIsElapsed() checks THIS
    965                          TimerCurrentInactiveTimeOut = mReadHazardRFBufferTimeInTicks();
    966                          DILampSignal.FlashingMode = cHazard;
    967                      }
    968                  }
    969              }
    970          
    971              // -------------------------------------------------------------------------
    972              // TURN LEFT / RIGHT SIGNAL
    973              // -------------------------------------------------------------------------
    974              else if (   (mRead(TurnLeftIsRequested)  == cTrue) 
    975                       || (mRead(TurnRightIsRequested) == cTrue)  )
    976              {
    977                  if ( mRead(TurnLeftIsRequested) == cTrue )
    978                  {
    979                      u8DILampSideL = cLeftSideOn;            
    980                      DILampSignal.FlashingMode = cLeftTurn;
    981                  }
    982                  else
    983                  {
    984                      u8DILampSideL = cRightSideOn;            
    985                      DILampSignal.FlashingMode = cRightTurn;
    986                  }
    987          
    988                  // Set normal or degraded flashing time
    989                  if ( mRead(BulbFailureDetected) == cTrue )
    990                  {
    991                         // New, update timer
    992                      if ( DILampSignal.TimeDILampOff != 
    993                           mReadDegradedDIOffTimeInMs() ) 
    994                      {
    995                          //QACJ 3226: amanevd: This is intentional and is checked out for problems.
    996                          TimerCurrentActiveTimeOut   = 
    997                              mReadDegradedDIOnTimeInTimerTick();
    998                          //QACJ 3226: amanevd: This is intentional and is checked out for problems.
    999                          TimerCurrentInactiveTimeOut = 
   1000                              mReadDegradedDIOffTimeInTimerTick();
   1001                      }
   1002                      else
   1003                      {
   1004                          // Do nothing
   1005                      }
   1006                      SetFlasherSignal( mReadDegradedDIOnTimeInMs(), 
   1007                                        mReadDegradedDIOffTimeInMs(), 
   1008                                        0, 
   1009                                        u8DILampSideL
   1010                                      );
   1011                  }
   1012                  else // Normal
   1013                  {   
   1014                      SetFlasherSignal( mReadNormalDIOnTimeInMs(), 
   1015                                        mReadNormalDIOffTimeInMs(), 
   1016                                        0, 
   1017                                        u8DILampSideL
   1018                                      );
   1019                  }
   1020          
   1021              }
   1022          
   1023              // -------------------------------------------------------------------------
   1024              // NO SIGNAL
   1025              // -------------------------------------------------------------------------
   1026              else 
   1027              {
   1028                  SetFlasherSignal( 0, 0, 0, cRightAndLeftSideOff );            
   1029                  DILampSignal.FlashingMode = cOff;
   1030                  mSet(DILampRequestHasChanged);  // force the immediate refresh
   1031                  FLAControlStatus.LockUnlockConfirmationIsRequested_Memo = cFalse;
   1032                  mClear(BulbFailureDetected);
   1033                  mClear(ShortCircuitIsDetected);
   1034              }
   1035          
   1036              if ( mRead(DILampRequestHasChanged) == cTrue )
   \                     ??LAPFliLampsRequestHasChanged_Static_2:
   \   0028   8E....         MOV       A,FLAControlStatus+2
   \   002B   51             DEC       A
   \   002C   AD03           BZ        $+5
   \   002E   9B....         BR        N:??LAPFliProtectionTask_Static_13
   1037              {
   1038                  bReturnValueL = cTrue;
   \                     ??LAPFliLampsRequestHasChanged_Static_3:
   \   0031   A100           MOV       A,#0
   \   0033   A001           MOV       X,#1
   1039                  mClear(DILampRequestHasChanged);
   \   0035   9E....         MOV       FLAControlStatus+2,A
   1040                  u8FlashCount = 0;
   \   0038   9E....         MOV       u8FlashCount,A
   1041          
   1042                  if(     (cHazard == DILampSignal.FlashingMode)
   1043                       || (cCrashHazard == DILampSignal.FlashingMode)
   1044                       || (cRFFeedback == DILampSignal.FlashingMode)
   1045                    )
   \   003B   8E....         MOV       A,DILampSignal+6
   \   003E   4D03           CMP       A,#3
   \   0040   AD08           BZ        ??LAPFliProtectionTask_Static_14
   \   0042   4D04           CMP       A,#4
   \   0044   AD04           BZ        ??LAPFliProtectionTask_Static_14
   \   0046   4D05           CMP       A,#5
   \   0048   BD08           BNZ       ??LAPFliProtectionTask_Static_15
   1046                  {
   1047                      mDATWrite(U1Bit, DI_LEFTProtection, 0, Default);
   1048                      mDATWrite(U1Bit, DI_RIGHTProtection, 0, Default);
   \                     ??LAPFliProtectionTask_Static_14:
   \   004A   A100           MOV       A,#0
   \   004C   D8..3F         AND       S:DATPouHardMaskBuffer+3,#63
   1049                      bSCBattDetected = cFalse;
   \   004F   9E....         MOV       bSCBattDetected,A
   1050                  }
   1051          
   1052                  mClear(OverVoltageIsDetected);
   \                     ??LAPFliProtectionTask_Static_15:
   \   0052   A100           MOV       A,#0
   \   0054   16....         MOVW      HL,#FLAControlStatus+10
   \   0057   97             MOV       [HL],A
   1053                  mClear(ShortCircuitIsDetected);
   \   0058   86             INCW      HL
   \   0059   97             MOV       [HL],A
   \   005A   9B....         BR        N:??LAPFliProtectionTask_Static_16
   1054              }
   \                     ??LAPFliProtectionTask_Static_12:
   \   005D   8E....         MOV       A,FLAControlStatus+13
   \   0060   51             DEC       A
   \   0061   BD1B           BNZ       ??LAPFliProtectionTask_Static_17
   \   0063   A100           MOV       A,#0
   \   0065   16....         MOVW      HL,#FLAControlStatus+13
   \   0068   97             MOV       [HL],A
   \   0069   A002           MOV       X,#2
   \   006B   B1             PUSH      AX
   \   006C   A001           MOV       X,#1
   \   006E   B1             PUSH      AX
   \   006F   A0C8           MOV       X,#200
   \   0071   120000         MOVW      BC,#0
   \   0074   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   0077   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   0079   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   007A   A107           MOV       A,#7
   \   007C   FAA0           BR        ??LAPFliLampsRequestHasChanged_Static_0
   \                     ??LAPFliProtectionTask_Static_17:
   \   007E   8E....         MOV       A,FLAControlStatus+8
   \   0081   51             DEC       A
   \   0082   ADA4           BZ        ??LAPFliLampsRequestHasChanged_Static_2
   \   0084   8E....         MOV       A,FLAControlStatus+6
   \   0087   51             DEC       A
   \   0088   BD7F           BNZ       ??LAPFliProtectionTask_Static_18
   \   008A   8E....         MOV       A,FLAControlStatus+3
   \   008D   51             DEC       A
   \   008E   AD07           BZ        ??LAPFliProtectionTask_Static_19
   \   0090   8E....         MOV       A,FLAControlStatus+5
   \   0093   4D01           CMP       A,#1
   \   0095   BD5A           BNZ       ??LAPFliProtectionTask_Static_20
   \                     ??LAPFliProtectionTask_Static_19:
   \   0097   EC..3A         BT        S:DATPouSoftOutputBuffer+3.6, ??LAPFliProtectionTask_Static_21
   \   009A   10....         MOVW      AX,#TimerDILamps
   \   009D   120E00         MOVW      BC,#14
   \   00A0   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   00A1   51             DEC       A
   \   00A2   BD84           BNZ       ??LAPFliLampsRequestHasChanged_Static_2
   \   00A4   A003           MOV       X,#3
   \   00A6   B1             PUSH      AX
   \   00A7   A001           MOV       X,#1
   \   00A9   B1             PUSH      AX
   \   00AA   109001         MOVW      AX,#400
   \   00AD   D2             MOVW      BC,AX
   \   00AE   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   00B1   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   00B3   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   00B4   A105           MOV       A,#5
   \   00B6   16....         MOVW      HL,#DILampSignal+6
   \   00B9   97             MOV       [HL],A
   \   00BA   102700         MOVW      AX,#39
   \   00BD   03....         MOVW      TimerCurrentActiveTimeOut,AX
   \   00C0   03....         MOVW      TimerCurrentInactiveTimeOut,AX
   \   00C3   8E....         MOV       A,FLAControlStatus+5
   \   00C6   51             DEC       A
   \   00C7   AD03           BZ        $+5
   \   00C9   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \   00CC   A100           MOV       A,#0
   \   00CE   16....         MOVW      HL,#FLAControlStatus+5
   \   00D1   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_1
   \                     ??LAPFliProtectionTask_Static_21:
   \   00D4   8E....         MOV       A,FLAControlStatus+5
   \   00D7   4D01           CMP       A,#1
   \   00D9   AD03           BZ        $+5
   \   00DB   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \   00DE   A000           MOV       X,#0
   \   00E0   B1             PUSH      AX
   \   00E1   A001           MOV       X,#1
   \   00E3   B1             PUSH      AX
   \   00E4   109600         MOVW      AX,#150
   \   00E7   D2             MOVW      BC,AX
   \                     ??LAPFliLampsRequestHasChanged_Static_4:
   \   00E8   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   00EB   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   00ED   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   00EE   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \                     ??LAPFliProtectionTask_Static_20:
   \   00F1   A003           MOV       X,#3
   \   00F3   B1             PUSH      AX
   \   00F4   A001           MOV       X,#1
   \                     ??LAPFliLampsRequestHasChanged_Static_5:
   \   00F6   B1             PUSH      AX
   \   00F7   109001         MOVW      AX,#400
   \   00FA   D2             MOVW      BC,AX
   \   00FB   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   00FE   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   0100   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   0101   A105           MOV       A,#5
   \                     ??LAPFliLampsRequestHasChanged_Static_6:
   \   0103   16....         MOVW      HL,#DILampSignal+6
   \   0106   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_1
   \                     ??LAPFliProtectionTask_Static_18:
   \   0109   8E....         MOV       A,FLAControlStatus+5
   \   010C   51             DEC       A
   \   010D   BD4E           BNZ       ??LAPFliProtectionTask_Static_22
   \   010F   8E....         MOV       A,FLAControlStatus+3
   \   0112   4D01           CMP       A,#1
   \   0114   BD40           BNZ       ??LAPFliProtectionTask_Static_23
   \   0116   3163..03       BF        S:DATPouSoftOutputBuffer+3.6, $+7
   \   011A   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \   011D   8E....         MOV       A,DILampSignal+6
   \   0120   4D05           CMP       A,#5
   \   0122   BD03           BNZ       $+5
   \   0124   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \   0127   10....         MOVW      AX,#TimerDILamps
   \   012A   120E00         MOVW      BC,#14
   \   012D   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   012E   51             DEC       A
   \   012F   AD03           BZ        $+5
   \   0131   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \   0134   A003           MOV       X,#3
   \   0136   B1             PUSH      AX
   \   0137   A002           MOV       X,#2
   \   0139   B1             PUSH      AX
   \   013A   109001         MOVW      AX,#400
   \   013D   D2             MOVW      BC,AX
   \   013E   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   0141   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   0143   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   0144   A105           MOV       A,#5
   \   0146   16....         MOVW      HL,#DILampSignal+6
   \   0149   97             MOV       [HL],A
   \   014A   102700         MOVW      AX,#39
   \   014D   03....         MOVW      TimerCurrentActiveTimeOut,AX
   \   0150   03....         MOVW      TimerCurrentInactiveTimeOut,AX
   \   0153   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \                     ??LAPFliProtectionTask_Static_23:
   \   0156   A003           MOV       X,#3
   \   0158   B1             PUSH      AX
   \   0159   A002           MOV       X,#2
   \   015B   FA99           BR        ??LAPFliLampsRequestHasChanged_Static_5
   \                     ??LAPFliProtectionTask_Static_22:
   \   015D   8E....         MOV       A,FLAControlStatus+4
   \   0160   51             DEC       A
   \   0161   AD03           BZ        $+5
   \   0163   9B....         BR        N:??LAPFliProtectionTask_Static_24
   \   0166   8E....         MOV       A,u8TPS_RETARD_DETRESSE
   \   0169   48....         CMP       A,DATPeeCalibrationData
   \   016C   BD05           BNZ       ??LAPFliProtectionTask_Static_25
   \   016E   02....         MOVW      AX,CalculatedTPS_RETARD_DETRESSE
   \   0171   FA0E           BR        ??LAPFliProtectionTask_Static_26
   \                     ??LAPFliProtectionTask_Static_25:
   \   0173   8E....         MOV       A,DATPeeCalibrationData
   \   0176   9E....         MOV       u8TPS_RETARD_DETRESSE,A
   \   0179   A064           MOV       X,#100
   \   017B   3188           MULU      X
   \   017D   A20A           MOV       C,#10
   \   017F   3182           DIVUW     C
   \                     ??LAPFliProtectionTask_Static_26:
   \   0181   03....         MOVW      CalculatedTPS_RETARD_DETRESSE,AX
   \   0184   D2             MOVW      BC,AX
   \   0185   10....         MOVW      AX,#TimerCrashHazardDelay
   \   0188   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0189   51             DEC       A
   \   018A   AD03           BZ        $+5
   \   018C   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \   018F   8E....         MOV       A,DATPeeCalibrationData+24
   \   0192   74             MOV       E,A
   \   0193   8E....         MOV       A,FLAControlStatus+7
   \   0196   4D00           CMP       A,#0
   \   0198   BD37           BNZ       ??LAPFliProtectionTask_Static_27
   \   019A   A003           MOV       X,#3
   \   019C   B1             PUSH      AX
   \   019D   A000           MOV       X,#0
   \   019F   B1             PUSH      AX
   \   01A0   64             MOV       A,E
   \   01A1   A032           MOV       X,#50
   \   01A3   3188           MULU      X
   \   01A5   D2             MOVW      BC,AX
   \   01A6   64             MOV       A,E
   \   01A7   A032           MOV       X,#50
   \   01A9   3188           MULU      X
   \   01AB   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   01AE   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   01B0   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   01B1   A104           MOV       A,#4
   \   01B3   16....         MOVW      HL,#DILampSignal+6
   \   01B6   97             MOV       [HL],A
   \   01B7   10....         MOVW      AX,#TimerCrashHazardDurationStep
   \   01BA   9A....         CALL      TOSIsTimerStarted
   \   01BD   4D00           CMP       A,#0
   \   01BF   AD03           BZ        $+5
   \   01C1   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \   01C4   10....         MOVW      AX,#TimerCrashHazardDurationStep
   \   01C7   ..             CALLT     [__T_TOSStartTimer]
   \   01C8   8E....         MOV       A,DATPeeCalibrationData+1
   \   01CB   9E....         MOV       u8TimerStepCrashHazard,A
   \   01CE   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_2
   \                     ??LAPFliProtectionTask_Static_27:
   \   01D1   8E....         MOV       A,u8TPS_CLI
   \   01D4   614C           CMP       A,E
   \   01D6   BD05           BNZ       ??LAPFliProtectionTask_Static_28
   \   01D8   02....         MOVW      AX,CalculatedTPS_CLI
   \   01DB   FA0D           BR        ??LAPFliProtectionTask_Static_29
   \                     ??LAPFliProtectionTask_Static_28:
   \   01DD   64             MOV       A,E
   \   01DE   9E....         MOV       u8TPS_CLI,A
   \   01E1   A032           MOV       X,#50
   \   01E3   3188           MULU      X
   \   01E5   A20A           MOV       C,#10
   \   01E7   3182           DIVUW     C
   \   01E9   90             DECW      AX
   \                     ??LAPFliProtectionTask_Static_29:
   \   01EA   03....         MOVW      CalculatedTPS_CLI,AX
   \   01ED   D2             MOVW      BC,AX
   \   01EE   10....         MOVW      AX,#TimerDILamps
   \   01F1   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   01F2   51             DEC       A
   \   01F3   BD33           BNZ       ??LAPFliProtectionTask_Static_30
   \   01F5   A003           MOV       X,#3
   \   01F7   B1             PUSH      AX
   \   01F8   A000           MOV       X,#0
   \   01FA   B1             PUSH      AX
   \   01FB   8E....         MOV       A,DATPeeCalibrationData+24
   \   01FE   A032           MOV       X,#50
   \   0200   3188           MULU      X
   \   0202   D2             MOVW      BC,AX
   \   0203   8E....         MOV       A,DATPeeCalibrationData+24
   \   0206   A032           MOV       X,#50
   \   0208   3188           MULU      X
   \   020A   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   020D   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   020F   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   0210   A104           MOV       A,#4
   \   0212   16....         MOVW      HL,#DILampSignal+6
   \   0215   97             MOV       [HL],A
   \   0216   10....         MOVW      AX,#TimerCrashHazardDurationStep
   \   0219   ..             CALLT     [__T_TOSStartTimer]
   \   021A   8E....         MOV       A,DATPeeCalibrationData+1
   \   021D   9E....         MOV       u8TimerStepCrashHazard,A
   \                     ??LAPFliLampsRequestHasChanged_Static_7:
   \   0220   A100           MOV       A,#0
   \   0222   16....         MOVW      HL,#FLAControlStatus+7
   \   0225   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_1
   \                     ??LAPFliProtectionTask_Static_30:
   \   0228   8E....         MOV       A,u8TPS_CLI
   \   022B   48....         CMP       A,DATPeeCalibrationData+24
   \   022E   BD05           BNZ       ??LAPFliProtectionTask_Static_31
   \   0230   02....         MOVW      AX,CalculatedTPS_CLI
   \   0233   FA0F           BR        ??LAPFliProtectionTask_Static_32
   \                     ??LAPFliProtectionTask_Static_31:
   \   0235   8E....         MOV       A,DATPeeCalibrationData+24
   \   0238   9E....         MOV       u8TPS_CLI,A
   \   023B   A032           MOV       X,#50
   \   023D   3188           MULU      X
   \   023F   A20A           MOV       C,#10
   \   0241   3182           DIVUW     C
   \   0243   90             DECW      AX
   \                     ??LAPFliProtectionTask_Static_32:
   \   0244   03....         MOVW      CalculatedTPS_CLI,AX
   \   0247   03....         MOVW      TimerCurrentInactiveTimeOut,AX
   \   024A   A104           MOV       A,#4
   \   024C   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_6
   \                     ??LAPFliProtectionTask_Static_24:
   \   024F   8E....         MOV       A,FLAControlStatus+3
   \   0252   51             DEC       A
   \   0253   BD5D           BNZ       ??LAPFliProtectionTask_Static_33
   \   0255   8E....         MOV       A,FLAControlStatus+7
   \   0258   4D00           CMP       A,#0
   \   025A   BD20           BNZ       ??LAPFliProtectionTask_Static_34
   \   025C   A003           MOV       X,#3
   \   025E   B1             PUSH      AX
   \   025F   A000           MOV       X,#0
   \   0261   B1             PUSH      AX
   \   0262   8E....         MOV       A,DATPeeCalibrationData+24
   \   0265   A032           MOV       X,#50
   \   0267   3188           MULU      X
   \   0269   D2             MOVW      BC,AX
   \   026A   8E....         MOV       A,DATPeeCalibrationData+24
   \   026D   A032           MOV       X,#50
   \   026F   3188           MULU      X
   \   0271   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   0274   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   0276   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \                     ??LAPFliLampsRequestHasChanged_Static_8:
   \   0277   A103           MOV       A,#3
   \   0279   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_6
   \                     ??LAPFliProtectionTask_Static_34:
   \   027C   10....         MOVW      AX,#TimerDILamps
   \   027F   120E00         MOVW      BC,#14
   \   0282   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0283   51             DEC       A
   \   0284   BD24           BNZ       ??LAPFliProtectionTask_Static_35
   \   0286   A003           MOV       X,#3
   \   0288   B1             PUSH      AX
   \   0289   A000           MOV       X,#0
   \   028B   B1             PUSH      AX
   \   028C   8E....         MOV       A,DATPeeCalibrationData+24
   \   028F   A032           MOV       X,#50
   \   0291   3188           MULU      X
   \   0293   D2             MOVW      BC,AX
   \   0294   8E....         MOV       A,DATPeeCalibrationData+24
   \   0297   A032           MOV       X,#50
   \   0299   3188           MULU      X
   \   029B   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   029E   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   02A0   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   02A1   A103           MOV       A,#3
   \   02A3   16....         MOVW      HL,#DILampSignal+6
   \   02A6   97             MOV       [HL],A
   \   02A7   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_7
   \                     ??LAPFliProtectionTask_Static_35:
   \   02AA   100E00         MOVW      AX,#14
   \   02AD   03....         MOVW      TimerCurrentInactiveTimeOut,AX
   \   02B0   FAC5           BR        ??LAPFliLampsRequestHasChanged_Static_8
   \                     ??LAPFliProtectionTask_Static_33:
   \   02B2   8E....         MOV       A,FLAControlStatus
   \   02B5   51             DEC       A
   \   02B6   AD39           BZ        ??LAPFliProtectionTask_Static_36
   \   02B8   8E....         MOV       A,FLAControlStatus+1
   \   02BB   4D01           CMP       A,#1
   \   02BD   AD03           BZ        $+5
   \   02BF   9B....         BR        N:??LAPFliProtectionTask_Static_37
   \   02C2   A102           MOV       A,#2
   \                     ??LAPFliLampsRequestHasChanged_Static_9:
   \   02C4   73             MOV       B,A
   \   02C5   16....         MOVW      HL,#DILampSignal+6
   \   02C8   97             MOV       [HL],A
   \   02C9   8E....         MOV       A,FLAControlStatus+9
   \   02CC   51             DEC       A
   \   02CD   BD75           BNZ       ??LAPFliProtectionTask_Static_38
   \   02CF   8E....         MOV       A,DATPeeCalibrationData+25
   \   02D2   A032           MOV       X,#50
   \   02D4   3188           MULU      X
   \   02D6   D6             MOVW      HL,AX
   \   02D7   02....         MOVW      AX,DILampSignal+2
   \   02DA   30             XCH       A,X
   \   02DB   611E           SUB       A,L
   \   02DD   30             XCH       A,X
   \   02DE   613F           SUBC      A,H
   \   02E0   6168           OR        A,X
   \   02E2   AD48           BZ        ??LAPFliProtectionTask_Static_39
   \   02E4   8E....         MOV       A,u8TPS_CLIDEGRAD
   \   02E7   48....         CMP       A,DATPeeCalibrationData+25
   \   02EA   BD09           BNZ       ??LAPFliProtectionTask_Static_40
   \   02EC   02....         MOVW      AX,CalculatedTPS_CLIDEGRAD
   \   02EF   FA13           BR        ??LAPFliProtectionTask_Static_41
   \                     ??LAPFliProtectionTask_Static_36:
   \   02F1   A101           MOV       A,#1
   \   02F3   FACF           BR        ??LAPFliLampsRequestHasChanged_Static_9
   \                     ??LAPFliProtectionTask_Static_40:
   \   02F5   8E....         MOV       A,DATPeeCalibrationData+25
   \   02F8   9E....         MOV       u8TPS_CLIDEGRAD,A
   \   02FB   A032           MOV       X,#50
   \   02FD   3188           MULU      X
   \   02FF   A20A           MOV       C,#10
   \   0301   3182           DIVUW     C
   \   0303   90             DECW      AX
   \                     ??LAPFliProtectionTask_Static_41:
   \   0304   03....         MOVW      CalculatedTPS_CLIDEGRAD,AX
   \   0307   03....         MOVW      TimerCurrentActiveTimeOut,AX
   \   030A   8E....         MOV       A,u8TPS_CLIDEGRAD
   \   030D   48....         CMP       A,DATPeeCalibrationData+25
   \   0310   BD05           BNZ       ??LAPFliProtectionTask_Static_42
   \   0312   8E....         MOV       A,CalculatedTPS_CLIDEGRAD+1
   \   0315   FA0F           BR        ??LAPFliProtectionTask_Static_43
   \                     ??LAPFliProtectionTask_Static_42:
   \   0317   8E....         MOV       A,DATPeeCalibrationData+25
   \   031A   9E....         MOV       u8TPS_CLIDEGRAD,A
   \   031D   A032           MOV       X,#50
   \   031F   3188           MULU      X
   \   0321   A20A           MOV       C,#10
   \   0323   3182           DIVUW     C
   \   0325   90             DECW      AX
   \                     ??LAPFliProtectionTask_Static_43:
   \   0326   03....         MOVW      CalculatedTPS_CLIDEGRAD,AX
   \   0329   03....         MOVW      TimerCurrentInactiveTimeOut,AX
   \                     ??LAPFliProtectionTask_Static_39:
   \   032C   63             MOV       A,B
   \   032D   70             MOV       X,A
   \   032E   B1             PUSH      AX
   \   032F   A000           MOV       X,#0
   \   0331   B1             PUSH      AX
   \   0332   8E....         MOV       A,DATPeeCalibrationData+25
   \   0335   A032           MOV       X,#50
   \   0337   3188           MULU      X
   \   0339   D2             MOVW      BC,AX
   \   033A   8E....         MOV       A,DATPeeCalibrationData+25
   \                     ??LAPFliLampsRequestHasChanged_Static_10:
   \   033D   A032           MOV       X,#50
   \   033F   3188           MULU      X
   \   0341   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_4
   \                     ??LAPFliProtectionTask_Static_38:
   \   0344   63             MOV       A,B
   \   0345   70             MOV       X,A
   \   0346   B1             PUSH      AX
   \   0347   A000           MOV       X,#0
   \   0349   B1             PUSH      AX
   \   034A   8E....         MOV       A,DATPeeCalibrationData+24
   \   034D   A032           MOV       X,#50
   \   034F   3188           MULU      X
   \   0351   D2             MOVW      BC,AX
   \   0352   8E....         MOV       A,DATPeeCalibrationData+24
   \   0355   FAE6           BR        ??LAPFliLampsRequestHasChanged_Static_10
   \                     ??LAPFliProtectionTask_Static_37:
   \   0357   A000           MOV       X,#0
   \   0359   B1             PUSH      AX
   \   035A   B1             PUSH      AX
   \   035B   A100           MOV       A,#0
   \   035D   D2             MOVW      BC,AX
   \   035E   16....         MOVW      HL,#LWRD(SetFlasherSignal)
   \   0361   A4..           MOV       E,#BYTE3(SetFlasherSignal)
   \   0363   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   0364   A100           MOV       A,#0
   \   0366   16....         MOVW      HL,#DILampSignal+6
   \   0369   97             MOV       [HL],A
   \   036A   16....         MOVW      HL,#FLAControlStatus+7
   \   036D   97             MOV       [HL],A
   \   036E   16....         MOVW      HL,#FLAControlStatus+9
   \   0371   97             MOV       [HL],A
   \   0372   16....         MOVW      HL,#FLAControlStatus+11
   \   0375   97             MOV       [HL],A
   \   0376   9B....         BR        N:??LAPFliLampsRequestHasChanged_Static_3
   1055              else
   1056              {
   1057                  bReturnValueL = cFalse;
   \                     ??LAPFliProtectionTask_Static_13:
   \   0379   A000           MOV       X,#0
   1058              }
   1059          
   1060              return bReturnValueL;
   \                     ??LAPFliProtectionTask_Static_16:
   \   037B   60             MOV       A,X
   \   037C   B2             POP       BC
   \   037D   AF             RET       
   \   037E                  REQUIRE ?CL78K_V4_6_L00
   1061          }
   1062          
   1063          
   1064          //==============================================================================
   1065          // DESCRIPTION : 
   1066          //
   1067          // PARAMETERS (Type,Name,Min,Max) :   none
   1068          //
   1069          // RETURN VALUE :   none
   1070          //
   1071          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1072          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1073          void LAPFliLampsOff(void)
   \                     LAPFliLampsOff:
   1074          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1075          #ifdef X90_PROJECT
   1076              LAPFliLampsOff_Static();
   \   0001   16....         MOVW      HL,#LWRD(LAPFliLampsOff_Static)
   \   0004   A4..           MOV       E,#BYTE3(LAPFliLampsOff_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1077          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1078          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1079          static MEM_TYPE void LAPFliLampsOff_Static(void)
   \                     LAPFliLampsOff_Static:
   1080          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1081          #endif
   1082          
   1083          
   1084              mDATWrite(U1Bit, DI_LEFT,  0, Default);
   1085              mDATWrite(U1Bit, DI_RIGHT, 0, Default);
   \   0001   D8..3F         AND       S:DATPouSoftOutputBuffer+3,#63
   1086          
   1087              if (mRead(ShortCircuitIsDetected) == cFalse)
   \   0004   8E....         MOV       A,FLAControlStatus+11
   \   0007   4D00           CMP       A,#0
   \   0009   BD07           BNZ       ??LAPFliProtectionTask_Static_44
   1088              {
   1089                  mDATWriteTable(U1Bit, BUZZER, eBUZZER_FlasherClack, cTrue, Default);
   \   000B   A102           MOV       A,#2
   \   000D   A301           MOV       B,#1
   \   000F   9A....         CALL      DATBuzSetBuzzRequest
   1090              }
   1091              else
   1092              {
   1093                  // buzzer sound disabled during SC if faulty side is turned on 
   1094                  // or if both sides are faulty in Hazard mode
   1095              }
   1096                      
   1097              // Flashing for TFC is only once so clear the flag on each LampsOff
   1098              mClear( TFCFlashingIsRequested );
   \                     ??LAPFliProtectionTask_Static_44:
   \   0012   A100           MOV       A,#0
   \   0014   16....         MOVW      HL,#FLAControlStatus+8
   \   0017   97             MOV       [HL],A
   1099              
   1100          
   1101              FLAControlStatus.LockUnlockConfirmationIsRequested_Memo =
   1102                  ((BOOL)(   (FLAControlStatus.LockConfirmationIsRequested)
   1103                          || (FLAControlStatus.UnlockConfirmationIsRequested)  ));
   \   0018   8E....         MOV       A,FLAControlStatus+5
   \   001B   4D00           CMP       A,#0
   \   001D   BD07           BNZ       ??LAPFliProtectionTask_Static_45
   \   001F   8E....         MOV       A,FLAControlStatus+6
   \   0022   4D00           CMP       A,#0
   \   0024   AD04           BZ        ??LAPFliProtectionTask_Static_46
   \                     ??LAPFliProtectionTask_Static_45:
   \   0026   A101           MOV       A,#1
   \   0028   FA02           BR        ??LAPFliProtectionTask_Static_47
   \                     ??LAPFliProtectionTask_Static_46:
   \   002A   A100           MOV       A,#0
   \                     ??LAPFliProtectionTask_Static_47:
   \   002C   9E....         MOV       FLAControlStatus+7,A
   1104              
   1105              if (   (mLockUnlockConfirmationIsRequested() == cTrue)
   1106                  && (DILampSignal.FlashingMode == cRFFeedback )   )
   \   002F   8E....         MOV       A,FLAControlStatus+5
   \   0032   51             DEC       A
   \   0033   AD06           BZ        ??LAPFliProtectionTask_Static_48
   \   0035   8E....         MOV       A,FLAControlStatus+6
   \   0038   51             DEC       A
   \   0039   BD22           BNZ       ??LAPFliProtectionTask_Static_49
   \                     ??LAPFliProtectionTask_Static_48:
   \   003B   8E....         MOV       A,DILampSignal+6
   \   003E   4D05           CMP       A,#5
   \   0040   BD1B           BNZ       ??LAPFliProtectionTask_Static_49
   1107              {
   1108                  // RF MODE
   1109                  u8FlashCount++;
   \   0042   8E....         MOV       A,u8FlashCount
   \   0045   41             INC       A
   \   0046   9E....         MOV       u8FlashCount,A
   1110                  if ( u8FlashCount >= DILampSignal.DILampCycleNumber )
   \   0049   48....         CMP       A,DILampSignal+4
   \   004C   8D0F           BC        ??LAPFliProtectionTask_Static_49
   1111                  {
   1112                      DILampSignal.DILampSideOn = cRightAndLeftSideOff;
   \   004E   A100           MOV       A,#0
   \   0050   16....         MOVW      HL,#DILampSignal+5
   \   0053   97             MOV       [HL],A
   1113          
   1114                      mClear( LockConfirmationIsRequested );
   \   0054   16....         MOVW      HL,#FLAControlStatus+5
   \   0057   97             MOV       [HL],A
   1115                      mClear( UnlockConfirmationIsRequested ); 
   \   0058   86             INCW      HL
   \   0059   97             MOV       [HL],A
   1116                      
   1117                      u8FlashCount = 0;
   \   005A   9E....         MOV       u8FlashCount,A
   1118                  }
   1119                  else
   1120                  {
   1121                      // Do nothing
   1122                  }
   1123              }
   1124              else
   1125              {
   1126                  // Do nothing
   1127              }
   1128              
   1129              TOSStartTempo( &TimerDILamps );
   \                     ??LAPFliProtectionTask_Static_49:
   \   005D   10....         MOVW      AX,#TimerDILamps
   \   0060   ..             CALLT     [__T_TOSStartTimer]
   1130          }
   \   0061   B2             POP       BC
   \   0062   AF             RET       
   \   0063                  REQUIRE ?CL78K_V4_6_L00
   1131          
   1132          
   1133          //==============================================================================
   1134          // DESCRIPTION : 
   1135          //
   1136          // PARAMETERS (Type,Name,Min,Max) :   none
   1137          //
   1138          // RETURN VALUE :   none 
   1139          //
   1140          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1141          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1142          BOOL LAPFliLampsOffTimeIsElapsed(void)
   \                     LAPFliLampsOffTimeIsElapsed:
   1143          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1144              return 
   1145                  (BOOL)( TOSIsTimerElapsed(&TimerDILamps, TimerCurrentInactiveTimeOut) );
   \   0001   02....         MOVW      AX,TimerCurrentInactiveTimeOut
   \   0004   D2             MOVW      BC,AX
   \   0005   10....         MOVW      AX,#TimerDILamps
   \   0008   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0009   B2             POP       BC
   \   000A   AF             RET       
   \   000B                  REQUIRE ?CL78K_V4_6_L00
   1146          }
   1147          
   1148          
   1149          //==============================================================================
   1150          // DESCRIPTION : 
   1151          //
   1152          // PARAMETERS (Type,Name,Min,Max) :   none
   1153          //
   1154          // RETURN VALUE :   none
   1155          //
   1156          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1157          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1158          void LAPFliLampsOn(void)
   \                     LAPFliLampsOn:
   1159          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1160          #ifdef X90_PROJECT
   1161              LAPFliLampsOn_Static();
   \   0001   16....         MOVW      HL,#LWRD(LAPFliLampsOn_Static)
   \   0004   A4..           MOV       E,#BYTE3(LAPFliLampsOn_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1162          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1163          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1164          static MEM_TYPE void LAPFliLampsOn_Static(void)
   \                     LAPFliLampsOn_Static:
   1165          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1166          #endif
   1167          
   1168              if ( (DILampSignal.DILampSideOn & cLeftSideOn) != 0 )
   \   0001   16....         MOVW      HL,#DILampSignal+5
   \   0004   318704         BF        [HL].0, ??LAPFliProtectionTask_Static_50
   1169              {
   1170                  mDATWrite(U1Bit, DI_LEFT, 1, Default);
   \   0007   6A..           SET1      S:DATPouSoftOutputBuffer+3.6
   \   0009   FA02           BR        ??LAPFliProtectionTask_Static_51
   1171              }
   1172              else
   1173              {
   1174                  mDATWrite(U1Bit, DI_LEFT, 0, Default);
   \                     ??LAPFliProtectionTask_Static_50:
   \   000B   6B..           CLR1      S:DATPouSoftOutputBuffer+3.6
   1175              }
   1176          
   1177              if ( (DILampSignal.DILampSideOn & cRightSideOn) != 0 )
   \                     ??LAPFliProtectionTask_Static_51:
   \   000D   319704         BF        [HL].1, ??LAPFliProtectionTask_Static_52
   1178              {
   1179                  mDATWrite(U1Bit, DI_RIGHT, 1, Default);
   \   0010   7A..           SET1      S:DATPouSoftOutputBuffer+3.7
   \   0012   FA02           BR        ??LAPFliProtectionTask_Static_53
   1180              }
   1181              else
   1182              {
   1183                  mDATWrite(U1Bit, DI_RIGHT, 0, Default);
   \                     ??LAPFliProtectionTask_Static_52:
   \   0014   7B..           CLR1      S:DATPouSoftOutputBuffer+3.7
   1184              }
   1185          
   1186              // Update buzzer status for Hazard mode and active HW protection
   1187              if (    (   (
   1188                              (DILampSignal.FlashingMode == cHazard) 
   1189                           || (DILampSignal.FlashingMode == cCrashHazard)
   1190                          )
   1191                       && (   (mDATRead(U1Bit, DI_LEFTProtection, Default) != cFalse) 
   1192                           && (mDATRead(U1Bit, DI_RIGHTProtection, Default) != cFalse)
   1193                          )
   1194                      )
   1195                   || (   (   (DILampSignal.FlashingMode == cLeftTFC)
   1196                           || (DILampSignal.FlashingMode == cLeftTurn)                 
   1197                          )
   1198                       && (mDATRead(U1Bit, DI_LEFTProtection, Default) != cFalse)
   1199                      )
   1200                   || (   (   (DILampSignal.FlashingMode == cRightTFC)
   1201                           || (DILampSignal.FlashingMode == cRightTurn)                 
   1202                          )
   1203                       && (mDATRead(U1Bit, DI_RIGHTProtection, Default) != cFalse)
   1204                      )
   1205                 )
   \                     ??LAPFliProtectionTask_Static_53:
   \   0016   8E....         MOV       A,DILampSignal+6
   \   0019   70             MOV       X,A
   \   001A   4D03           CMP       A,#3
   \   001C   AD04           BZ        ??LAPFliProtectionTask_Static_54
   \   001E   4D04           CMP       A,#4
   \   0020   BD07           BNZ       ??LAPFliProtectionTask_Static_55
   \                     ??LAPFliProtectionTask_Static_54:
   \   0022   3163..03       BF        S:DATPouHardMaskBuffer+3.6, ??LAPFliProtectionTask_Static_55
   \   0026   FC..17         BT        S:DATPouHardMaskBuffer+3.7, ??LAPFliProtectionTask_Static_56
   \                     ??LAPFliProtectionTask_Static_55:
   \   0029   4D06           CMP       A,#6
   \   002B   AD03           BZ        ??LAPFliProtectionTask_Static_57
   \   002D   51             DEC       A
   \   002E   BD03           BNZ       ??LAPFliProtectionTask_Static_58
   \                     ??LAPFliProtectionTask_Static_57:
   \   0030   EC..0D         BT        S:DATPouHardMaskBuffer+3.6, ??LAPFliProtectionTask_Static_56
   \                     ??LAPFliProtectionTask_Static_58:
   \   0033   60             MOV       A,X
   \   0034   4D07           CMP       A,#7
   \   0036   AD04           BZ        ??LAPFliProtectionTask_Static_59
   \   0038   4D02           CMP       A,#2
   \   003A   BD08           BNZ       ??LAPFliProtectionTask_Static_60
   \                     ??LAPFliProtectionTask_Static_59:
   \   003C   3173..04       BF        S:DATPouHardMaskBuffer+3.7, ??LAPFliProtectionTask_Static_60
   1206              {
   1207                  mSet(ShortCircuitIsDetected);
   \                     ??LAPFliProtectionTask_Static_56:
   \   0040   A101           MOV       A,#1
   \   0042   FA02           BR        ??LAPFliProtectionTask_Static_61
   1208              }
   1209              else
   1210              {
   1211                  mClear(ShortCircuitIsDetected);
   \                     ??LAPFliProtectionTask_Static_60:
   \   0044   A100           MOV       A,#0
   \                     ??LAPFliProtectionTask_Static_61:
   \   0046   16....         MOVW      HL,#FLAControlStatus+11
   \   0049   97             MOV       [HL],A
   1212              }
   1213          
   1214              if (   (mDATRead(U1Bit, DI_LEFT,  Default) == 1)
   1215                  || (mDATRead(U1Bit, DI_RIGHT, Default) == 1)   )
   \   004A   F0..           MOV       A,S:DATPouSoftOutputBuffer+3
   \   004C   5DC0           AND       A,#192
   \   004E   AD0B           BZ        ??LAPFliProtectionTask_Static_62
   1216              {
   1217                  if (mRead(ShortCircuitIsDetected) == cFalse)
   \   0050   87             MOV       A,[HL]
   \   0051   4D00           CMP       A,#0
   \   0053   BD06           BNZ       ??LAPFliProtectionTask_Static_62
   1218                  {        
   1219                      mDATWriteTable(U1Bit, BUZZER, eBUZZER_FlasherClick, cTrue, Default);
   \   0055   A101           MOV       A,#1
   \   0057   73             MOV       B,A
   \   0058   9A....         CALL      DATBuzSetBuzzRequest
   1220                  }
   1221                  else
   1222                  {
   1223                      // buzzer sound disabled during SC if faulty side is turned on 
   1224                      // or if both sides are faulty in Hazard mode
   1225                  }
   1226              }
   1227          
   1228              TOSStartTempo( &TimerDILamps );
   \                     ??LAPFliProtectionTask_Static_62:
   \   005B   10....         MOVW      AX,#TimerDILamps
   \   005E   ..             CALLT     [__T_TOSStartTimer]
   1229              TimerCurrentActiveTimeOut = 
   1230                  (mTOSConvMsInTimerTick((U32)DILampSignal.TimeDILampOn) - (tTOSTimer)1U);
   \   005F   02....         MOVW      AX,DILampSignal
   \   0062   A20A           MOV       C,#10
   \   0064   3182           DIVUW     C
   \   0066   90             DECW      AX
   \   0067   03....         MOVW      TimerCurrentActiveTimeOut,AX
   1231              TimerCurrentInactiveTimeOut = 
   1232                  (mTOSConvMsInTimerTick((U32)DILampSignal.TimeDILampOff) - (tTOSTimer)1U);
   \   006A   02....         MOVW      AX,DILampSignal+2
   \   006D   A20A           MOV       C,#10
   \   006F   3182           DIVUW     C
   \   0071   90             DECW      AX
   \   0072   03....         MOVW      TimerCurrentInactiveTimeOut,AX
   1233          
   1234          
   1235              // Update Diag flashing frequency
   1236              if (   (DILampSignal.DILampSideOn == cLeftSideOn)
   1237                  || (DILampSignal.DILampSideOn == cRightSideOn)  )
   \   0075   8E....         MOV       A,DILampSignal+5
   \   0078   51             DEC       A
   \   0079   AD07           BZ        ??LAPFliProtectionTask_Static_63
   \   007B   8E....         MOV       A,DILampSignal+5
   \   007E   4D02           CMP       A,#2
   \   0080   BD0E           BNZ       ??LAPFliProtectionTask_Static_64
   1238              {
   1239                  if ( mRead(BulbFailureDetected) == cTrue )
   \                     ??LAPFliProtectionTask_Static_63:
   \   0082   8E....         MOV       A,FLAControlStatus+9
   \   0085   51             DEC       A
   \   0086   BD04           BNZ       ??LAPFliProtectionTask_Static_65
   1240                  {
   1241                      mDATWrite(U8Bit, 
   1242                                FlashingFrequency, 
   1243                                cDATCmnDegradedFlashingMode, 
   1244                                Default
   1245                               );
   \   0088   A102           MOV       A,#2
   \   008A   FA0A           BR        ??LAPFliProtectionTask_Static_66
   1246                  }
   1247                  else
   1248                  {
   1249                      mDATWrite(U8Bit, 
   1250                                FlashingFrequency, 
   1251                                cDATCmnNormalFlashingMode, 
   1252                                Default
   1253                               );
   \                     ??LAPFliProtectionTask_Static_65:
   \   008C   A101           MOV       A,#1
   \   008E   FA06           BR        ??LAPFliProtectionTask_Static_66
   1254                  }
   1255              }
   1256              else if (DILampSignal.DILampSideOn == cRightAndLeftSideOn)
   \                     ??LAPFliProtectionTask_Static_64:
   \   0090   4D03           CMP       A,#3
   \   0092   ADF8           BZ        ??LAPFliProtectionTask_Static_65
   1257              {
   1258                  mDATWrite(U8Bit, FlashingFrequency, cDATCmnNormalFlashingMode, Default);
   1259              }
   1260              else
   1261              {
   1262                  mDATWrite(U8Bit, FlashingFrequency, cDATCmnNoFlashing, Default);
   \   0094   A100           MOV       A,#0
   \                     ??LAPFliProtectionTask_Static_66:
   \   0096   9E....         MOV       DATCmnData+1,A
   1263              }
   1264          }
   \   0099   B2             POP       BC
   \   009A   AF             RET       
   \   009B                  REQUIRE ?CL78K_V4_6_L00
   1265          
   1266          
   1267          //==============================================================================
   1268          // DESCRIPTION : 
   1269          //
   1270          // PARAMETERS (Type,Name,Min,Max) :   none
   1271          //
   1272          // RETURN VALUE :   none 
   1273          //
   1274          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1275          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1276          BOOL LAPFliLampsOnTimeIsElapsed(void)
   \                     LAPFliLampsOnTimeIsElapsed:
   1277          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1278              const BOOL bLampsOnTimerIsElapsedL = 
   1279                             TOSIsTimerElapsed(&TimerDILamps, TimerCurrentActiveTimeOut);
   1280          
   1281              return (BOOL)( bLampsOnTimerIsElapsedL  == cTrue );
   \   0001   02....         MOVW      AX,TimerCurrentActiveTimeOut
   \   0004   D2             MOVW      BC,AX
   \   0005   10....         MOVW      AX,#TimerDILamps
   \   0008   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0009   51             DEC       A
   \   000A   BD04           BNZ       ??LAPFliProtectionTask_Static_128
   \   000C   A101           MOV       A,#1
   \   000E   FA02           BR        ??LAPFliProtectionTask_Static_129
   \                     ??LAPFliProtectionTask_Static_128:
   \   0010   A100           MOV       A,#0
   \                     ??LAPFliProtectionTask_Static_129:
   \   0012   B2             POP       BC
   \   0013   AF             RET       
   \   0014                  REQUIRE ?CL78K_V4_6_L00
   1282          }
   1283          
   1284          
   1285          //==============================================================================
   1286          // DESCRIPTION : 
   1287          //
   1288          // PARAMETERS (Type,Name,Min,Max) :   none
   1289          //
   1290          // RETURN VALUE :   none
   1291          //
   1292          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1293          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1294          void LAPFliMeasureCurrent(void)
   \                     LAPFliMeasureCurrent:
   1295          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1296          #ifdef X90_PROJECT
   1297              LAPFliMeasureCurrent_Static();
   \   0001   16....         MOVW      HL,#LWRD(LAPFliMeasureCurrent_Static)
   \   0004   A4..           MOV       E,#BYTE3(LAPFliMeasureCurrent_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1298          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1299          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1300          static MEM_TYPE void LAPFliMeasureCurrent_Static(void)
   \                     LAPFliMeasureCurrent_Static:
   1301          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1302          #endif
   1303              
   1304              
   1305              BOOL bBulbFailureIsPresentL;
   1306              
   1307              // Bulb Failure and Trailer Detection
   1308              if ( mDATRead(U1Bit, DI_LEFT, Default) != mDATRead(U1Bit, DI_RIGHT, Default) )
   \   0000   7174..         MOV1      CY,S:DATPouSoftOutputBuffer+3.7
   \   0003   7167..         XOR1      CY,S:DATPouSoftOutputBuffer+3.6
   \   0006   9D18           BNC       ??LAPFliProtectionTask_Static_67
   1309              {
   1310                  mClear( BulbFailureDetected );
   \   0008   A100           MOV       A,#0
   \   000A   16....         MOVW      HL,#FLAControlStatus+9
   \   000D   97             MOV       [HL],A
   1311          
   1312                  // Measure current and check if there is a burned out lamp
   1313                  bBulbFailureIsPresentL = mDATRead(U1Bit, FlasherBulbFailure, Default);
   1314              
   1315                  if ( bBulbFailureIsPresentL == cTrue )
   \   000E   8E....         MOV       A,bDATPanFlasherBulbFailure
   \   0011   51             DEC       A
   \   0012   BD07           BNZ       ??LAPFliProtectionTask_Static_68
   1316                  {
   1317                      mDATWrite(U8Bit, FlasherLampsTestResult, cDATCmnFlasherLampIsBurnedOut, Default);
   \   0014   A101           MOV       A,#1
   \   0016   9E....         MOV       DATCmnData+2,A
   1318                      mSet( BulbFailureDetected );
   \   0019   97             MOV       [HL],A
   \   001A   AF             RET       
   1319                  }
   1320                  else
   1321                  {
   1322                      mDATWrite(U8Bit, FlasherLampsTestResult, cDATCmnFlasherLampsAreOK, Default);
   \                     ??LAPFliProtectionTask_Static_68:
   \   001B   A102           MOV       A,#2
   \   001D   9E....         MOV       DATCmnData+2,A
   1323                  }
   1324              }
   1325              else
   1326              {
   1327                  // Do nothing
   1328              }
   1329          
   1330          }
   \                     ??LAPFliProtectionTask_Static_67:
   \   0020   AF             RET       
   \   0021                  REQUIRE ?CL78K_V4_6_L00
   1331          
   1332          
   1333          //==============================================================================
   1334          // DESCRIPTION : 
   1335          //
   1336          // PARAMETERS (Type,Name,Min,Max) :   none
   1337          //
   1338          // RETURN VALUE :   none 
   1339          //
   1340          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1341          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1342          BOOL LAPFliMeasureCurrentOk(void)
   \                     LAPFliMeasureCurrentOk:
   1343          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   10....         MOVW      AX,#TimerDILamps
   \   0003   B3             PUSH      BC
   \   0004   B5             PUSH      DE
   \   0005                  ; Total Auto size: 0
   1344              const tTOSTimer TimerDILampsElapsedTimeL = 
   1345                                  TOSGetTimerElapsedTime(&TimerDILamps);
   \   0005   9A....         CALL      TOSGetTimerElapsedTime
   \   0008   D6             MOVW      HL,AX
   1346              tTOSTimer       MeasureCurrentInterval;
   1347              BOOL            bTimeForCurrentMeasureHasElapsed = cFalse;
   \   0009   A200           MOV       C,#0
   1348          
   1349              if ( TimerCurrentActiveTimeOut > mReadMeasureDefaultIntervalInTicks() )
   \   000B   02....         MOVW      AX,TimerCurrentActiveTimeOut
   \   000E   EA0D00         CMPW      AX,#13
   \   0011   8D05           BC        ??LAPFliProtectionTask_Static_130
   1350              {
   1351                  MeasureCurrentInterval = mReadMeasureDefaultIntervalInTicks();
   \   0013   100C00         MOVW      AX,#12
   \   0016   FA03           BR        ??LAPFliProtectionTask_Static_131
   1352              }
   1353              else
   1354              {
   1355                  MeasureCurrentInterval = 
   1356                      TimerCurrentActiveTimeOut - (mTOSConvMsInTimerTick(cMeasureOffsetForSmallInterval));
   1357                  // Compensation for the case when timeout is equal to the elapsed time
   1358                  MeasureCurrentInterval--;
   \                     ??LAPFliProtectionTask_Static_130:
   \   0018   CAFDFF         ADDW      AX,#65533
   1359              }
   1360          
   1361              if( TimerDILampsElapsedTimeL > MeasureCurrentInterval )
   \                     ??LAPFliProtectionTask_Static_131:
   \   001B   30             XCH       A,X
   \   001C   611E           SUB       A,L
   \   001E   60             MOV       A,X
   \   001F   613F           SUBC      A,H
   \   0021   9D0D           BNC       ??LAPFliProtectionTask_Static_132
   1362              {
   1363                  bTimeForCurrentMeasureHasElapsed = cTrue;
   \   0023   A201           MOV       C,#1
   1364                  mDATControl(DATPan, FlashersCurrentMeasure);
   \   0025   16....         MOVW      HL,#LWRD(DATPanFlashersCurrentMeasure)
   \   0028   A4..           MOV       E,#BYTE3(DATPanFlashersCurrentMeasure)
   \   002A   ..             CALLT     [__T_?FAR_CALL_L07]
   1365                  bFlasherSCBatOrOpenLoadReadAllowed  = cTrue;
   \   002B   A101           MOV       A,#1
   \   002D   9E....         MOV       bFlasherSCBatOrOpenLoadReadAllowed,A
   1366              }
   1367          
   1368              return bTimeForCurrentMeasureHasElapsed;
   \                     ??LAPFliProtectionTask_Static_132:
   \   0030   62             MOV       A,C
   \   0031   B4             POP       DE
   \   0032   B2             POP       BC
   \   0033   AF             RET       
   \   0034                  REQUIRE ?CL78K_V4_6_L00
   1369          }
   1370          
   1371          
   1372          //==============================================================================
   1373          // DESCRIPTION : 
   1374          //
   1375          // PARAMETERS (Type,Name,Min,Max) :   none
   1376          //
   1377          // RETURN VALUE :   none
   1378          //
   1379          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1380          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1381          void LAPFliInputManagement(void)
   \                     LAPFliInputManagement:
   1382          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1383          #ifdef X90_PROJECT
   1384              LAPFliInputManagement_Static();
   \   0001   16....         MOVW      HL,#LWRD(LAPFliInputManagement_Static)
   \   0004   A4..           MOV       E,#BYTE3(LAPFliInputManagement_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1385          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1386          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1387          static MEM_TYPE void LAPFliInputManagement_Static( void )
   \                     LAPFliInputManagement_Static:
   1388          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   102300         MOVW      AX,#35
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
   1389          #endif
   1390          
   1391              BOOL bRfLockIsDetectedL;
   1392              BOOL bRfUnlockIsDetectedL;
   1393              BOOL bPWR_IGN_RisingEdgeIsDetectedL;
   1394              BOOL bHAZARD_SW_FallingEdgeIsDetectedL;
   1395              BOOL bCrashHazardDurationHasElapsedL;
   1396              BOOL bCrashUnlockHasFinishedL;
   1397              BOOL bCrashHazardWarningIsEnabledL;
   1398          
   1399              // -------------------------------------------------------------------------
   1400              // LOCK ALL SIGNAL
   1401              // -------------------------------------------------------------------------
   1402              bRfLockIsDetectedL = TOSReadSignal(cTOSSignalLAPFliEventRfLockAll);
   1403              if (   ( bRfLockIsDetectedL    == cTrue)
   1404                  && ( mAllDoorsAreClosed() == cTrue)  )
   \   0004   ..             CALLT     [__T_TOSReadSignal]
   \   0005   51             DEC       A
   \   0006   BD0C           BNZ       ??LAPFliProtectionTask_Static_69
   \   0008   8C..09         BT        S:DATDinInputBuffers+8.0, ??LAPFliProtectionTask_Static_69
   \   000B   BC..06         BT        S:DATDinInputBuffers+6.3, ??LAPFliProtectionTask_Static_69
   1405              {
   1406                  mSet(LockConfirmationIsRequested);
   \   000E   A101           MOV       A,#1
   \   0010   16....         MOVW      HL,#FLAControlStatus+5
   \   0013   97             MOV       [HL],A
   1407              }
   1408              else
   1409              {
   1410                  // Do nothing
   1411              }
   1412          
   1413              // -------------------------------------------------------------------------
   1414              // UNLOCK ALL SIGNAL
   1415              // -------------------------------------------------------------------------
   1416              bRfUnlockIsDetectedL = TOSReadSignal(cTOSSignalLAPFliEventRfUnlockAll);
   1417              if (   ( bRfUnlockIsDetectedL  == cTrue)
   1418                  && ( mAllDoorsAreClosed() == cTrue)  )
   \                     ??LAPFliProtectionTask_Static_69:
   \   0014   102400         MOVW      AX,#36
   \   0017   ..             CALLT     [__T_TOSReadSignal]
   \   0018   51             DEC       A
   \   0019   BD0C           BNZ       ??LAPFliProtectionTask_Static_70
   \   001B   8C..09         BT        S:DATDinInputBuffers+8.0, ??LAPFliProtectionTask_Static_70
   \   001E   BC..06         BT        S:DATDinInputBuffers+6.3, ??LAPFliProtectionTask_Static_70
   1419              {
   1420                  mSet(UnlockConfirmationIsRequested);
   \   0021   A101           MOV       A,#1
   \   0023   16....         MOVW      HL,#FLAControlStatus+6
   \   0026   97             MOV       [HL],A
   1421              }
   1422              else
   1423              {
   1424                  // Do nothing
   1425              }
   1426                  
   1427              // ----------------------------------
   1428              // TURN INDICATOR MANAGEMENT
   1429              // ----------------------------------
   1430              if ( mDATRead(U1Bit, PWR_IGN, Default) == cTrue )
   \                     ??LAPFliProtectionTask_Static_70:
   \   0027   3103..67       BF        S:DATDinInputBuffers+6.0, ??LAPFliProtectionTask_Static_71
   1431              {
   1432                  if (   ( mDATRead(U1Bit, L_FLASHER_SW, Default) == cTrue ) 
   1433                      && ( mDATRead(U1Bit, R_FLASHER_SW, Default) == cTrue )   )
   \   002B   F0..           MOV       A,S:DATDinInputBuffers+3
   \   002D   5D0C           AND       A,#12
   \   002F   4D0C           CMP       A,#12
   \   0031   BD36           BNZ       ??LAPFliProtectionTask_Static_72
   1434                  {
   1435                      if ( bBothIndicatorsRequested == cFalse )
   \   0033   8E....         MOV       A,bBothIndicatorsRequested
   \   0036   4D00           CMP       A,#0
   \   0038   BD63           BNZ       ??LAPFliProtectionTask_Static_73
   1436                      {
   1437                          if ( mRead(TurnLeftIsRequested) == cTrue )
   \   003A   8E....         MOV       A,FLAControlStatus
   \   003D   51             DEC       A
   \   003E   BD17           BNZ       ??LAPFliProtectionTask_Static_74
   1438                          {
   1439                              // Right indicator turned while left flasher was on
   1440                              mSet  ( TurnRightIsRequested );
   \   0040   A101           MOV       A,#1
   \   0042   9E....         MOV       FLAControlStatus+1,A
   1441                              mClear( TurnLeftIsRequested );
   \   0045   A100           MOV       A,#0
   \   0047   9E....         MOV       FLAControlStatus,A
   1442                              bBothIndicatorsRequested = cTrue;
   \                     ??LAPFliInputManagement_Static_0:
   \   004A   A101           MOV       A,#1
   \                     ??LAPFliInputManagement_Static_1:
   \   004C   9E....         MOV       bBothIndicatorsRequested,A
   1443                              ClearRFEvents();
   \   004F   16....         MOVW      HL,#LWRD(ClearRFEvents)
   \   0052   A4..           MOV       E,#BYTE3(ClearRFEvents)
   \   0054   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   0055   FA46           BR        ??LAPFliProtectionTask_Static_73
   1444                          }
   1445                          else if ( mRead(TurnRightIsRequested) == cTrue )
   \                     ??LAPFliProtectionTask_Static_74:
   \   0057   8E....         MOV       A,FLAControlStatus+1
   \   005A   51             DEC       A
   \   005B   BD40           BNZ       ??LAPFliProtectionTask_Static_73
   1446                          {
   1447                              // Left indicator turned while right flasher was on
   1448                              mSet  ( TurnLeftIsRequested );
   \   005D   A101           MOV       A,#1
   \   005F   9E....         MOV       FLAControlStatus,A
   1449                              mClear( TurnRightIsRequested );
   \   0062   A100           MOV       A,#0
   \   0064   9E....         MOV       FLAControlStatus+1,A
   1450                              bBothIndicatorsRequested = cTrue;
   \   0067   FAE1           BR        ??LAPFliInputManagement_Static_0
   1451                              ClearRFEvents();
   1452                          }
   1453                          else
   1454                          {
   1455                              // Do nothing
   1456                          }
   1457                      }
   1458                      else
   1459                      {
   1460                          // Do nothing
   1461                      }
   1462                  }
   1463                  else if ( mDATRead(U1Bit, L_FLASHER_SW, Default) == cTrue )
   \                     ??LAPFliProtectionTask_Static_72:
   \   0069   3133..15       BF        S:DATDinInputBuffers+3.3, ??LAPFliProtectionTask_Static_75
   1464                  {
   1465                      mSet  ( TurnLeftIsRequested );
   \   006D   A101           MOV       A,#1
   \   006F   9E....         MOV       FLAControlStatus,A
   1466                      mClear( TurnRightIsRequested );
   \   0072   A100           MOV       A,#0
   \   0074   9E....         MOV       FLAControlStatus+1,A
   1467                      bBothIndicatorsRequested = cFalse;
   \   0077   9E....         MOV       bBothIndicatorsRequested,A
   1468                      ClearRFEvents();
   \   007A   16....         MOVW      HL,#LWRD(ClearRFEvents)
   \   007D   A4..           MOV       E,#BYTE3(ClearRFEvents)
   \   007F   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   0080   FA1B           BR        ??LAPFliProtectionTask_Static_73
   1469                  }
   1470                  else if ( mDATRead(U1Bit, R_FLASHER_SW, Default) == cTrue )
   \                     ??LAPFliProtectionTask_Static_75:
   \   0082   3123..0C       BF        S:DATDinInputBuffers+3.2, ??LAPFliProtectionTask_Static_71
   1471                  {
   1472                      mSet  ( TurnRightIsRequested );
   \   0086   A101           MOV       A,#1
   \   0088   9E....         MOV       FLAControlStatus+1,A
   1473                      mClear( TurnLeftIsRequested );
   \   008B   A100           MOV       A,#0
   \   008D   9E....         MOV       FLAControlStatus,A
   1474                      bBothIndicatorsRequested = cFalse;
   \   0090   FABA           BR        ??LAPFliInputManagement_Static_1
   1475                      ClearRFEvents();
   1476                  }
   1477                  else
   1478                  {
   1479                      mClear( TurnLeftIsRequested );
   \                     ??LAPFliProtectionTask_Static_71:
   \   0092   A100           MOV       A,#0
   \   0094   9E....         MOV       FLAControlStatus,A
   1480                      mClear( TurnRightIsRequested );
   \   0097   9E....         MOV       FLAControlStatus+1,A
   1481                      bBothIndicatorsRequested = cFalse;
   \   009A   9E....         MOV       bBothIndicatorsRequested,A
   1482                  }
   1483              }
   1484              else
   1485              {
   1486                  mClear( TurnLeftIsRequested );
   1487                  mClear( TurnRightIsRequested );
   1488                  bBothIndicatorsRequested = cFalse;
   1489              }
   1490           
   1491              // -------------------------------------------------------------------------
   1492              // CRASH HAZARD SIGNAL
   1493              // -------------------------------------------------------------------------
   1494              if ( mRead( CrashHazardIsRequested ) == cFalse )
   \                     ??LAPFliProtectionTask_Static_73:
   \   009D   8E....         MOV       A,FLAControlStatus+4
   \   00A0   4D00           CMP       A,#0
   \   00A2   BD21           BNZ       ??LAPFliProtectionTask_Static_76
   1495              {
   1496                  bCrashUnlockHasFinishedL =
   1497                      TOSReadSignal(cTOSSignalLAPFliCrashUnlockFinished);
   1498                  bCrashHazardWarningIsEnabledL =
   1499                      mDATRead(U1Bit, EEP_DETCHOC, Default);
   1500          
   1501                  if (   ( bCrashUnlockHasFinishedL      == cTrue) 
   1502                      && ( bCrashHazardWarningIsEnabledL == cTrue)  )
   \   00A4   102200         MOVW      AX,#34
   \   00A7   ..             CALLT     [__T_TOSReadSignal]
   \   00A8   51             DEC       A
   \   00A9   BD57           BNZ       ??LAPFliProtectionTask_Static_77
   \   00AB   16....         MOVW      HL,#DATDbkMirrors+24
   \   00AE   31E751         BF        [HL].6, ??LAPFliProtectionTask_Static_77
   1503                  {
   1504                      mSet( CrashHazardIsRequested );
   \   00B1   A101           MOV       A,#1
   \   00B3   16....         MOVW      HL,#FLAControlStatus+4
   \   00B6   97             MOV       [HL],A
   1505                      TOSStartTempo( &TimerCrashHazardDelay );
   \   00B7   10....         MOVW      AX,#TimerCrashHazardDelay
   \   00BA   ..             CALLT     [__T_TOSStartTimer]
   1506          
   1507                      //QACJ 3200: amarinm1: Reading is done just to clear the signal.
   1508                      TOSReadSignal(cTOSSignalRising_PWR_IGN_LAP_FLI);
   \   00BB   100D00         MOVW      AX,#13
   \   00BE   ..             CALLT     [__T_TOSReadSignal]
   1509                      //QACJ 3200: amarinm1: Reading is done just to clear the signal.
   1510                      TOSReadSignal(cTOSSignalFalling_HAZARD_SW_LAP_FLI);
   \   00BF   100E00         MOVW      AX,#14
   \   00C2   ..             CALLT     [__T_TOSReadSignal]
   \   00C3   FA3D           BR        ??LAPFliProtectionTask_Static_77
   1511                  }
   1512                  else
   1513                  {
   1514                      // Do nothing
   1515                  }  
   1516              }
   1517              else // CrashHazardIsRequested == cTrue
   1518              {
   1519                  bPWR_IGN_RisingEdgeIsDetectedL = 
   1520                      TOSReadSignal(cTOSSignalRising_PWR_IGN_LAP_FLI);
   \                     ??LAPFliProtectionTask_Static_76:
   \   00C5   100D00         MOVW      AX,#13
   \   00C8   ..             CALLT     [__T_TOSReadSignal]
   \   00C9   73             MOV       B,A
   1521                  bHAZARD_SW_FallingEdgeIsDetectedL = 
   1522                      TOSReadSignal(cTOSSignalFalling_HAZARD_SW_LAP_FLI);
   \   00CA   100E00         MOVW      AX,#14
   \   00CD   ..             CALLT     [__T_TOSReadSignal]
   \   00CE   72             MOV       C,A
   1523                  bCrashHazardDurationHasElapsedL = 
   1524                      CrashHazardDurationTimerIsElapsed();
   \   00CF   16....         MOVW      HL,#LWRD(CrashHazardDurationTimerIsElapsed)
   \   00D2   A4..           MOV       E,#BYTE3(CrashHazardDurationTimerIsElapsed)
   \   00D4   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   00D5   70             MOV       X,A
   1525          
   1526                  if (   ( bPWR_IGN_RisingEdgeIsDetectedL    == cTrue)
   1527                      || ( bHAZARD_SW_FallingEdgeIsDetectedL == cTrue)
   1528                      || ( bCrashHazardDurationHasElapsedL   == cTrue)   )
   \   00D6   63             MOV       A,B
   \   00D7   51             DEC       A
   \   00D8   AD08           BZ        ??LAPFliProtectionTask_Static_78
   \   00DA   62             MOV       A,C
   \   00DB   51             DEC       A
   \   00DC   AD04           BZ        ??LAPFliProtectionTask_Static_78
   \   00DE   60             MOV       A,X
   \   00DF   51             DEC       A
   \   00E0   BD20           BNZ       ??LAPFliProtectionTask_Static_77
   1529                  {
   1530                      mClear( CrashHazardIsRequested );
   \                     ??LAPFliProtectionTask_Static_78:
   \   00E2   A100           MOV       A,#0
   \   00E4   16....         MOVW      HL,#FLAControlStatus+4
   \   00E7   97             MOV       [HL],A
   1531                      mDATWrite(U1Bit, EEP_CrashHazardIsRequested, cFalse, Immediate);
   \   00E8   16....         MOVW      HL,#DATDbkMirrors+24
   \   00EB   31A70B         BF        [HL].2, ??LAPFliProtectionTask_Static_79
   \   00EE   87             MOV       A,[HL]
   \   00EF   5DFB           AND       A,#251
   \   00F1   9E....         MOV       DATDbkMirrors+24,A
   \   00F4   A101           MOV       A,#1
   \   00F6   9A....         CALL      DATDbkStartUpdate
   1532                      TOSStopTimer( &TimerCrashHazardDurationStep );
   \                     ??LAPFliProtectionTask_Static_79:
   \   00F9   10....         MOVW      AX,#TimerCrashHazardDurationStep
   \   00FC   ..             CALLT     [__T_TOSStopTimer]
   1533                      u8TimerStepCrashHazard = 0;
   \   00FD   A100           MOV       A,#0
   \   00FF   9E....         MOV       u8TimerStepCrashHazard,A
   1534                  }
   1535                  else
   1536                  {
   1537                      // Do nothing
   1538                  }
   1539              }
   1540          
   1541              // -------------------------------------------------------------------------
   1542              // HAZARD SIGNAL DETERMINATION
   1543              // -------------------------------------------------------------------------
   1544              if (( mDATRead(U1Bit, HAZARD_SW, Default) == cTrue ) ||
   1545                  ( mDATRead(U1Bit, HazardAlarmRequested, Default) == cTrue))
   \                     ??LAPFliProtectionTask_Static_77:
   \   0102   CC..06         BT        S:DATDinInputBuffers+1.4, ??LAPFliProtectionTask_Static_80
   \   0105   8E....         MOV       A,DATCmnData+3
   \   0108   51             DEC       A
   \   0109   BD08           BNZ       ??LAPFliProtectionTask_Static_81
   1546              {
   1547                  mSet( DILampHazard );
   \                     ??LAPFliProtectionTask_Static_80:
   \   010B   A101           MOV       A,#1
   \   010D   16....         MOVW      HL,#FLAControlStatus+3
   \   0110   97             MOV       [HL],A
   \   0111   FA12           BR        ??LAPFliProtectionTask_Static_82
   1548              }
   1549              else
   1550              {
   1551                  if ( mRead( DILampHazard ) == cTrue )
   \                     ??LAPFliProtectionTask_Static_81:
   \   0113   8E....         MOV       A,FLAControlStatus+3
   \   0116   51             DEC       A
   \   0117   BD0C           BNZ       ??LAPFliProtectionTask_Static_82
   1552                  {
   1553                      mClear( DILampHazard );
   \   0119   A100           MOV       A,#0
   \   011B   16....         MOVW      HL,#FLAControlStatus+3
   \   011E   97             MOV       [HL],A
   1554                      ClearRFEvents();
   \   011F   16....         MOVW      HL,#LWRD(ClearRFEvents)
   \   0122   A4..           MOV       E,#BYTE3(ClearRFEvents)
   \   0124   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1555                  }
   1556                  else
   1557                  {
   1558                      // Do nothing
   1559                  }
   1560              }
   1561          }
   \                     ??LAPFliProtectionTask_Static_82:
   \   0125   B2             POP       BC
   \   0126   AF             RET       
   \   0127                  REQUIRE ?CL78K_V4_6_L00
   1562          
   1563          
   1564          
   1565          //==============================================================================
   1566          // DESCRIPTION : 
   1567          //
   1568          // PARAMETERS (Type,Name,Min,Max) :   none
   1569          //
   1570          // RETURN VALUE :   none
   1571          //
   1572          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1573          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1574          void LAPFliLeftFlashingForTFC( void )
   \                     LAPFliLeftFlashingForTFC:
   1575          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1576              mSet(TurnLeftIsRequestedByTFC);
   \   0000   A101           MOV       A,#1
   \   0002   16....         MOVW      HL,#FLAControlStatus+12
   \   0005                  REQUIRE ?CL78K_V4_6_L00
   \   0005                  REQUIRE ?Subroutine0
   \   0005                  ; // Fall through to label ?Subroutine0
   1577              mDATWrite(U8Bit, FlasherLampsTestResult, cDATCmnFlasherLampsNotTested, Default);
   1578          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   0000   97             MOV       [HL],A
   \   0001   A100           MOV       A,#0
   \   0003   9E....         MOV       DATCmnData+2,A
   \   0006   AF             RET       
   \   0007                  REQUIRE ?CL78K_V4_6_L00
   1579          
   1580          
   1581          //==============================================================================
   1582          // DESCRIPTION : 
   1583          //
   1584          // PARAMETERS (Type,Name,Min,Max) :   none
   1585          //
   1586          // RETURN VALUE :   none
   1587          //
   1588          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1589          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1590          void LAPFliRightFlashingForTFC( void )
   \                     LAPFliRightFlashingForTFC:
   1591          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1592              mSet(TurnRightIsRequestedByTFC);
   \   0000   A101           MOV       A,#1
   \   0002   16....         MOVW      HL,#FLAControlStatus+13
   \   0005   9B....         BR        N:?Subroutine0
   \   0008                  REQUIRE ?CL78K_V4_6_L00
   1593              mDATWrite(U8Bit, FlasherLampsTestResult, cDATCmnFlasherLampsNotTested, Default);
   1594          }
   1595          
   1596          //==============================================================================
   1597          // DESCRIPTION : 
   1598          //
   1599          // PARAMETERS (Type,Name,Min,Max) :   none
   1600          //
   1601          // RETURN VALUE :   none
   1602          //
   1603          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1604          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1605          void LAPFliProtectionTask(void)
   \                     LAPFliProtectionTask:
   1606          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1607          #ifdef X90_PROJECT
   1608              LAPFliProtectionTask_Static();
   \   0001   16....         MOVW      HL,#LWRD(LAPFliProtectionTask_Static)
   \   0004   A4..           MOV       E,#BYTE3(LAPFliProtectionTask_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1609          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1610          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1611          static MEM_TYPE void LAPFliProtectionTask_Static(void)
   \                     LAPFliProtectionTask_Static:
   1612          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1613          #endif
   1614              // Manage timeout after output activation
   1615              // Left
   1616              if (mDATRead(U1Bit, DI_LEFT, Immediate) != cFalse)
   \   0001   16....         MOVW      HL,#DATDouOutputBuffer+3
   \   0004   31E70A         BF        [HL].6, ??LAPFliProtectionTask_Static_83
   1617              {
   1618                  if (u8ProtectionCounterLeft > 0)
   \   0007   8E....         MOV       A,u8ProtectionCounterLeft
   \   000A   4D00           CMP       A,#0
   \   000C   AD08           BZ        ??LAPFliProtectionTask_Static_84
   1619                  {
   1620                      u8ProtectionCounterLeft--;
   \   000E   51             DEC       A
   \   000F   FA02           BR        ??LAPFliProtectionTask_Static_85
   1621                  }
   1622              }
   1623              else
   1624              {
   1625                  u8ProtectionCounterLeft = cProtectionHeatCountInitial;
   \                     ??LAPFliProtectionTask_Static_83:
   \   0011   A114           MOV       A,#20
   \                     ??LAPFliProtectionTask_Static_85:
   \   0013   9E....         MOV       u8ProtectionCounterLeft,A
   1626              }
   1627              // Right
   1628              if (mDATRead(U1Bit, DI_RIGHT, Immediate) != cFalse)
   \                     ??LAPFliProtectionTask_Static_84:
   \   0016   31F70A         BF        [HL].7, ??LAPFliProtectionTask_Static_86
   1629              {
   1630                  if (u8ProtectionCounterRight > 0)
   \   0019   8E....         MOV       A,u8ProtectionCounterRight
   \   001C   4D00           CMP       A,#0
   \   001E   AD08           BZ        ??LAPFliProtectionTask_Static_87
   1631                  {
   1632                      u8ProtectionCounterRight--;
   \   0020   51             DEC       A
   \   0021   FA02           BR        ??LAPFliProtectionTask_Static_88
   1633                  }
   1634              }
   1635              else
   1636              {
   1637                  u8ProtectionCounterRight = cProtectionHeatCountInitial;
   \                     ??LAPFliProtectionTask_Static_86:
   \   0023   A114           MOV       A,#20
   \                     ??LAPFliProtectionTask_Static_88:
   \   0025   9E....         MOV       u8ProtectionCounterRight,A
   1638              }
   1639          
   1640              // Deprotection on rising edge of PWR_IGN
   1641              if(     (cFalse != mDATRead(U1Bit, PWR_IGN, Default))
   1642                  &&  (cFalse == bPWR_IGNOld)
   1643                )
   \                     ??LAPFliProtectionTask_Static_87:
   \   0028   3103..39       BF        S:DATDinInputBuffers+6.0, ??LAPFliProtectionTask_Static_89
   \   002C   8E....         MOV       A,bPWR_IGNOld
   \   002F   4D00           CMP       A,#0
   \   0031   BD32           BNZ       ??LAPFliProtectionTask_Static_89
   1644              {
   1645                  if(mDATRead(U16Bit, EEP_SCLimit, Default) > mDATRead(U16Bit, EEP_CDLeftInd, Default))
   \   0033   02....         MOVW      AX,DATDbkMirrors+8
   \   0036   30             XCH       A,X
   \   0037   18....         SUB       A,DATDbkMirrors+14
   \   003A   60             MOV       A,X
   \   003B   38....         SUBC      A,DATDbkMirrors+15
   \   003E   9D08           BNC       ??LAPFliProtectionTask_Static_90
   1646                  {
   1647                      mDATWrite(U1Bit, DI_LEFTProtection, 0, Default);
   \   0040   A100           MOV       A,#0
   \   0042   6B..           CLR1      S:DATPouHardMaskBuffer+3.6
   1648                      mDATWrite(U1Bit, DefClignL, 0, Default);
   \   0044   16....         MOVW      HL,#DATCmnData+15
   \   0047   97             MOV       [HL],A
   1649                  }
   1650                  if(mDATRead(U16Bit, EEP_SCLimit, Default) > mDATRead(U16Bit, EEP_CDRightInd, Default))
   \                     ??LAPFliProtectionTask_Static_90:
   \   0048   02....         MOVW      AX,DATDbkMirrors+10
   \   004B   30             XCH       A,X
   \   004C   18....         SUB       A,DATDbkMirrors+14
   \   004F   60             MOV       A,X
   \   0050   38....         SUBC      A,DATDbkMirrors+15
   \   0053   9D08           BNC       ??LAPFliProtectionTask_Static_91
   1651                  {
   1652                      mDATWrite(U1Bit, DI_RIGHTProtection, 0, Default);
   \   0055   A100           MOV       A,#0
   \   0057   7B..           CLR1      S:DATPouHardMaskBuffer+3.7
   1653                      mDATWrite(U1Bit, DefClignR, 0, Default);
   \   0059   16....         MOVW      HL,#DATCmnData+16
   \   005C   97             MOV       [HL],A
   1654                  }
   1655          
   1656                  bSCBattDetected = cFalse;
   \                     ??LAPFliProtectionTask_Static_91:
   \   005D   A100           MOV       A,#0
   \   005F   9E....         MOV       bSCBattDetected,A
   1657                  u8FaultCounter = 0;
   \   0062   9E....         MOV       u8FaultCounter,A
   1658              }
   1659          
   1660              // Deprotection on Hazards request
   1661              if(     (cHazard != DILampSignal.FlashingMode)
   1662                   && (cCrashHazard != DILampSignal.FlashingMode)
   1663                   && (cRFFeedback != DILampSignal.FlashingMode)
   1664                )
   \                     ??LAPFliProtectionTask_Static_89:
   \   0065   8E....         MOV       A,DILampSignal+6
   \   0068   4D03           CMP       A,#3
   \   006A   AD39           BZ        ??LAPFliProtectionTask_Static_92
   \   006C   4D04           CMP       A,#4
   \   006E   AD35           BZ        ??LAPFliProtectionTask_Static_92
   \   0070   4D05           CMP       A,#5
   \   0072   AD31           BZ        ??LAPFliProtectionTask_Static_92
   1665              {
   1666                  if(mDATRead(U16Bit, EEP_SCLimit, Default) <= mDATRead(U16Bit, EEP_CDLeftInd, Default))
   \   0074   02....         MOVW      AX,DATDbkMirrors+8
   \   0077   30             XCH       A,X
   \   0078   18....         SUB       A,DATDbkMirrors+14
   \   007B   60             MOV       A,X
   \   007C   38....         SUBC      A,DATDbkMirrors+15
   \   007F   8D08           BC        ??LAPFliProtectionTask_Static_93
   1667                  {
   1668                      mDATWrite(U1Bit, DI_LEFTProtection, 1, Default);
   \   0081   101000         MOVW      AX,#16
   \   0084   6A..           SET1      S:DATPouHardMaskBuffer+3.6
   \   0086   9A....         CALL      TOSActivateTask
   1669                  }
   1670                  if(mDATRead(U16Bit, EEP_SCLimit, Default) <= mDATRead(U16Bit, EEP_CDRightInd, Default))
   \                     ??LAPFliProtectionTask_Static_93:
   \   0089   02....         MOVW      AX,DATDbkMirrors+10
   \   008C   30             XCH       A,X
   \   008D   18....         SUB       A,DATDbkMirrors+14
   \   0090   60             MOV       A,X
   \   0091   38....         SUBC      A,DATDbkMirrors+15
   \   0094   8D08           BC        ??LAPFliProtectionTask_Static_94
   1671                  {
   1672                      mDATWrite(U1Bit, DI_RIGHTProtection, 1, Default);
   \   0096   101000         MOVW      AX,#16
   \   0099   7A..           SET1      S:DATPouHardMaskBuffer+3.7
   \   009B   9A....         CALL      TOSActivateTask
   1673                  }
   1674              }
   1675          
   1676              // SC VBAT detection management
   1677              if(     (cOff != DILampSignal.FlashingMode)
   1678                  &&  (0 ==  mDATRead(U1Bit, DI_LEFT, Immediate)) 
   1679                  &&  (0 ==  mDATRead(U1Bit, DI_RIGHT, Immediate))
   1680                )
   \                     ??LAPFliProtectionTask_Static_94:
   \   009E   8E....         MOV       A,DILampSignal+6
   \   00A1   4D00           CMP       A,#0
   \   00A3   AD5C           BZ        ??LAPFliProtectionTask_Static_95
   \                     ??LAPFliProtectionTask_Static_92:
   \   00A5   8E....         MOV       A,DATDouOutputBuffer+3
   \   00A8   5DC0           AND       A,#192
   \   00AA   BD55           BNZ       ??LAPFliProtectionTask_Static_95
   1681              {
   1682                  if(cFalse != mDATRead(U1Bit, DIAG_FLASHER_SCGnd, Default))
   \   00AC   02....         MOVW      AX,DATAnaBufferFromLDB+12
   \   00AF   EAD703         CMPW      AX,#983
   \   00B2   8D30           BC        ??LAPFliProtectionTask_Static_96
   1683                  {
   1684                      if(cFalse == bSCBattDetected)
   \   00B4   8E....         MOV       A,bSCBattDetected
   \   00B7   4D00           CMP       A,#0
   \   00B9   BD46           BNZ       ??LAPFliProtectionTask_Static_95
   1685                      {
   1686                          mDATWrite(U1Bit, DefClignL, 1, Default);
   \   00BB   A101           MOV       A,#1
   \   00BD   16....         MOVW      HL,#DATCmnData+15
   \   00C0   97             MOV       [HL],A
   1687                          mDATWrite(U1Bit, DefClignR, 1, Default);
   \   00C1   86             INCW      HL
   \   00C2   97             MOV       [HL],A
   1688                          mDATWrite(U1Bit, EEP_DefClignL, 1, Default);
   \   00C3   16....         MOVW      HL,#DATDbkMirrors+19
   \   00C6   31B607         BT        [HL].3, ??LAPFliProtectionTask_Static_97
   \   00C9   A100           MOV       A,#0
   \   00CB   71B2           SET1      [HL].3
   \   00CD   9A....         CALL      DATDbkStartUpdate
   1689                          mDATWrite(U1Bit, EEP_DefClignR, 1, Default);
   \                     ??LAPFliProtectionTask_Static_97:
   \   00D0   16....         MOVW      HL,#DATDbkMirrors+19
   \   00D3   31C607         BT        [HL].4, ??LAPFliProtectionTask_Static_98
   \   00D6   A100           MOV       A,#0
   \   00D8   71C2           SET1      [HL].4
   \   00DA   9A....         CALL      DATDbkStartUpdate
   1690          
   1691                          bSCBattDetected = cTrue;
   \                     ??LAPFliProtectionTask_Static_98:
   \   00DD   A101           MOV       A,#1
   \   00DF   9E....         MOV       bSCBattDetected,A
   \   00E2   FA1D           BR        ??LAPFliProtectionTask_Static_95
   1692                      }
   1693                  }
   1694                  else if(    (0 == mDATRead(U1Bit, DI_RIGHTProtection, Default))
   1695                           && (0 == mDATRead(U1Bit, DI_LEFTProtection, Default))
   1696                           && (cFalse == mFlasherOpenLoad())
   1697                         )
   \                     ??LAPFliProtectionTask_Static_96:
   \   00E4   FC..1A         BT        S:DATPouHardMaskBuffer+3.7, ??LAPFliProtectionTask_Static_95
   \   00E7   EC..17         BT        S:DATPouHardMaskBuffer+3.6, ??LAPFliProtectionTask_Static_95
   \   00EA   8E....         MOV       A,bDATPanFlasherSCBatOrOpenLoad
   \   00ED   4D00           CMP       A,#0
   \   00EF   BD10           BNZ       ??LAPFliProtectionTask_Static_95
   1698                  {
   1699                      u8FaultCounter = 0;
   \   00F1   A100           MOV       A,#0
   \   00F3   9E....         MOV       u8FaultCounter,A
   1700                      bSCBattDetected = cFalse;
   \   00F6   9E....         MOV       bSCBattDetected,A
   1701                      mDATWrite(U1Bit, DefClignR, 0, Default);
   \   00F9   16....         MOVW      HL,#DATCmnData+16
   \   00FC   97             MOV       [HL],A
   1702                      mDATWrite(U1Bit, DefClignL, 0, Default);
   \   00FD   16....         MOVW      HL,#DATCmnData+15
   \   0100   97             MOV       [HL],A
   1703                  }
   1704                  else
   1705                  {
   1706                      // Nothing to do
   1707                  }
   1708              }
   1709          
   1710              // SC GND detection on LEFT Flahser
   1711              if(     (1 ==  mDATRead(U1Bit, DI_LEFT, Immediate)) 
   1712                  &&  (0 ==  mDATRead(U1Bit, DI_RIGHT, Immediate))  // Hazard mode excluded
   1713                  &&  (0 ==  mDATRead(U1Bit, DI_LEFTProtection, Default))
   1714                )
   \                     ??LAPFliProtectionTask_Static_95:
   \   0101   8E....         MOV       A,DATDouOutputBuffer+3
   \   0104   5DC0           AND       A,#192
   \   0106   4D40           CMP       A,#64
   \   0108   BD67           BNZ       ??LAPFliProtectionTask_Static_99
   \   010A   3163..03       BF        S:DATPouHardMaskBuffer+3.6, $+7
   \   010E   9B....         BR        N:??LAPFliProtectionTask_Static_100
   1715              {
   1716                  // 200ms inrush current timeout has elapsed or Open load detection is allowed
   1717                  if (    (0 == u8ProtectionCounterLeft)
   1718                       || (cFalse != bFlasherSCBatOrOpenLoadReadAllowed)
   1719                     ) 
   \   0111   8E....         MOV       A,u8ProtectionCounterLeft
   \   0114   4D00           CMP       A,#0
   \   0116   AD0A           BZ        ??LAPFliProtectionTask_Static_101
   \   0118   8E....         MOV       A,bFlasherSCBatOrOpenLoadReadAllowed
   \   011B   4D00           CMP       A,#0
   \   011D   BD03           BNZ       $+5
   \   011F   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1720                  {
   1721                      if(     (   (cFalse != mDATRead(U1Bit, DIAG_FLASHER_SCGnd, Default))
   1722                               && (cFalse == bSCBattDetected)
   1723                              )
   1724                          ||  (   (cFalse != bFlasherSCBatOrOpenLoadReadAllowed)
   1725                               && (cFalse != mFlasherOpenLoad())
   1726                              )
   1727                        ) 
   \                     ??LAPFliProtectionTask_Static_101:
   \   0122   02....         MOVW      AX,DATAnaBufferFromLDB+12
   \   0125   EAD703         CMPW      AX,#983
   \   0128   8D07           BC        ??LAPFliProtectionTask_Static_103
   \   012A   8E....         MOV       A,bSCBattDetected
   \   012D   4D00           CMP       A,#0
   \   012F   AD0E           BZ        ??LAPFliProtectionTask_Static_104
   \                     ??LAPFliProtectionTask_Static_103:
   \   0131   8E....         MOV       A,bFlasherSCBatOrOpenLoadReadAllowed
   \   0134   4D00           CMP       A,#0
   \   0136   8E....         MOV       A,bDATPanFlasherSCBatOrOpenLoad
   \   0139   AD27           BZ        ??LAPFliProtectionTask_Static_105
   \   013B   4D00           CMP       A,#0
   \   013D   AD2A           BZ        ??LAPFliProtectionTask_Static_106
   1728                      {
   1729                          u8FaultCounter++;
   \                     ??LAPFliProtectionTask_Static_104:
   \   013F   8E....         MOV       A,u8FaultCounter
   \   0142   41             INC       A
   \   0143   9E....         MOV       u8FaultCounter,A
   1730                          if(     (u8FaultCounter >= cSCToGNDCountThreshold)
   1731                               || (cFalse != mFlasherOpenLoad())
   1732                            )
   \   0146   4D0A           CMP       A,#10
   \   0148   9D0A           BNC       ??LAPFliProtectionTask_Static_107
   \   014A   8E....         MOV       A,bDATPanFlasherSCBatOrOpenLoad
   \   014D   4D00           CMP       A,#0
   \   014F   BD03           BNZ       $+5
   \   0151   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1733                          {
   1734                              // Set LEFT flasher defect, perform open load detection check
   1735                              // Protect the flasher output only in case of SC GND
   1736                              SetFlasherDefect(cTrue, cFalse, cTrue);
   \                     ??LAPFliProtectionTask_Static_107:
   \   0154   A101           MOV       A,#1
   \   0156   72             MOV       C,A
   \   0157   A300           MOV       B,#0
   \                     ??LAPFliProtectionTask_Static_108:
   \   0159   16....         MOVW      HL,#LWRD(SetFlasherDefect)
   \   015C   A4..           MOV       E,#BYTE3(SetFlasherDefect)
   \   015E   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   015F   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1737                          }
   1738                      }
   1739                      else
   1740                      {
   1741                          if(cFalse == mFlasherOpenLoad())
   \                     ??LAPFliProtectionTask_Static_105:
   \   0162   4D00           CMP       A,#0
   \   0164   AD03           BZ        $+5
   \   0166   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1742                          {
   1743                              u8FaultCounter = 0;
   \                     ??LAPFliProtectionTask_Static_106:
   \   0169   A100           MOV       A,#0
   \   016B   9E....         MOV       u8FaultCounter,A
   1744                              mDATWrite(U1Bit, DefClignL, 0, Default);
   \   016E   9B....         BR        N:??LAPFliProtectionTask_Static_109
   1745                          }
   1746                      }
   1747                  }
   1748              }
   1749              // SC GND detection on RIGHT flasher. Do not enter here if
   1750              // LEFT flasher has been temporary stopped for troubleshooting
   1751              // in Hazard mode '(cFalse == bLeftFlasherStopped)'
   1752              else if(    (1 ==  mDATRead(U1Bit, DI_RIGHT, Immediate))
   1753                       && (0 ==  mDATRead(U1Bit, DI_LEFT, Immediate))  // Hazard mode excluded
   1754                       && (0 ==  mDATRead(U1Bit, DI_RIGHTProtection, Default))
   1755                       && (cFalse == bLeftFlasherStopped)
   1756                     )
   \                     ??LAPFliProtectionTask_Static_99:
   \   0171   8E....         MOV       A,DATDouOutputBuffer+3
   \   0174   5DC0           AND       A,#192
   \   0176   4D80           CMP       A,#128
   \   0178   BD67           BNZ       ??LAPFliProtectionTask_Static_110
   \   017A   FC..74         BT        S:DATPouHardMaskBuffer+3.7, ??LAPFliProtectionTask_Static_100
   \   017D   8E....         MOV       A,bLeftFlasherStopped
   \   0180   4D00           CMP       A,#0
   \   0182   BD6D           BNZ       ??LAPFliProtectionTask_Static_100
   1757              {
   1758                  // 200ms inrush current timeout has elapsed or Open load detection is allowed
   1759                  if (    (0 == u8ProtectionCounterRight)
   1760                       || (cFalse != bFlasherSCBatOrOpenLoadReadAllowed)
   1761                     )
   \   0184   8E....         MOV       A,u8ProtectionCounterRight
   \   0187   4D00           CMP       A,#0
   \   0189   AD0A           BZ        ??LAPFliProtectionTask_Static_111
   \   018B   8E....         MOV       A,bFlasherSCBatOrOpenLoadReadAllowed
   \   018E   4D00           CMP       A,#0
   \   0190   BD03           BNZ       $+5
   \   0192   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1762                  {
   1763                      if(     (   (cFalse != mDATRead(U1Bit, DIAG_FLASHER_SCGnd, Default))
   1764                               && (cFalse == bSCBattDetected)
   1765                              )
   1766                          ||  (   (cFalse != bFlasherSCBatOrOpenLoadReadAllowed)
   1767                               && (cFalse != mFlasherOpenLoad())
   1768                              )
   1769                        ) 
   \                     ??LAPFliProtectionTask_Static_111:
   \   0195   02....         MOVW      AX,DATAnaBufferFromLDB+12
   \   0198   EAD703         CMPW      AX,#983
   \   019B   8D07           BC        ??LAPFliProtectionTask_Static_112
   \   019D   8E....         MOV       A,bSCBattDetected
   \   01A0   4D00           CMP       A,#0
   \   01A2   AD0E           BZ        ??LAPFliProtectionTask_Static_113
   \                     ??LAPFliProtectionTask_Static_112:
   \   01A4   8E....         MOV       A,bFlasherSCBatOrOpenLoadReadAllowed
   \   01A7   4D00           CMP       A,#0
   \   01A9   8E....         MOV       A,bDATPanFlasherSCBatOrOpenLoad
   \   01AC   AD21           BZ        ??LAPFliProtectionTask_Static_114
   \   01AE   4D00           CMP       A,#0
   \   01B0   AD24           BZ        ??LAPFliProtectionTask_Static_115
   1770                      {
   1771                          u8FaultCounter++;
   \                     ??LAPFliProtectionTask_Static_113:
   \   01B2   8E....         MOV       A,u8FaultCounter
   \   01B5   41             INC       A
   \   01B6   9E....         MOV       u8FaultCounter,A
   1772                          if(     (u8FaultCounter >= cSCToGNDCountThreshold)
   1773                               || (cFalse != mFlasherOpenLoad())
   1774                            )
   \   01B9   4D0A           CMP       A,#10
   \   01BB   9D0A           BNC       ??LAPFliProtectionTask_Static_116
   \   01BD   8E....         MOV       A,bDATPanFlasherSCBatOrOpenLoad
   \   01C0   4D00           CMP       A,#0
   \   01C2   BD03           BNZ       $+5
   \   01C4   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1775                          {
   1776                              // Set RIGHT flasher defect, perform open load detection check.
   1777                              // Protect the flasher output only in case of SC GND
   1778                              SetFlasherDefect(cFalse, cTrue, cTrue);
   \                     ??LAPFliProtectionTask_Static_116:
   \   01C7   A100           MOV       A,#0
   \   01C9   A201           MOV       C,#1
   \   01CB   A301           MOV       B,#1
   \   01CD   FA8A           BR        ??LAPFliProtectionTask_Static_108
   1779                          }
   1780                      }
   1781                      else
   1782                      {
   1783                          if(cFalse == mFlasherOpenLoad())
   \                     ??LAPFliProtectionTask_Static_114:
   \   01CF   4D00           CMP       A,#0
   \   01D1   AD03           BZ        $+5
   \   01D3   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1784                          {
   1785                              u8FaultCounter = 0;
   \                     ??LAPFliProtectionTask_Static_115:
   \   01D6   A100           MOV       A,#0
   \   01D8   9E....         MOV       u8FaultCounter,A
   1786                              mDATWrite(U1Bit, DefClignR, 0, Default);
   \   01DB   16....         MOVW      HL,#DATCmnData+16
   \   01DE   9B....         BR        N:??LAPFliProtectionTask_Static_117
   1787                          }
   1788                      }
   1789                  }
   1790              }
   1791              // SC GND detection on HAZARD activated. Enter here if LEFT flasher 
   1792              // has been temporary stopped for troubleshooting in Hazard mode 
   1793              // '(cFalse != bLeftFlasherStopped)'
   1794              else if(    (   (1 == mDATRead(U1Bit, DI_RIGHT, Immediate))
   1795                           && (1 == mDATRead(U1Bit, DI_LEFT, Immediate))  // Hazard mode
   1796                           && (   (0 == mDATRead(U1Bit, DI_RIGHTProtection, Default))
   1797                               && (0 == mDATRead(U1Bit, DI_LEFTProtection, Default))
   1798                              )
   1799                          )
   1800                       || (cFalse != bLeftFlasherStopped)
   1801                     )
   \                     ??LAPFliProtectionTask_Static_110:
   \   01E1   8E....         MOV       A,DATDouOutputBuffer+3
   \   01E4   5DC0           AND       A,#192
   \   01E6   4DC0           CMP       A,#192
   \   01E8   BD07           BNZ       ??LAPFliProtectionTask_Static_100
   \   01EA   FC..04         BT        S:DATPouHardMaskBuffer+3.7, ??LAPFliProtectionTask_Static_100
   \   01ED   3163..0A       BF        S:DATPouHardMaskBuffer+3.6, ??LAPFliProtectionTask_Static_118
   \                     ??LAPFliProtectionTask_Static_100:
   \   01F1   8E....         MOV       A,bLeftFlasherStopped
   \   01F4   4D00           CMP       A,#0
   \   01F6   BD03           BNZ       $+5
   \   01F8   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1802              {
   1803                  // 200ms inrush current timeout has elapsed or Open load detection is allowed
   1804                  if (    (0 == u8ProtectionCounterRight) // u8ProtectionCounterLeft is expected to have the same value
   1805                       || (cFalse != bFlasherSCBatOrOpenLoadReadAllowed)
   1806                     )
   \                     ??LAPFliProtectionTask_Static_118:
   \   01FB   8E....         MOV       A,u8ProtectionCounterRight
   \   01FE   4D00           CMP       A,#0
   \   0200   AD0A           BZ        ??LAPFliProtectionTask_Static_119
   \   0202   8E....         MOV       A,bFlasherSCBatOrOpenLoadReadAllowed
   \   0205   4D00           CMP       A,#0
   \   0207   BD03           BNZ       $+5
   \   0209   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1807                  {
   1808                      if(     (   (cFalse != mDATRead(U1Bit, DIAG_FLASHER_SCGnd, Default))
   1809                               && (cFalse == bSCBattDetected)
   1810                              )
   1811                          &&  (cFalse == bFlasherSCBatOrOpenLoadReadAllowed)
   1812                        ) 
   \                     ??LAPFliProtectionTask_Static_119:
   \   020C   02....         MOVW      AX,DATAnaBufferFromLDB+12
   \   020F   EAD703         CMPW      AX,#983
   \   0212   8D44           BC        ??LAPFliProtectionTask_Static_120
   \   0214   8E....         MOV       A,bSCBattDetected
   \   0217   4D00           CMP       A,#0
   \   0219   BD3D           BNZ       ??LAPFliProtectionTask_Static_120
   \   021B   8E....         MOV       A,bFlasherSCBatOrOpenLoadReadAllowed
   \   021E   4D00           CMP       A,#0
   \   0220   BD36           BNZ       ??LAPFliProtectionTask_Static_120
   1813                      {
   1814                          u8FaultCounter++;
   \   0222   8E....         MOV       A,u8FaultCounter
   \   0225   41             INC       A
   \   0226   9E....         MOV       u8FaultCounter,A
   1815                          if(u8FaultCounter >= cSCToGNDCountThreshold)
   \   0229   4D0A           CMP       A,#10
   \   022B   9D03           BNC       $+5
   \   022D   9B....         BR        N:??LAPFliProtectionTask_Static_102
   1816                          {
   1817                              if(cFalse == bLeftFlasherStopped)
   \   0230   8E....         MOV       A,bLeftFlasherStopped
   \   0233   4D00           CMP       A,#0
   \   0235   BD0F           BNZ       ??LAPFliProtectionTask_Static_121
   1818                              {
   1819                                  // Temporary protect Left flasher to detect the defective side
   1820                                  mDATWrite(U1Bit, DI_LEFTProtection, 1, Default);
   \   0237   101000         MOVW      AX,#16
   \   023A   6A..           SET1      S:DATPouHardMaskBuffer+3.6
   \   023C   9A....         CALL      TOSActivateTask
   1821                                  bLeftFlasherStopped = cTrue;
   \   023F   A101           MOV       A,#1
   \                     ??LAPFliProtectionTask_Static_122:
   \   0241   9E....         MOV       bLeftFlasherStopped,A
   \   0244   FA7A           BR        ??LAPFliProtectionTask_Static_102
   1822                              }
   1823                              // LEFT flasher has been temporary stopped and defect still exists
   1824                              // => set defect on RIGHT flasher
   1825                              else
   1826                              {
   1827                                  // Set RIGHT flasher defect, perform open load detection check.
   1828                                  // Protect the flasher output only in case of SC GND
   1829                                  SetFlasherDefect(cFalse, cTrue, cTrue);
   \                     ??LAPFliProtectionTask_Static_121:
   \   0246   A100           MOV       A,#0
   \   0248   A201           MOV       C,#1
   \   024A   A301           MOV       B,#1
   \   024C   16....         MOVW      HL,#LWRD(SetFlasherDefect)
   \   024F   A4..           MOV       E,#BYTE3(SetFlasherDefect)
   \   0251   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1830          
   1831                                  // Remove the temporary protectection on Left flasher
   1832                                  mDATWrite(U1Bit, DI_LEFTProtection, 0, Default);
   \   0252   A100           MOV       A,#0
   \   0254   6B..           CLR1      S:DATPouHardMaskBuffer+3.6
   1833                                  bLeftFlasherStopped = cFalse;
   \   0256   FAE9           BR        ??LAPFliProtectionTask_Static_122
   1834                              }
   1835                          }
   1836                      }
   1837                      // Set defect on both sides in case of Open Load
   1838                      else if(    (cFalse != mFlasherOpenLoad())
   1839                               && (cFalse != bFlasherSCBatOrOpenLoadReadAllowed)
   1840                             )
   \                     ??LAPFliProtectionTask_Static_120:
   \   0258   8E....         MOV       A,bDATPanFlasherSCBatOrOpenLoad
   \   025B   4D00           CMP       A,#0
   \   025D   AD2F           BZ        ??LAPFliProtectionTask_Static_123
   \   025F   8E....         MOV       A,bFlasherSCBatOrOpenLoadReadAllowed
   \   0262   4D00           CMP       A,#0
   \   0264   AD28           BZ        ??LAPFliProtectionTask_Static_123
   1841                      {
   1842                          mDATWrite(U1Bit, DefClignL, 1, Default);
   \   0266   A101           MOV       A,#1
   \   0268   16....         MOVW      HL,#DATCmnData+15
   \   026B   97             MOV       [HL],A
   1843                          mDATWrite(U1Bit, EEP_DefClignL, 1, Default);
   \   026C   16....         MOVW      HL,#DATDbkMirrors+19
   \   026F   31B607         BT        [HL].3, ??LAPFliProtectionTask_Static_124
   \   0272   A100           MOV       A,#0
   \   0274   71B2           SET1      [HL].3
   \   0276   9A....         CALL      DATDbkStartUpdate
   1844                          mDATWrite(U1Bit, DefClignR, 1, Default);
   \                     ??LAPFliProtectionTask_Static_124:
   \   0279   A101           MOV       A,#1
   \   027B   16....         MOVW      HL,#DATCmnData+16
   \   027E   97             MOV       [HL],A
   1845                          mDATWrite(U1Bit, EEP_DefClignR, 1, Default);
   \   027F   16....         MOVW      HL,#DATDbkMirrors+19
   \   0282   31C63B         BT        [HL].4, ??LAPFliProtectionTask_Static_102
   \   0285   A100           MOV       A,#0
   \   0287   71C2           SET1      [HL].4
   \   0289   9A....         CALL      DATDbkStartUpdate
   \   028C   FA32           BR        ??LAPFliProtectionTask_Static_102
   1846                      }
   1847                      else
   1848                      {
   1849                          // LEFT flasher has been temporary stopped and defect has disappeared
   1850                          // => set defect on LEFT flasher
   1851                          if(cFalse != bLeftFlasherStopped)
   \                     ??LAPFliProtectionTask_Static_123:
   \   028E   8E....         MOV       A,bLeftFlasherStopped
   \   0291   4D00           CMP       A,#0
   \   0293   AD10           BZ        ??LAPFliProtectionTask_Static_125
   1852                          {
   1853                              // Set LEFT flasher defect, do not perform open load detection check
   1854                              // => Protect the flasher output
   1855                              SetFlasherDefect(cTrue, cFalse, cFalse);
   \   0295   A101           MOV       A,#1
   \   0297   A200           MOV       C,#0
   \   0299   A300           MOV       B,#0
   \   029B   16....         MOVW      HL,#LWRD(SetFlasherDefect)
   \   029E   A4..           MOV       E,#BYTE3(SetFlasherDefect)
   \   02A0   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1856          
   1857                              bLeftFlasherStopped = cFalse;
   \   02A1   A100           MOV       A,#0
   \   02A3   FA9C           BR        ??LAPFliProtectionTask_Static_122
   1858                          }
   1859                          else if(    (cFalse == bSCBattDetected)
   1860                                   && (cFalse == mFlasherOpenLoad())
   1861                                 )
   \                     ??LAPFliProtectionTask_Static_125:
   \   02A5   8E....         MOV       A,bSCBattDetected
   \   02A8   4D00           CMP       A,#0
   \   02AA   BD14           BNZ       ??LAPFliProtectionTask_Static_102
   \   02AC   8E....         MOV       A,bDATPanFlasherSCBatOrOpenLoad
   \   02AF   4D00           CMP       A,#0
   \   02B1   BD0D           BNZ       ??LAPFliProtectionTask_Static_102
   1862                          {
   1863                              u8FaultCounter = 0;
   \   02B3   A100           MOV       A,#0
   \   02B5   9E....         MOV       u8FaultCounter,A
   1864                              mDATWrite(U1Bit, DefClignR, 0, Default);
   \   02B8   16....         MOVW      HL,#DATCmnData+16
   \   02BB   97             MOV       [HL],A
   1865                              mDATWrite(U1Bit, DefClignL, 0, Default);
   \                     ??LAPFliProtectionTask_Static_109:
   \   02BC   16....         MOVW      HL,#DATCmnData+15
   \                     ??LAPFliProtectionTask_Static_117:
   \   02BF   97             MOV       [HL],A
   1866                          }
   1867                          else
   1868                          {
   1869                              // Nothing to do
   1870                          }
   1871                      }
   1872          
   1873                  }
   1874              }
   1875              else
   1876              {
   1877                  // do nothing
   1878              }
   1879          
   1880              bFlasherSCBatOrOpenLoadReadAllowed = cFalse;
   \                     ??LAPFliProtectionTask_Static_102:
   \   02C0   A100           MOV       A,#0
   \   02C2   9E....         MOV       bFlasherSCBatOrOpenLoadReadAllowed,A
   1881              bPWR_IGNOld = mDATRead(U1Bit, PWR_IGN, Default);
   \   02C5   F0..           MOV       A,S:DATDinInputBuffers+6
   \   02C7   5D01           AND       A,#1
   \   02C9   9E....         MOV       bPWR_IGNOld,A
   1882          }
   \   02CC   B2             POP       BC
   \   02CD   AF             RET       
   \   02CE                  REQUIRE ?CL78K_V4_6_L00

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSReadSignal:
   \   0000   ....           DW       TOSReadSignal

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSIsTimerElapsed:
   \   0000   ....           DW       TOSIsTimerElapsed

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSStartTimer:
   \   0000   ....           DW       TOSStartTimer

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_CALL_L07:
   \   0000   ....           DW       ?FAR_CALL_L07

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSSeqActivateGraph:
   \   0000   ....           DW       TOSSeqActivateGraph

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSSeqDeactivateGraph:
   \   0000   ....           DW       TOSSeqDeactivateGraph

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSWriteSignal:
   \   0000   ....           DW       TOSWriteSignal

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_FAST_CALL_L07:
   \   0000   ....           DW       ?FAR_FAST_CALL_L07

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSStopTimer:
   \   0000   ....           DW       TOSStopTimer

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FUNC_LEAVE_L06:
   \   0000   ....           DW       ?FUNC_LEAVE_L06
   1883          
   1884          // [EXPORTED_FUNCTIONS_END]
   1885          

   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     LAPFliLampsState                 48
     LAPFliInput                       6
     LAPFliProtectionManagement        6
     DILampSignal                      8
     FLAControlStatus                 14
     TimerDILamps                      2
     TimerCrashHazardDelay             2
     TimerCrashHazardDurationStep      2
     TimerCurrentActiveTimeOut         2
     TimerCurrentInactiveTimeOut       2
     CalculatedTPS_RETARD_DETRESSE     2
     CalculatedTPS_CLI                 2
     CalculatedTPS_CLIDEGRAD           2
     u8TimerStepCrashHazard            1
     u8FlashCount                      1
     bBothIndicatorsRequested          1
     bPWR_IGNOld                       1
     bLeftFlasherStopped               1
     bFlasherSCBatOrOpenLoadReadAllowed
                                       1
     bSCBattDetected                   1
     u8ProtectionCounterLeft           1
     u8ProtectionCounterRight          1
     u8FaultCounter                    1
     u8TPS_RETARD_DETRESSE             1
     u8TPS_CLI                         1
     u8TPS_CLIDEGRAD                   1
     SetFlasherSignal                113
     ClearRFEvents                    16
     CrashHazardDurationTimerIsElapsed
                                      48
     SetFlasherDefect                139
     LAPFliInitialize                  9
     LAPFliInitialize_Static          59
     LAPFliEnterActiveState           43
     LAPFliLeaveActiveState           13
     LAPFliIsAnybodyMaintainActiveState
                                      23
     LAPFliLampsRequestHasChanged      9
     LAPFliLampsRequestHasChanged_Static
                                     894
     LAPFliLampsOff                    9
     LAPFliLampsOff_Static            99
     LAPFliLampsOffTimeIsElapsed      11
     LAPFliLampsOn                     9
     LAPFliLampsOn_Static            155
     LAPFliLampsOnTimeIsElapsed       20
     LAPFliMeasureCurrent              9
     LAPFliMeasureCurrent_Static      33
     LAPFliMeasureCurrentOk           52
     LAPFliInputManagement             9
     LAPFliInputManagement_Static    295
     LAPFliLeftFlashingForTFC          5
     ?Subroutine0                      7
     LAPFliRightFlashingForTFC         8
     LAPFliProtectionTask              9
     LAPFliProtectionTask_Static     718
     __T_TOSReadSignal                 2
     __T_TOSIsTimerElapsed             2
     __T_TOSStartTimer                 2
     __T_?FAR_CALL_L07                 2
     __T_TOSSeqActivateGraph           2
     __T_TOSSeqDeactivateGraph         2
     __T_TOSWriteSignal                2
     __T_?FAR_FAST_CALL_L07            2
     __T_TOSStopTimer                  2
     __T_?FUNC_LEAVE_L06               2

 
 2 569 bytes in segment BCODE
    20 bytes in segment CLTVEC
   245 bytes in segment CODE
    60 bytes in segment CONST
    51 bytes in segment NEAR_Z
 
 2 814 bytes of CODE  memory (+ 20 bytes shared)
    60 bytes of CONST memory
    51 bytes of DATA  memory

Errors: none
Warnings: none
