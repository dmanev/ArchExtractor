###############################################################################
#                                                                             #
# IAR C/C++ Compiler V4.61A/W32 for 78K0 and 78K0S      15/Feb/2011  13:29:11 #
# Copyright 1992-2008 IAR Systems AB.                                         #
#                                                                             #
#    Core         =  78k0                                                     #
#    Code model   =  Standard                                                 #
#                 =                                                           #
#    Source file  =  D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\DAT\D #
#                    AT_PWM.C                                                 #
#    Command line =  --code_model standard --core 78k0 -e                     #
#                    -DMEM_TYPE=__banked -DMEM_FAST=__saddr                   #
#                    -DCALLT_TYPE=__callt -DX90_PROJECT                       #
#                    --generate_callt_runtime_library_calls -r -Ohs           #
#                    "-IC:\Program Files\IAR Systems\Embedded Workbench       #
#                    5.0\78k\inc" "-IC:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.0\78k\inc\clib" -I. -I..\EXE\GEN\            #
#                    -I..\SOURCES\DAT -I..\SOURCES\LAP -I..\SOURCES\LDB_API   #
#                    -I..\SOURCES\LIB -I..\SOURCES\TOS -I.\LDB -DEMUL         #
#                    -DDEBUG -DUSE_LIBSTK -DDONT_KEEP_OLD_TYPE_COMPATIBILITY  #
#                    -l ..\EXE\TARGET_D\DAT_PWM.LST -o                        #
#                    ..\EXE\TARGET_D\DAT_PWM.R26                              #
#                    D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\DAT\D #
#                    AT_PWM.C                                                 #
#    List file    =  ..\EXE\TARGET_D\DAT_PWM.LST                              #
#    Object file  =  ..\EXE\TARGET_D\DAT_PWM.R26                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\DAT\DAT_PWM.C
      1          //******************************************************************************
      2          // Company:      Johnson Controls Inc.
      3          // -----------------------------------------------------------------------------
      4          // Copyright:    This software is JCI property.
      5          //               Duplication or disclosure without JCI written authorization
      6          //               is prohibited.
      7          // -----------------------------------------------------------------------------
      8          // Project:      X90_BCM
      9          // Language:     ANSI-C
     10          // -----------------------------------------------------------------------------
     11          // Component:    DAT_PWM
     12          // -----------------------------------------------------------------------------
     13          // $Date:   Oct 01 2009 11:52:36  $
     14          // $Archive:   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/DAT/DAT_PWM/DAT_PWM.C-arc  $
     15          // $Revision:   1.11  $
     16          // -----------------------------------------------------------------------------
     17          // $Log::   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/DAT/DAT_PWM/DAT_PWM.C-arc  $
     18          // 
     19          //    Rev 1.11   Oct 01 2009 11:52:36   amarinm1
     20          // Cm006370: Limit values for ILL PWM changed according to the new HSI.
     21          // 
     22          //    Rev 1.10   Sep 07 2009 14:37:12   amarinm1
     23          // Cm005205: Corrections of issues found during the code review.
     24          // 
     25          //    Rev 1.9   Aug 25 2009 13:44:06   amarinm1
     26          // Cm005205: Changes for compliance with QAC.
     27          // 
     28          //    Rev 1.8   Aug 18 2009 09:47:42   adzhelp
     29          // Cm005205: Corrections to respect padHSI-510 (the rule of 5%-95%)
     30          // 
     31          //    Rev 1.7   Jul 16 2009 09:15:52   adzhelp
     32          // Cm005205: Implementation of roomlamp dimming
     33          // 
     34          //    Rev 1.6   Apr 29 2009 12:07:16   adzhelp
     35          // Cm003209: Functions moved to banked memory area
     36          // 
     37          //    Rev 1.5   Apr 22 2009 17:15:06   akodzhh
     38          // Cm003128: PWM_ROOMLAMP output state reading for AFS.
     39          // 
     40          //    Rev 1.4   Mar 31 2009 11:02:00   adzhelp
     41          // Cm003517: Roomlamp control by diagnostics according to LAP_TFC implementation
     42          // 
     43          //    Rev 1.3   Mar 10 2009 17:40:42   amarinm1
     44          // Cm003209: Two lines were commented to avoid compilator warnings.
     45          // 
     46          //    Rev 1.2   Mar 10 2009 17:30:12   amarinm1
     47          // Cm003209: Problems in the previous revision were fixed.
     48          // 
     49          //    Rev 1.1   Feb 25 2009 16:07:16   amarinm1
     50          // Cm003209: Temporary solution for SW1 was implemented.
     51          // 
     52          //    Rev 1.0   02 Dec 2008 15:41:08   ailievb
     53          // Initial revision.
     54          //
     55          //******************************************************************************
     56          
     57          //------------------------------------------------------------------------------
     58          // Body Identification
     59          //------------------------------------------------------------------------------
     60          #define dat_pwm   "dat_pwm"
     61          
     62          
     63          //------------------------------------------------------------------------------
     64          // Included files
     65          //
     66          // #include <system_file_name.h>
     67          // #include "project_file_name.h"
     68          //------------------------------------------------------------------------------
     69          #include "lib.h"
     70          #include "tos.h"
     71          #include "dat.h"
     72          #include "dat_pwm.h"
     73          
     74          
     75          //------------------------------------------------------------------------------
     76          //  Local constants
     77          //
     78          //  #define cConstantName   ((tType) ConstantValue)
     79          //------------------------------------------------------------------------------
     80          // length of DAT buffer to LDB in bytes
     81          #define cDatMessageLength       ((U16)3)
     82          
     83          // Limits of cyclic ratio adjusted to respect padHSI-510 (the rule of 5%-95%):
     84          #define cMaximalCyclicRatio     ((U8)95)
     85          #define cMinimalCyclicRatio     ((U8)4)
     86          
     87          #define cFullOutputRation       ((U8)100)
     88          
     89          
     90          //------------------------------------------------------------------------------
     91          // Local macros
     92          //
     93          // #define mMacroName   (MacroDefinition)
     94          //------------------------------------------------------------------------------
     95          
     96          
     97          //------------------------------------------------------------------------------
     98          // Local types
     99          //
    100          // struct  sStructureName { ... };
    101          // union   uUnionName { ... };
    102          // enum    eEnumerationName { ... };
    103          // typedef Expression tTypeName;
    104          //------------------------------------------------------------------------------
    105          
    106          
    107          //------------------------------------------------------------------------------
    108          // Local data
    109          //
    110          // static  tType   VariableName;
    111          // static  tType*  pVariableName; 
    112          //------------------------------------------------------------------------------
    113          
    114          
    115          //------------------------------------------------------------------------------
    116          // Constant local data
    117          //
    118          // static const tType  VariableName;
    119          //------------------------------------------------------------------------------
    120          //QACJ 3207: amarinm1: Variable is used in DATPwmInit().

   \                                 In  segment CONST, align 2
    121          static const tDATPwmStruct InitPwmBuffer[cDATPwmNumberOfOuput] = 
   \                     InitPwmBuffer:
   \   0000   FA00           DW 250
   \   0002   0000           DB 0, 0
    122                                                                  cDATPwmInitOutputBuffer;
    123          
    124          
    125          //------------------------------------------------------------------------------
    126          // Exported data
    127          //
    128          // tType   LAYCmpVariableName;   (LAY: 3 characters to identify the layer)
    129          // tType*  pLAYCmpVariableName;  (Cmp: 3 characters to identify this component)
    130          //------------------------------------------------------------------------------

   \                                 In  segment NEAR_Z, align 2, align-sorted
    131          tDATPwmStruct DATPwmSoftBuffer[cDATPwmNumberOfOuput];
   \                     DATPwmSoftBuffer:
   \   0000                  DS 4
   \   0004                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    132          tDATPwmStruct DATPwmHardBuffer[cDATPwmNumberOfOuput];
   \                     DATPwmHardBuffer:
   \   0000                  DS 4
   \   0004                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    133          U8            u8DATPwmDiagMask;
   \                     u8DATPwmDiagMask:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    134          U8            u8DATPwmHardMask;
   \                     u8DATPwmHardMask:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    135          
    136          
    137          //------------------------------------------------------------------------------
    138          // Constant exported data
    139          //
    140          // (LAY: 3 characters to identify the layer)
    141          // (Cmp: 3 characters to identify this component)
    142          // 
    143          // const tType   LAYCmpVariableName;
    144          //------------------------------------------------------------------------------
    145          
    146          
    147          //------------------------------------------------------------------------------
    148          // Local function prototypes
    149          //  
    150          // static tTypeRetour FunctionName(tTypeArgument1 ArgumentName1, ... );
    151          //------------------------------------------------------------------------------
    152          
    153          
    154          //============================================================================
    155          //=========================== LOCAL FUNCTIONS ================================
    156          //============================================================================
    157          
    158          //==============================================================================
    159          //  DESCRIPTION :
    160          //  
    161          //  PARAMETERS (Type,Name,Min,Max) :   none
    162          //
    163          //  RETURN VALUE :   none
    164          // 
    165          //  DESIGN INFORMATION :   refer to Detailed Design Document
    166          //==============================================================================
    167          //static type FunctionName(...)
    168          
    169          
    170          //============================================================================
    171          //=========================== EXPORTED FUNCTIONS =============================
    172          //============================================================================
    173          
    174          //==============================================================================
    175          //  DESCRIPTION :
    176          //  
    177          //  PARAMETERS (Type,Name,Min,Max) :  none
    178          //
    179          //  RETURN VALUE :  none
    180          // 
    181          //  DESIGN INFORMATION :  refer to Detailed Design Document
    182          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    183          void DATPwmInit(void)
   \                     DATPwmInit:
    184          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   A100           MOV       A,#0
   \   0002   B3             PUSH      BC
   \   0003   B5             PUSH      DE
   \   0004                  ; Total Auto size: 0
    185              u8DATPwmDiagMask = 0;
   \   0004   9E....         MOV       u8DATPwmDiagMask,A
    186              u8DATPwmHardMask = 0;
   \   0007   9E....         MOV       u8DATPwmHardMask,A
    187              mLIBmemcpy( DATPwmSoftBuffer, InitPwmBuffer, (sizeof(tDATPwmStruct)*cDATPwmNumberOfOuput) );
   \   000A   14....         MOVW      DE,#InitPwmBuffer
   \   000D   16....         MOVW      HL,#DATPwmSoftBuffer
   \   0010   A304           MOV       B,#4
   \                     ??DATPwmInit_0:
   \   0012   85             MOV       A,[DE]
   \   0013   97             MOV       [HL],A
   \   0014   86             INCW      HL
   \   0015   84             INCW      DE
   \   0016   8BFA           DBNZ      B, ??DATPwmInit_0
    188              mLIBmemcpy( DATPwmHardBuffer, InitPwmBuffer, (sizeof(tDATPwmStruct)*cDATPwmNumberOfOuput) );
   \   0018   14....         MOVW      DE,#InitPwmBuffer
   \   001B   16....         MOVW      HL,#DATPwmHardBuffer
   \   001E   A304           MOV       B,#4
   \                     ??DATPwmInit_1:
   \   0020   85             MOV       A,[DE]
   \   0021   97             MOV       [HL],A
   \   0022   86             INCW      HL
   \   0023   84             INCW      DE
   \   0024   8BFA           DBNZ      B, ??DATPwmInit_1
    189          }
   \   0026   B4             POP       DE
   \   0027   B2             POP       BC
   \   0028   AF             RET       
   \   0029                  REQUIRE ?CL78K_V4_6_L00
    190          
    191          
    192          //==============================================================================
    193          //  DESCRIPTION :
    194          //  
    195          //  PARAMETERS (Type,Name,Min,Max) :  none
    196          //
    197          //  RETURN VALUE :  none
    198          // 
    199          //  DESIGN INFORMATION :  refer to Detailed Design Document
    200          //==============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    201          MEM_TYPE void DATPwmWriteOutput(const U8 u8PwmOutputIndexP, const tDATPwmFrequency FrequencyP, const U8 u8CyclicRatioP)
   \                     DATPwmWriteOutput:
    202          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 12
   \   0001   ..             CALLT     [__T_?FUNC_ENTER_L06]
   \   0002   0A00           DW        0xA
   \   0004   74             MOV       E,A
   \   0005   60             MOV       A,X
   \   0006   73             MOV       B,A
    203              tMsg Msg;
    204          
    205              mLIBassert( FrequencyP != 0 );
   \   0007   891C           MOVW      AX,SP
   \   0009   D6             MOVW      HL,AX
   \   000A   AE0A           MOV       A,[HL+0x0A]
   \   000C   70             MOV       X,A
   \   000D   AE0B           MOV       A,[HL+0x0B]
   \   000F   6168           OR        A,X
   \   0011   BD03           BNZ       ??DATPwmLeaveStartingStepState_2
   \   0013   9A....         CALL      LIBAssertionFailed
    206              
    207              DATPwmSoftBuffer[u8PwmOutputIndexP].Freq  = FrequencyP;
   \                     ??DATPwmLeaveStartingStepState_2:
   \   0016   64             MOV       A,E
   \   0017   A004           MOV       X,#4
   \   0019   3188           MULU      X
   \   001B   D6             MOVW      HL,AX
   \   001C   891C           MOVW      AX,SP
   \   001E   E6             XCHW      AX,HL
   \   001F   BE05           MOV       [HL+0x05],A
   \   0021   60             MOV       A,X
   \   0022   BE04           MOV       [HL+0x04],A
   \   0024   AE05           MOV       A,[HL+0x05]
   \   0026   CA....         ADDW      AX,#DATPwmSoftBuffer
   \   0029   D6             MOVW      HL,AX
   \   002A   891C           MOVW      AX,SP
   \   002C   E6             XCHW      AX,HL
   \   002D   BE03           MOV       [HL+0x03],A
   \   002F   60             MOV       A,X
   \   0030   BE02           MOV       [HL+0x02],A
   \   0032   AE03           MOV       A,[HL+0x03]
   \   0034   D6             MOVW      HL,AX
   \   0035   B7             PUSH      HL
   \   0036   891C           MOVW      AX,SP
   \   0038   D6             MOVW      HL,AX
   \   0039   AE0C           MOV       A,[HL+0x0C]
   \   003B   70             MOV       X,A
   \   003C   AE0D           MOV       A,[HL+0x0D]
   \   003E   B6             POP       HL
   \   003F   BE01           MOV       [HL+0x01],A
   \   0041   60             MOV       A,X
   \   0042   97             MOV       [HL],A
    208              DATPwmSoftBuffer[u8PwmOutputIndexP].Ratio = u8CyclicRatioP;
   \   0043   891C           MOVW      AX,SP
   \   0045   D6             MOVW      HL,AX
   \   0046   AE02           MOV       A,[HL+0x02]
   \   0048   70             MOV       X,A
   \   0049   AE03           MOV       A,[HL+0x03]
   \   004B   D6             MOVW      HL,AX
   \   004C   63             MOV       A,B
   \   004D   86             INCW      HL
   \   004E   86             INCW      HL
   \   004F   97             MOV       [HL],A
    209              
    210              if ( (u8DATPwmDiagMask & (U8)(1 << u8PwmOutputIndexP) ) == 0)
   \   0050   891C           MOVW      AX,SP
   \   0052   D6             MOVW      HL,AX
   \   0053   AE04           MOV       A,[HL+0x04]
   \   0055   70             MOV       X,A
   \   0056   AE05           MOV       A,[HL+0x05]
   \   0058   CA....         ADDW      AX,#DATPwmHardBuffer
   \   005B   B6             POP       HL
   \   005C   B1             PUSH      AX
   \   005D   64             MOV       A,E
   \   005E   72             MOV       C,A
   \   005F   100100         MOVW      AX,#1
   \   0062   ..             CALLT     [__T_?I_LSH_L02]
   \   0063   60             MOV       A,X
   \   0064   58....         AND       A,u8DATPwmDiagMask
   \   0067   BD5E           BNZ       ??DATPwmLeaveStartingStepState_3
    211              {
    212                  DATPwmHardBuffer[u8PwmOutputIndexP].Freq  = DATPwmSoftBuffer[u8PwmOutputIndexP].Freq;
   \   0069   891C           MOVW      AX,SP
   \   006B   D6             MOVW      HL,AX
   \   006C   87             MOV       A,[HL]
   \   006D   70             MOV       X,A
   \   006E   AE01           MOV       A,[HL+0x01]
   \   0070   D6             MOVW      HL,AX
   \   0071   B7             PUSH      HL
   \   0072   891C           MOVW      AX,SP
   \   0074   D6             MOVW      HL,AX
   \   0075   AE04           MOV       A,[HL+0x04]
   \   0077   70             MOV       X,A
   \   0078   AE05           MOV       A,[HL+0x05]
   \   007A   D6             MOVW      HL,AX
   \   007B   87             MOV       A,[HL]
   \   007C   70             MOV       X,A
   \   007D   AE01           MOV       A,[HL+0x01]
   \   007F   B6             POP       HL
   \   0080   BE01           MOV       [HL+0x01],A
   \   0082   60             MOV       A,X
   \   0083   97             MOV       [HL],A
    213          
    214                  if (   ( u8CyclicRatioP < cMinimalCyclicRatio)
    215                      || ((u8DATPwmHardMask & (U8)(1 << u8PwmOutputIndexP)) != 0)   )
   \   0084   63             MOV       A,B
   \   0085   4D04           CMP       A,#4
   \   0087   8D0C           BC        ??DATPwmLeaveStartingStepState_4
   \   0089   64             MOV       A,E
   \   008A   72             MOV       C,A
   \   008B   100100         MOVW      AX,#1
   \   008E   ..             CALLT     [__T_?I_LSH_L02]
   \   008F   60             MOV       A,X
   \   0090   58....         AND       A,u8DATPwmHardMask
   \   0093   AD0C           BZ        ??DATPwmLeaveStartingStepState_5
    216                  {
    217                      DATPwmHardBuffer[u8PwmOutputIndexP].Ratio = 0;
   \                     ??DATPwmLeaveStartingStepState_4:
   \   0095   891C           MOVW      AX,SP
   \   0097   D6             MOVW      HL,AX
   \   0098   87             MOV       A,[HL]
   \   0099   70             MOV       X,A
   \   009A   AE01           MOV       A,[HL+0x01]
   \   009C   D6             MOVW      HL,AX
   \   009D   A100           MOV       A,#0
   \   009F   FA23           BR        ??DATPwmLeaveStartingStepState_6
    218                  }
    219                  else if ( u8CyclicRatioP > cMaximalCyclicRatio )
   \                     ??DATPwmLeaveStartingStepState_5:
   \   00A1   63             MOV       A,B
   \   00A2   4D60           CMP       A,#96
   \   00A4   891C           MOVW      AX,SP
   \   00A6   D6             MOVW      HL,AX
   \   00A7   8D09           BC        ??DATPwmLeaveStartingStepState_7
    220                  {
    221                      DATPwmHardBuffer[u8PwmOutputIndexP].Ratio = cFullOutputRation;
   \   00A9   87             MOV       A,[HL]
   \   00AA   70             MOV       X,A
   \   00AB   AE01           MOV       A,[HL+0x01]
   \   00AD   D6             MOVW      HL,AX
   \   00AE   A164           MOV       A,#100
   \   00B0   FA12           BR        ??DATPwmLeaveStartingStepState_6
    222                  }
    223                  else
    224                  {
    225                      DATPwmHardBuffer[u8PwmOutputIndexP].Ratio = DATPwmSoftBuffer[u8PwmOutputIndexP].Ratio;
   \                     ??DATPwmLeaveStartingStepState_7:
   \   00B2   AE02           MOV       A,[HL+0x02]
   \   00B4   70             MOV       X,A
   \   00B5   AE03           MOV       A,[HL+0x03]
   \   00B7   D6             MOVW      HL,AX
   \   00B8   AE02           MOV       A,[HL+0x02]
   \   00BA   72             MOV       C,A
   \   00BB   891C           MOVW      AX,SP
   \   00BD   D6             MOVW      HL,AX
   \   00BE   87             MOV       A,[HL]
   \   00BF   70             MOV       X,A
   \   00C0   AE01           MOV       A,[HL+0x01]
   \   00C2   D6             MOVW      HL,AX
   \   00C3   62             MOV       A,C
   \                     ??DATPwmLeaveStartingStepState_6:
   \   00C4   86             INCW      HL
   \   00C5   86             INCW      HL
   \   00C6   97             MOV       [HL],A
    226                  }
    227              }
    228              
    229              Msg.Lng = cDatMessageLength;
   \                     ??DATPwmLeaveStartingStepState_3:
   \   00C7   891C           MOVW      AX,SP
   \   00C9   CA0600         ADDW      AX,#6
   \   00CC   D6             MOVW      HL,AX
   \   00CD   A100           MOV       A,#0
   \   00CF   BE03           MOV       [HL+0x03],A
   \   00D1   A103           MOV       A,#3
   \   00D3   BE02           MOV       [HL+0x02],A
    230              //QACJ 0310: amarinm1: Standart procedure, the array is then casted to its original type.
    231              Msg.pBuffer = (U8 *) &DATPwmHardBuffer[u8PwmOutputIndexP];
   \   00D5   891C           MOVW      AX,SP
   \   00D7   D6             MOVW      HL,AX
   \   00D8   87             MOV       A,[HL]
   \   00D9   70             MOV       X,A
   \   00DA   AE01           MOV       A,[HL+0x01]
   \   00DC   D6             MOVW      HL,AX
   \   00DD   891C           MOVW      AX,SP
   \   00DF   E6             XCHW      AX,HL
   \   00E0   BE07           MOV       [HL+0x07],A
   \   00E2   60             MOV       A,X
   \   00E3   BE06           MOV       [HL+0x06],A
    232              LDBSendWithAddr(cLDBChannelPwm, u8PwmOutputIndexP, &Msg);
   \   00E5   891C           MOVW      AX,SP
   \   00E7   CA0600         ADDW      AX,#6
   \   00EA   D2             MOVW      BC,AX
   \   00EB   64             MOV       A,E
   \   00EC   70             MOV       X,A
   \   00ED   A100           MOV       A,#0
   \   00EF   16....         MOVW      HL,#LWRD(LDBPwmSendWithAddr)
   \   00F2   A4..           MOV       E,#BYTE3(LDBPwmSendWithAddr)
   \   00F4   ..             CALLT     [__T_?FAR_CALL_L07]
    233          }
   \   00F5   ..             CALLT     [__T_?FUNC_DEALL_L06]
   \   00F6   0C00           DW        0xC
   \   00F8   AF             RET       
   \   00F9                  REQUIRE ?CL78K_V4_6_L00
    234          
    235          
    236          //==============================================================================
    237          //  DESCRIPTION :
    238          //  
    239          //  PARAMETERS (Type,Name,Min,Max) :  none
    240          //
    241          //  RETURN VALUE :  none
    242          // 
    243          //  DESIGN INFORMATION :  refer to Detailed Design Document
    244          //==============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    245          MEM_TYPE void DATPwmWriteDiagOutput(const U8 u8PwmOutputIndexP, const tDATPwmFrequency FrequencyP, const U8 u8CyclicRatioP)
   \                     DATPwmWriteDiagOutput:
    246          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 8
   \   0001   B7             PUSH      HL
   \   0002   B7             PUSH      HL
   \   0003   B7             PUSH      HL
   \   0004   74             MOV       E,A
   \   0005   60             MOV       A,X
   \   0006   73             MOV       B,A
    247              tMsg Msg;
    248          
    249              mLIBassert( (u8DATPwmDiagMask & (1 << u8PwmOutputIndexP)) != 0 );
   \   0007   64             MOV       A,E
   \   0008   72             MOV       C,A
   \   0009   100100         MOVW      AX,#1
   \   000C   ..             CALLT     [__T_?I_LSH_L02]
   \   000D   60             MOV       A,X
   \   000E   58....         AND       A,u8DATPwmDiagMask
   \   0011   BD03           BNZ       ??DATPwmLeaveStartingStepState_8
   \   0013   9A....         CALL      LIBAssertionFailed
    250              mLIBassert( FrequencyP != 0 );
   \                     ??DATPwmLeaveStartingStepState_8:
   \   0016   891C           MOVW      AX,SP
   \   0018   D6             MOVW      HL,AX
   \   0019   AE06           MOV       A,[HL+0x06]
   \   001B   70             MOV       X,A
   \   001C   AE07           MOV       A,[HL+0x07]
   \   001E   6168           OR        A,X
   \   0020   BD03           BNZ       ??DATPwmLeaveStartingStepState_9
   \   0022   9A....         CALL      LIBAssertionFailed
    251              
    252              DATPwmHardBuffer[u8PwmOutputIndexP].Freq = FrequencyP;
   \                     ??DATPwmLeaveStartingStepState_9:
   \   0025   64             MOV       A,E
   \   0026   A004           MOV       X,#4
   \   0028   3188           MULU      X
   \   002A   CA....         ADDW      AX,#DATPwmHardBuffer
   \   002D   B6             POP       HL
   \   002E   B1             PUSH      AX
   \   002F   891C           MOVW      AX,SP
   \   0031   D6             MOVW      HL,AX
   \   0032   87             MOV       A,[HL]
   \   0033   70             MOV       X,A
   \   0034   AE01           MOV       A,[HL+0x01]
   \   0036   D6             MOVW      HL,AX
   \   0037   B7             PUSH      HL
   \   0038   891C           MOVW      AX,SP
   \   003A   D6             MOVW      HL,AX
   \   003B   AE08           MOV       A,[HL+0x08]
   \   003D   70             MOV       X,A
   \   003E   AE09           MOV       A,[HL+0x09]
   \   0040   B6             POP       HL
   \   0041   BE01           MOV       [HL+0x01],A
   \   0043   60             MOV       A,X
   \   0044   97             MOV       [HL],A
    253              
    254              if (   ( u8CyclicRatioP < cMinimalCyclicRatio )
    255                  || ((u8DATPwmHardMask & (U8)(1 << u8PwmOutputIndexP)) != 0)   )
   \   0045   63             MOV       A,B
   \   0046   4D04           CMP       A,#4
   \   0048   8D0C           BC        ??DATPwmLeaveStartingStepState_10
   \   004A   64             MOV       A,E
   \   004B   72             MOV       C,A
   \   004C   100100         MOVW      AX,#1
   \   004F   ..             CALLT     [__T_?I_LSH_L02]
   \   0050   60             MOV       A,X
   \   0051   58....         AND       A,u8DATPwmHardMask
   \   0054   AD0C           BZ        ??DATPwmLeaveStartingStepState_11
    256              {
    257                  DATPwmHardBuffer[u8PwmOutputIndexP].Ratio = 0;
   \                     ??DATPwmLeaveStartingStepState_10:
   \   0056   891C           MOVW      AX,SP
   \   0058   D6             MOVW      HL,AX
   \   0059   87             MOV       A,[HL]
   \   005A   70             MOV       X,A
   \   005B   AE01           MOV       A,[HL+0x01]
   \   005D   D6             MOVW      HL,AX
   \   005E   A100           MOV       A,#0
   \   0060   FA12           BR        ??DATPwmLeaveStartingStepState_12
    258              }
    259              else if ( u8CyclicRatioP > cMaximalCyclicRatio )
   \                     ??DATPwmLeaveStartingStepState_11:
   \   0062   63             MOV       A,B
   \   0063   4D60           CMP       A,#96
   \   0065   891C           MOVW      AX,SP
   \   0067   D6             MOVW      HL,AX
   \   0068   87             MOV       A,[HL]
   \   0069   70             MOV       X,A
   \   006A   AE01           MOV       A,[HL+0x01]
   \   006C   D6             MOVW      HL,AX
   \   006D   8D04           BC        ??DATPwmLeaveStartingStepState_13
    260              {
    261                  DATPwmHardBuffer[u8PwmOutputIndexP].Ratio = cFullOutputRation;
   \   006F   A164           MOV       A,#100
   \   0071   FA01           BR        ??DATPwmLeaveStartingStepState_12
    262              }
    263              else
    264              {
    265                  DATPwmHardBuffer[u8PwmOutputIndexP].Ratio = u8CyclicRatioP;
   \                     ??DATPwmLeaveStartingStepState_13:
   \   0073   63             MOV       A,B
   \                     ??DATPwmLeaveStartingStepState_12:
   \   0074   86             INCW      HL
   \   0075   86             INCW      HL
   \   0076   97             MOV       [HL],A
    266              }
    267          
    268              Msg.Lng = cDatMessageLength;
   \   0077   891C           MOVW      AX,SP
   \   0079   80             INCW      AX
   \   007A   80             INCW      AX
   \   007B   D6             MOVW      HL,AX
   \   007C   A100           MOV       A,#0
   \   007E   BE03           MOV       [HL+0x03],A
   \   0080   A103           MOV       A,#3
   \   0082   BE02           MOV       [HL+0x02],A
    269              //QACJ 0310: amarinm1: Standart procedure, the array is then casted to its original type.
    270              Msg.pBuffer = (U8 *) &DATPwmHardBuffer[u8PwmOutputIndexP];
   \   0084   891C           MOVW      AX,SP
   \   0086   D6             MOVW      HL,AX
   \   0087   87             MOV       A,[HL]
   \   0088   70             MOV       X,A
   \   0089   AE01           MOV       A,[HL+0x01]
   \   008B   D6             MOVW      HL,AX
   \   008C   891C           MOVW      AX,SP
   \   008E   E6             XCHW      AX,HL
   \   008F   BE03           MOV       [HL+0x03],A
   \   0091   60             MOV       A,X
   \   0092   BE02           MOV       [HL+0x02],A
    271              LDBSendWithAddr(cLDBChannelPwm, u8PwmOutputIndexP, &Msg);
   \   0094   891C           MOVW      AX,SP
   \   0096   80             INCW      AX
   \   0097   80             INCW      AX
   \   0098   D2             MOVW      BC,AX
   \   0099   64             MOV       A,E
   \   009A   70             MOV       X,A
   \   009B   A100           MOV       A,#0
   \   009D   16....         MOVW      HL,#LWRD(LDBPwmSendWithAddr)
   \   00A0   A4..           MOV       E,#BYTE3(LDBPwmSendWithAddr)
   \   00A2   ..             CALLT     [__T_?FAR_CALL_L07]
    272          }
   \   00A3   ..             CALLT     [__T_?FUNC_DEALL_L06]
   \   00A4   0800           DW        0x8
   \   00A6   AF             RET       
   \   00A7                  REQUIRE ?CL78K_V4_6_L00
    273          
    274          
    275          //==============================================================================
    276          //  DESCRIPTION :
    277          //  
    278          //  PARAMETERS (Type,Name,Min,Max) :  none
    279          //
    280          //  RETURN VALUE :  none
    281          // 
    282          //  DESIGN INFORMATION :  refer to Detailed Design Document
    283          //==============================================================================
    284          //QACJ 3206: amarinm1: Both parameters are used for Assert checks.

   \                                 In  segment CODE, align 1, keep-with-next
    285          void DATPwmCallBackTxWithAddr(const tAddress Ad, const tStatus Status)
   \                     DATPwmCallBackTxWithAddr:
    286          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   \   0001   D4             MOVW      DE,AX
    287              mLIBassert(Status == cLDBCorrect);
   \   0002   63             MOV       A,B
   \   0003   4D00           CMP       A,#0
   \   0005   AD03           BZ        ??DATPwmLeaveStartingStepState_0
   \   0007   9A....         CALL      LIBAssertionFailed
    288              mLIBassert(Ad < cDATPwmNumberOfOuput);
   \                     ??DATPwmLeaveStartingStepState_0:
   \   000A   C4             MOVW      AX,DE
   \   000B   6168           OR        A,X
   \   000D   AD03           BZ        ??DATPwmLeaveStartingStepState_1
   \   000F   9A....         CALL      LIBAssertionFailed
    289          }
   \                     ??DATPwmLeaveStartingStepState_1:
   \   0012   B4             POP       DE
   \   0013   AF             RET       
   \   0014                  REQUIRE ?CL78K_V4_6_L00
    290          
    291          
    292          //==============================================================================
    293          //  DESCRIPTION :
    294          //  
    295          //  PARAMETERS (Type,Name,Min,Max) :  none
    296          //
    297          //  RETURN VALUE :  none
    298          // 
    299          //  DESIGN INFORMATION :  refer to Detailed Design Document
    300          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    301          void DATPwmLeaveStartingStepState(void)
   \                     DATPwmLeaveStartingStepState:
    302          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001   B5             PUSH      DE
   \   0002                  ; Total Auto size: 0
    303              U8 u8Index;
    304          
    305              //QACJ 2465: amarinm1: Done like this for flexibility.
    306              for(u8Index = 0; u8Index < cDATPwmNumberOfOuput; u8Index++)
    307              {
    308                  DATPwmWriteOutput(u8Index, 
    309                                    DATPwmSoftBuffer[u8Index].Freq, 
    310                                    DATPwmSoftBuffer[u8Index].Ratio
    311                                   );
   \   0002   8E....         MOV       A,DATPwmSoftBuffer+2
   \   0005   74             MOV       E,A
   \   0006   02....         MOVW      AX,DATPwmSoftBuffer
   \   0009   D2             MOVW      BC,AX
   \   000A   64             MOV       A,E
   \   000B   70             MOV       X,A
   \   000C   A100           MOV       A,#0
   \   000E   16....         MOVW      HL,#LWRD(DATPwmWriteOutput)
   \   0011   A4..           MOV       E,#BYTE3(DATPwmWriteOutput)
   \   0013   ..             CALLT     [__T_?FAR_CALL_L07]
    312              }
    313          }
   \   0014   B4             POP       DE
   \   0015   B2             POP       BC
   \   0016   AF             RET       
   \   0017                  REQUIRE ?CL78K_V4_6_L00

   \                                 In  segment CLTVEC, align 2
   \                     __T_?I_LSH_L02:
   \   0000   ....           DW       ?I_LSH_L02

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_CALL_L07:
   \   0000   ....           DW       ?FAR_CALL_L07

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FUNC_ENTER_L06:
   \   0000   ....           DW       ?FUNC_ENTER_L06

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FUNC_DEALL_L06:
   \   0000   ....           DW       ?FUNC_DEALL_L06
    314          

   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     InitPwmBuffer                   4
     DATPwmSoftBuffer                4
     DATPwmHardBuffer                4
     u8DATPwmDiagMask                1
     u8DATPwmHardMask                1
     DATPwmInit                     41
     DATPwmWriteOutput             249
     DATPwmWriteDiagOutput         167
     DATPwmCallBackTxWithAddr       20
     DATPwmLeaveStartingStepState   23
     __T_?I_LSH_L02                  2
     __T_?FAR_CALL_L07               2
     __T_?FUNC_ENTER_L06             2
     __T_?FUNC_DEALL_L06             2

 
 416 bytes in segment BCODE
   8 bytes in segment CLTVEC
  84 bytes in segment CODE
   4 bytes in segment CONST
  10 bytes in segment NEAR_Z
 
 500 bytes of CODE  memory (+ 8 bytes shared)
   4 bytes of CONST memory
  10 bytes of DATA  memory

Errors: none
Warnings: none
