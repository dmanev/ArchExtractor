###############################################################################
#                                                                             #
# IAR C/C++ Compiler V4.61A/W32 for 78K0 and 78K0S      15/Feb/2011  13:26:13 #
# Copyright 1992-2008 IAR Systems AB.                                         #
#                                                                             #
#    Core         =  78k0                                                     #
#    Code model   =  Standard                                                 #
#                 =                                                           #
#    Source file  =  D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\TARGET\LDB\LD #
#                    B_ALA.C                                                  #
#    Command line =  --code_model standard --core 78k0 -e                     #
#                    -DMEM_TYPE=__banked -DMEM_FAST=__saddr                   #
#                    -DCALLT_TYPE=__callt -DX90_PROJECT                       #
#                    --generate_callt_runtime_library_calls -Ohs              #
#                    "-IC:\Program Files\IAR Systems\Embedded Workbench       #
#                    5.0\78k\inc" "-IC:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.0\78k\inc\clib" -I. -I..\EXE\GEN\            #
#                    -I..\SOURCES\DAT -I..\SOURCES\LAP -I..\SOURCES\LDB_API   #
#                    -I..\SOURCES\LIB -I..\SOURCES\TOS -I.\LDB -DROM          #
#                    -DUSE_LIBSTK -DDONT_KEEP_OLD_TYPE_COMPATIBILITY -l       #
#                    ..\EXE\TARGET_R\LDB_ALA.LST -o                           #
#                    ..\EXE\TARGET_R\LDB_ALA.R26                              #
#                    D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\TARGET\LDB\LD #
#                    B_ALA.C                                                  #
#    List file    =  ..\EXE\TARGET_R\LDB_ALA.LST                              #
#    Object file  =  ..\EXE\TARGET_R\LDB_ALA.R26                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\TARGET\LDB\LDB_ALA.C
      1          //******************************************************************************
      2          // Company:      Johnson Controls Inc.
      3          // -----------------------------------------------------------------------------
      4          // Copyright:    This software is JCI property.
      5          //               Duplication or disclosure without JCI written authorization
      6          //               is prohibited.
      7          // -----------------------------------------------------------------------------
      8          // Project:      X90_BCM
      9          // Language:     ANSI-C
     10          // -----------------------------------------------------------------------------
     11          // Component:    LDB_ALA
     12          // -----------------------------------------------------------------------------
     13          // $Date:   Jul 13 2009 16:28:36  $
     14          // $Archive:   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/LDB/LDB_ALA/LDB_ALA.c-arc  $
     15          // $Revision:   1.2  $
     16          // -----------------------------------------------------------------------------
     17          // $Log::   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/LDB/LDB_ALA/LDB_ALA.c-arc   $
     18          // 
     19          //    Rev 1.2   Jul 13 2009 16:28:36   adzhelp
     20          // Cm005188: All timeouts generated by Timer WTI
     21          // 
     22          //    Rev 1.1   Jul 13 2009 16:25:32   adzhelp
     23          // Cm005188: Code review corrections from SW1
     24          // 
     25          //    Rev 1.0   Apr 03 2009 08:48:56   adzhelp
     26          // Initial revision.
     27          // 
     28          //******************************************************************************
     29          
     30          //------------------------------------------------------------------------------
     31          // Body Identification
     32          //------------------------------------------------------------------------------
     33          #define LDB_ALA  "LDB_ALA"
     34          
     35          //------------------------------------------------------------------------------
     36          // Included files to resolve specific definitions in this file
     37          //
     38          // #include <system_file_name.h>
     39          // #include "project_file_name.h"
     40          //------------------------------------------------------------------------------
     41          #include "lib.h"
     42          #include "ldb.h"
     43          #include "ldb_ioc.h"

   \                                 In  segment SADDR_A, at 0xff01
   \   union <unnamed> volatile __saddr _A_P1
   \                     _A_P1:
   \   0000                  DS 1

   \                                 In  segment SADDR_A, at 0xff0b
   \   unsigned char volatile __saddr __no_bit_access TXB6
   \                     TXB6:
   \   0000                  DS 1

   \                                 In  segment NEAR_A, at 0xff50
   \   union <unnamed> volatile __sfr _A_ASIM6
   \                     _A_ASIM6:
   \   0000                  DS 1

   \                                 In  segment NEAR_A, at 0xff56
   \   unsigned char volatile __sfr __no_bit_access CKSR6
   \                     CKSR6:
   \   0000                  DS 1

   \                                 In  segment NEAR_A, at 0xff57
   \   unsigned char volatile __sfr __no_bit_access BRGC6
   \                     BRGC6:
   \   0000                  DS 1

   \                                 In  segment NEAR_A, at 0xff58
   \   union <unnamed> volatile __sfr _A_ASICL6
   \                     _A_ASICL6:
   \   0000                  DS 1

   \                                 In  segment NEAR_A, at 0xff6f
   \   union <unnamed> volatile __sfr _A_WTM
   \                     _A_WTM:
   \   0000                  DS 1

   \                                 In  segment NEAR_A, at 0xffe0
   \   union <unnamed> volatile __sfr _A_IF0
   \                     _A_IF0:
   \   0000                  DS 2

   \                                 In  segment NEAR_A, at 0xffe2
   \   union <unnamed> volatile __sfr _A_IF1
   \                     _A_IF1:
   \   0000                  DS 2

   \                                 In  segment NEAR_A, at 0xffe4
   \   union <unnamed> volatile __sfr _A_MK0
   \                     _A_MK0:
   \   0000                  DS 2

   \                                 In  segment NEAR_A, at 0xffe6
   \   union <unnamed> volatile __sfr _A_MK1
   \                     _A_MK1:
   \   0000                  DS 2
     44          #include "ldb_int.h"
     45          #include "ldb_har.h"
     46          #include "ldb_ala.h"
     47          #include "ldb_tim.h"
     48          
     49          //------------------------------------------------------------------------------
     50          // Local constants
     51          //
     52          // #define cConstantName   ((tType) ConstantValue)
     53          //------------------------------------------------------------------------------
     54          
     55          #define INVERSE_LOGIC // logic inversion on Bus
     56          
     57          #define cNbDataPerMessage    4
     58          #define cNbMessage           4
     59           
     60           
     61          
     62          //Transmission status registers
     63          #define cTransmitShiftRegisterFlag       0x01U
     64          #define cTransmitBufferRegisterFlag      0x02U
     65          
     66          // Timings of alarm timer
     67          #define cWakeUpLowTimeout              (2)      //  2ms
     68          #define cWakeUpHighTimeout             (18)     // 18ms
     69          #define cLDBAlaBreakTimeOutInMs        (5)      // 5ms
     70          
     71          // Value for  UART6 Baud  rate generator
     72          #define cBaudRateGeneratorValue        (151)
     73          // Interval timer divider
     74          #define cAlarmTimerDivider              7
     75          
     76           
     77          //------------------------------------------------------------------------------
     78          // Local macros
     79          //
     80          // #define mMacroName   (MacroDefinition)
     81          //------------------------------------------------------------------------------
     82          
     83          #define mStartAlarmTimer() \
     84              mLDBIocStartTimer(cLDBHarAlarmTimer)
     85          
     86          #define mLDBSelectAlarmTimerPeriod()\
     87              mLDBIocSelectClock(cLDBHarAlarmTimer,cAlarmTimerDivider)  
     88              
     89          
     90          
     91          #define mStopAlarmTimer() \
     92              mLDBIocStopTimer(cLDBHarAlarmTimer)
     93            
     94            
     95          // fXCLK6 frequency = fprs    / ((2 ^4)
     96          #define mLDBUART6SelectClock_Timer() \
     97              mLDBRegWrite1BitInRegister(ASIM6, 6, 0); \
     98              mLDBRegWrite1BitInRegister(ASIM6, 5, 0); \
     99              /* //QACJ 3412: aangovt: No unrecognized code  */ \
    100              mLDBRegWrite8BitRegister(CKSR6,4)
    101          
    102           
    103          
    104          
    105          // Baud rate generator 
    106          
    107          #define mLDBUART6SetBRG(Value) \
    108              mLDBRegWrite1BitInRegister(ASIM6, 7, 0); \
    109              /* //QACJ 3412: aangovt: No unrecognized code  */ \
    110              mLDBRegWrite8BitRegister(BRGC6,Value)
    111          
    112          
    113          
    114          //Symbol   <7>    <6>       <5>     4        3       2       1      0
    115          //ASIM6    POWER6  TXE6     RXE6     PS61   PS60     CL6     SL6    ISRM6
    116           
    117          //Transmission data  specifies
    118          // Make sure that RXE6 = 0 when rewriting the ISRM6 bit.
    119          #define mLDBUART6TransmitDataMode() \
    120              mLDBRegWrite1BitInRegister(ASIM6, 5, 0); \
    121              mLDBRegWrite1BitInRegister(ASIM6, 4, 0); \
    122              mLDBRegWrite1BitInRegister(ASIM6, 3, 0); \
    123              mLDBRegWrite1BitInRegister(ASIM6, 2, 1); \
    124              mLDBRegWrite1BitInRegister(ASIM6, 1, 0); \
    125              /* //QACJ 3412: aangovt: No unrecognized code  */ \
    126              mLDBRegWrite1BitInRegister(ASIM6, 0, 1)
    127          
    128          
    129          //Enable UART6 transmission 
    130          #define mLDBUART6TransmissionEnable() \
    131              mLDBRegWrite1BitInRegister(ASIM6, 7, 1); \
    132              mLDBRegWrite1BitInRegister(ASIM6, 6, 1); \
    133              mLDBRegWrite1BitInRegister(ASIM6, 5, 0); \
    134              /* port must be '1' when UART enabled: */ \
    135              mLDBHarWrite(cLDBHarAlarmOut,1); \
    136              /* Enables inverting TXD6 output - TXDLV6  - Bit 0 0f ASICL6 */ \
    137              /* //QACJ 3412: aangovt: No unrecognized code  */               \
    138              mLDBRegWrite1BitInRegister(ASICL6, 0, 1)
    139          
    140          
    141          
    142          //Disable UART6 transmission
    143          #define mLDBUART6TransmissionDisable() \
    144              mLDBRegWrite1BitInRegister(ASIM6, 7, 0); \
    145              mLDBRegWrite1BitInRegister(ASIM6, 6, 0); \
    146              /* Disable inverting TXD6 output - TXDLV6  - Bit 0 0f ASICL6 */ \
    147              /* //QACJ 3412: aangovt: No unrecognized code  */               \
    148              mLDBRegWrite1BitInRegister(ASICL6, 0, 0)
    149          
    150          
    151          
    152          // Communication operations 
    153          //  First-bit specification -  DIR6 - Bit 1 0f ASICL6 - 1 - LSB, 0 - MSB
    154          #define mLDBUART6CommunicationOperations() \
    155              mLDBRegWrite1BitInRegister(ASICL6, 1, 1)
    156          
    157          
    158          
    159          
    160          // Transmission  status 
    161           // TXBF6: Bit 1 of ASIF6
    162          #define mLDBUART6TransmissionBufferStatus() \
    163              mLDBRegRead8BitRegister(ASIF6)
    164          
    165          #define mGetTransmitBufferDataFlag() \
    166              ((mLDBUART6TransmissionBufferStatus() & cTransmitBufferRegisterFlag) != 0)
    167          
    168          #define mGetTransmitShiftRegisterFlag() \
    169              ((mLDBUART6TransmissionBufferStatus() & cTransmitShiftRegisterFlag) != 0)
    170          
    171          //  Set data to Transmit buffer 
    172          #define mLDBUART6SetTransmitBuffer(Value) \
    173              mLDBRegWrite8BitRegister(TXB6,Value)
    174          
    175           
    176          //------------------------------------------------------------------------------
    177          // Local types
    178          //
    179          // typedef Expression    tTypeName;
    180          //------------------------------------------------------------------------------
    181          enum eTransmissionStage
    182          {
    183              cStartBreakTime,
    184              cWakeUpLowPattern,
    185              cWakeUpHighPattern,
    186              cBreakTime,
    187              cDataTransmission
    188          };
    189          
    190          //------------------------------------------------------------------------------
    191          // Data prefix
    192          //
    193          // unsigned int {u8,u16,u32} / signed int {s8,s16,s32} 
    194          // register size unsigned int {r} / float {f32,f64}  / s for struct 
    195          //
    196          // -----------------------------------------------------------------------------
    197          
    198          // -----------------------------------------------------------------------------
    199          // Local data
    200          //
    201          // static  tType   u8VariableName;  
    202          // static  tType*  pu8VariableName; 
    203          //------------------------------------------------------------------------------
    204          //QACJ 3207: adzhelp: Array used by macro mLDBUART6SetTransmitBuffer

   \                                 In  segment NEAR_Z, align 1, align-sorted
    205          static U8 Message[cNbDataPerMessage];
   \                     Message:
   \   0000                  DS 4
   \   0004                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    206          static U8 u8EmissionStage;
   \                     u8EmissionStage:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    207          static U8 u8DataPosition;
   \                     u8DataPosition:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    208          static U8 u8MessageNumber;
   \                     u8MessageNumber:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    209          static U8 u8AlarmTimerCounter;
   \                     u8AlarmTimerCounter:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    210          #ifdef DEBUG
    211          static BOOL bTransmissionIsActive;
    212          #endif
    213          
    214          //------------------------------------------------------------------------------
    215          // Constant local data
    216          //
    217          // static const tType  VariableName;
    218          //------------------------------------------------------------------------------
    219          
    220          //------------------------------------------------------------------------------
    221          // Exported data
    222          //
    223          // tType   u8LAYCmpVariableName; (LAY: 3 characters to identify the layer)
    224          // tType*  pu8LAYCmpVariableName;(Cmp: 3 characters to identify the component)
    225          //------------------------------------------------------------------------------
    226          
    227          //------------------------------------------------------------------------------
    228          // Constant exported data
    229          //
    230          //             (LAY: 3 characters to identify the layer)
    231          //             (Cmp: 3 characters to identify this component)
    232          // 
    233          // const tType   LAYCmpVariableName;
    234          //------------------------------------------------------------------------------
    235          
    236          //------------------------------------------------------------------------------
    237          // Local function prototypes
    238          // 
    239          // static tTypeRetour FunctionName(tTypeArgument1 ArgumentName1, ... );
    240          //------------------------------------------------------------------------------
    241          static void UART6Config(void);
    242          static MEM_TYPE void StartOfCommunication(void);
    243          static void DataTransmission(void);
    244          
    245          //==============================================================================
    246          //=========================== LOCAL FUNCTIONS ==================================
    247          //==============================================================================
    248          
    249          //==============================================================================
    250          // DESCRIPTION :
    251          //
    252          // PARAMETERS (Type,Name,Min,Max) :   none
    253          //
    254          // RETURN VALUE :   none
    255          //
    256          // DESIGN INFORMATION : (pseudo code, algorithm ... )
    257          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    258          static void UART6Config(void)
   \                     UART6Config:
    259          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    260              mLDBUART6SelectClock_Timer(); // Set the CKSR6 register 
   \   0000   716B50         CLR1      0xFF50.6
   \   0003   715B50         CLR1      0xFF50.5
   \   0006   135604         MOV       0xFF56,#4
    261              // Set the BRGC6 register
    262              mLDBUART6SetBRG(cBaudRateGeneratorValue);
   \   0009   717B50         CLR1      0xFF50.7
   \   000C   135797         MOV       0xFF57,#151
    263              //Transmission data  specifies
    264              mLDBUART6TransmitDataMode();
   \   000F   715B50         CLR1      0xFF50.5
   \   0012   714B50         CLR1      0xFF50.4
   \   0015   713B50         CLR1      0xFF50.3
   \   0018   712A50         SET1      0xFF50.2
   \   001B   711B50         CLR1      0xFF50.1
   \   001E   710A50         SET1      0xFF50.0
    265              // Communication operations 
    266              mLDBUART6CommunicationOperations();
   \   0021   711A58         SET1      0xFF58.1
    267          }
   \   0024   AF             RET       
   \   0025                  REQUIRE ?CL78K_V4_6_L00
   \   0025                  REQUIRE _A_ASIM6
   \   0025                  REQUIRE CKSR6
   \   0025                  REQUIRE BRGC6
   \   0025                  REQUIRE _A_ASICL6
    268          
    269          //==============================================================================
    270          // DESCRIPTION :
    271          //
    272          // PARAMETERS (Type,Name,Min,Max) :   none
    273          //
    274          // RETURN VALUE :   none
    275          //
    276          // DESIGN INFORMATION : (pseudo code, algorithm ... )
    277          //==============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    278          static MEM_TYPE void StartOfCommunication(void)
   \                     StartOfCommunication:
    279          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    280              UART6Config();
   \   0000   9A....         CALL      UART6Config
    281          
    282              #ifdef INVERSE_LOGIC
    283              mLDBHarWrite(cLDBHarAlarmOut,0); 
   \   0003   3B01           CLR1      S:0xFF01.3
    284              #else
    285           	mLDBHarWrite(cLDBHarAlarmOut,1);  
    286           	#endif  
    287          
    288              // Start 5ms BreakTime at high level  Start of Communication 
    289              // TimerW - 18ms wait
    290              // select period of 1,024 ms
    291              //QACJ 3109: aangovt: It is not deliberate, ldb_ioc macros are used
    292              mLDBSelectAlarmTimerPeriod();
   \   0005   714A6F         SET1      0xFF6F.4
   \   0008   715A6F         SET1      0xFF6F.5
   \   000B   716B6F         CLR1      0xFF6F.6
    293          
    294              mLDBIntClearIsrRequestFlag(cLDBHarInterruptAlarmTimer);
   \   000E   712BE2         CLR1      0xFFE2.2
    295              mLDBIntEnableIsr(cLDBHarInterruptAlarmTimer);
   \   0011   7B1E           DI
   \   0013   2B..           CLR1      S:LDBIntGroup1+1.2
   \   0015   C8..00         CMP       S:LDBIntLevel,#0
   \   0018   BD03           BNZ       ??LDBIntIsrINTWTI_17
   \   001A   712BE6         CLR1      0xFFE6.2
   \                     ??LDBIntIsrINTWTI_17:
   \   001D   C8..02         CMP       S:LDBIntLevel,#2
   \   0020   AD02           BZ        ??LDBIntIsrINTWTI_18
   \   0022   7A1E           EI
    296              // start alarm timer
    297              mStartAlarmTimer();
   \                     ??LDBIntIsrINTWTI_18:
   \   0024   710A6F         SET1      0xFF6F.0
    298          }
   \   0027   AF             RET       
   \   0028                  REQUIRE ?CL78K_V4_6_L00
   \   0028                  REQUIRE _A_P1
   \   0028                  REQUIRE _A_IF1
   \   0028                  REQUIRE _A_MK1
   \   0028                  REQUIRE _A_WTM
    299          
    300          //==============================================================================
    301          // DESCRIPTION :
    302          //
    303          // PARAMETERS (Type,Name,Min,Max) :   none
    304          //
    305          // RETURN VALUE :   none
    306          //
    307          // DESIGN INFORMATION : (pseudo code, algorithm ... )
    308          //==============================================================================
    309          static void DataTransmission(void)
    310          {
    311              mLIBassert(u8DataPosition < cNbDataPerMessage);
    312              mLIBassert(mGetTransmitBufferDataFlag() == 0);
    313          
    314              mLDBUART6SetTransmitBuffer(Message[u8DataPosition]);
    315              u8DataPosition++;
    316          }
    317          
    318          //==============================================================================
    319          //=========================== EXPORTED FUNCTIONS ===============================
    320          //==============================================================================
    321          
    322          //==============================================================================
    323          // DESCRIPTION :
    324          //
    325          // PARAMETERS (Type,Name,Min,Max) :   none
    326          //
    327          // RETURN VALUE :   none
    328          //
    329          // DESIGN INFORMATION : (pseudo code, algorithm ... )
    330          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    331          void LDBAlaInit(void) 
   \                     LDBAlaInit:
    332          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    333          #ifdef DEBUG
    334              bTransmissionIsActive = cFalse;
    335          #endif
    336              u8AlarmTimerCounter = 0;
   \   0000   A100           MOV       A,#0
   \   0002   9E....         MOV       u8AlarmTimerCounter,A
    337              // port is configured by LDB_DOU
    338          }
   \   0005   AF             RET       
   \   0006                  REQUIRE ?CL78K_V4_6_L00
    339          
    340          
    341          //==============================================================================
    342          // DESCRIPTION :
    343          //
    344          // PARAMETERS (Type,Name,Min,Max) :   none
    345          //
    346          // RETURN VALUE :   none
    347          //
    348          // DESIGN INFORMATION : (pseudo code, algorithm ... )
    349          //==============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    350          MEM_TYPE void LDBAlaSendWithoutAddr(const tMsg * const pMsg )
   \                     LDBAlaSendWithoutAddr:
    351          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
    352              if (pMsg != NULL)
   \   0001   EA0000         CMPW      AX,#0
   \   0004   AD3B           BZ        ??LDBIntIsrINTWTI_19
    353              {
    354                  mLIBmemcpy(Message,pMsg->pBuffer,cNbDataPerMessage);
   \   0006   D6             MOVW      HL,AX
   \   0007   87             MOV       A,[HL]
   \   0008   70             MOV       X,A
   \   0009   AE01           MOV       A,[HL+0x01]
   \   000B   D4             MOVW      DE,AX
   \   000C   16....         MOVW      HL,#Message
   \   000F   A304           MOV       B,#4
   \                     ??LDBAlaSendWithoutAddr_0:
   \   0011   85             MOV       A,[DE]
   \   0012   97             MOV       [HL],A
   \   0013   86             INCW      HL
   \   0014   84             INCW      DE
   \   0015   8BFA           DBNZ      B, ??LDBAlaSendWithoutAddr_0
    355              #ifdef DEBUG
    356                  mLIBassert(bTransmissionIsActive == cFalse);
    357                  bTransmissionIsActive = cTrue;
    358              #endif
    359                  u8EmissionStage = cStartBreakTime;
   \   0017   A100           MOV       A,#0
   \   0019   9E....         MOV       u8EmissionStage,A
    360                  u8AlarmTimerCounter = 0;
   \   001C   9E....         MOV       u8AlarmTimerCounter,A
    361                  u8DataPosition = 0;
   \   001F   9E....         MOV       u8DataPosition,A
    362                  u8MessageNumber = 0;
   \   0022   9E....         MOV       u8MessageNumber,A
    363                  StartOfCommunication();
   \   0025   16....         MOVW      HL,#LWRD(StartOfCommunication)
   \   0028   A4..           MOV       E,#BYTE3(StartOfCommunication)
   \   002A   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
    364           
    365                  // Enable IT 
    366                  mLDBIntClearIsrRequestFlag(cLDBHarInterruptAlarmUartTx);
   \   002B   711BE1         CLR1      0xFFE1.1
    367                  mLDBIntEnableIsr(cLDBHarInterruptAlarmUartTx);
   \   002E   7B1E           DI
   \   0030   1B..           CLR1      S:LDBIntGroup1.1
   \   0032   C8..00         CMP       S:LDBIntLevel,#0
   \   0035   BD03           BNZ       ??LDBIntIsrINTWTI_20
   \   0037   711BE5         CLR1      0xFFE5.1
   \                     ??LDBIntIsrINTWTI_20:
   \   003A   C8..02         CMP       S:LDBIntLevel,#2
   \   003D   AD02           BZ        ??LDBIntIsrINTWTI_19
   \   003F   7A1E           EI
    368              }
    369              else
    370              {
    371                  mLIBassert(cFalse);
    372              }
    373          }
   \                     ??LDBIntIsrINTWTI_19:
   \   0041   B2             POP       BC
   \   0042   AF             RET       
   \   0043                  REQUIRE ?CL78K_V4_6_L00
   \   0043                  REQUIRE _A_IF0
   \   0043                  REQUIRE _A_MK0
    374          
    375          
    376          //==============================================================================
    377          // DESCRIPTION :
    378          //
    379          // PARAMETERS (Type,Name,Min,Max) :   none
    380          //
    381          // RETURN VALUE :   none
    382          //
    383          // DESIGN INFORMATION : (pseudo code, algorithm ... )
    384          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    385          mLDBIntDeclareIsr(cLDBHarInterruptAlarmUartTx)
   \                     LDBIntIsrINTST6:
    386          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B1             PUSH      AX
   \   0001   B3             PUSH      BC
   \   0002   B7             PUSH      HL
   \   0003                  ; Total Auto size: 0
    387              mLDBIntEnterIsr(cLDBHarInterruptAlarmUartTx);
   \   0003   11..01         MOV       S:LDBIntLevel,#1
   \   0006   F4E5           MOV       A,0xFFE5
   \   0008   6D1E           OR        A,#30
   \   000A   F6E5           MOV       0xFFE5,A
   \   000C   F4E6           MOV       A,0xFFE6
   \   000E   6D46           OR        A,#70
   \   0010   F6E6           MOV       0xFFE6,A
   \   0012   7A1E           EI
    388          
    389              mLIBassert(u8EmissionStage == (U8)cDataTransmission);
    390          
    391              if (u8DataPosition >= cNbDataPerMessage)
   \   0014   8E....         MOV       A,u8DataPosition
   \   0017   4D04           CMP       A,#4
   \   0019   8D5F           BC        ??LDBIntIsrINTWTI_0
    392              {
    393                  u8DataPosition = 0;
   \   001B   A100           MOV       A,#0
   \   001D   9E....         MOV       u8DataPosition,A
    394                  u8MessageNumber++;
   \   0020   8E....         MOV       A,u8MessageNumber
   \   0023   41             INC       A
   \   0024   9E....         MOV       u8MessageNumber,A
    395          
    396                  u8EmissionStage = (U8)cBreakTime;
   \   0027   A103           MOV       A,#3
   \   0029   9E....         MOV       u8EmissionStage,A
    397                  u8AlarmTimerCounter = 0;
   \   002C   A100           MOV       A,#0
   \   002E   9E....         MOV       u8AlarmTimerCounter,A
    398          
    399                  if (u8MessageNumber >= cNbMessage)
   \   0031   8E....         MOV       A,u8MessageNumber
   \   0034   4D04           CMP       A,#4
   \   0036   8D1E           BC        ??LDBIntIsrINTWTI_1
    400                  {
    401                      // All messages transmitted
    402                      mLDBIntDisableIsr(cLDBHarInterruptAlarmUartTx);
   \   0038   7B1E           DI
   \   003A   1A..           SET1      S:LDBIntGroup1.1
   \   003C   C8..00         CMP       S:LDBIntLevel,#0
   \   003F   BD03           BNZ       ??LDBIntIsrINTWTI_2
   \   0041   711AE5         SET1      0xFFE5.1
   \                     ??LDBIntIsrINTWTI_2:
   \   0044   C8..02         CMP       S:LDBIntLevel,#2
   \   0047   AD02           BZ        ??LDBIntIsrINTWTI_3
   \   0049   7A1E           EI
    403                      mLDBUART6TransmissionDisable();
   \                     ??LDBIntIsrINTWTI_3:
   \   004B   717B50         CLR1      0xFF50.7
   \   004E   716B50         CLR1      0xFF50.6
   \   0051   710B58         CLR1      0xFF58.0
    404                      // UART disabled, need to set high the output manually
    405                      // Write  high level
    406                      #ifdef INVERSE_LOGIC
    407                      mLDBHarWrite(cLDBHarAlarmOut,0); 
   \   0054   3B01           CLR1      S:0xFF01.3
    408                      #else
    409                      mLDBHarWrite(cLDBHarAlarmOut,1); 
    410                      #endif
    411                  }
    412          
    413                  // TimerW - 5ms wait
    414                  // select period of 1,024 ms
    415                  //QACJ 3109: aangovt: It is not deliberate, ldb_ioc macros are used
    416                  mLDBSelectAlarmTimerPeriod();
   \                     ??LDBIntIsrINTWTI_1:
   \   0056   714A6F         SET1      0xFF6F.4
   \   0059   715A6F         SET1      0xFF6F.5
   \   005C   716B6F         CLR1      0xFF6F.6
    417          
    418                  mLDBIntClearIsrRequestFlag(cLDBHarInterruptAlarmTimer);
   \   005F   712BE2         CLR1      0xFFE2.2
    419                  mLDBIntEnableIsr(cLDBHarInterruptAlarmTimer);
   \   0062   7B1E           DI
   \   0064   2B..           CLR1      S:LDBIntGroup1+1.2
   \   0066   C8..00         CMP       S:LDBIntLevel,#0
   \   0069   BD03           BNZ       ??LDBIntIsrINTWTI_4
   \   006B   712BE6         CLR1      0xFFE6.2
   \                     ??LDBIntIsrINTWTI_4:
   \   006E   C8..02         CMP       S:LDBIntLevel,#2
   \   0071   AD02           BZ        ??LDBIntIsrINTWTI_5
   \   0073   7A1E           EI
    420                  mStartAlarmTimer();
   \                     ??LDBIntIsrINTWTI_5:
   \   0075   710A6F         SET1      0xFF6F.0
   \   0078   FA0E           BR        ??LDBIntIsrINTWTI_6
    421              }
    422              else
    423              {
    424                  DataTransmission();
   \                     ??LDBIntIsrINTWTI_0:
   \   007A   73             MOV       B,A
   \   007B   16....         MOVW      HL,#Message
   \   007E   AB             MOV       A,[HL+B]
   \   007F   F20B           MOV       S:0xFF0B,A
   \   0081   8E....         MOV       A,u8DataPosition
   \   0084   41             INC       A
   \   0085   9E....         MOV       u8DataPosition,A
    425              }
    426              mLDBIntLeaveIsr(cLDBHarInterruptAlarmUartTx);    
   \                     ??LDBIntIsrINTWTI_6:
   \   0088                  REQUIRE ?CL78K_V4_6_L00
   \   0088                  REQUIRE ?Subroutine0
   \   0088                  REQUIRE _A_P1
   \   0088                  REQUIRE _A_ASIM6
   \   0088                  REQUIRE _A_ASICL6
   \   0088                  REQUIRE _A_IF1
   \   0088                  REQUIRE _A_MK0
   \   0088                  REQUIRE _A_MK1
   \   0088                  REQUIRE _A_WTM
   \   0088                  REQUIRE TXB6
   \   0088                  ; // Fall through to label ?Subroutine0
    427          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   0000   7B1E           DI
   \   0002   11..00         MOV       S:LDBIntLevel,#0
   \   0005   F0..           MOV       A,S:LDBIntGroup1
   \   0007   70             MOV       X,A
   \   0008   F4E5           MOV       A,0xFFE5
   \   000A   6158           AND       A,X
   \   000C   F6E5           MOV       0xFFE5,A
   \   000E   F0..           MOV       A,S:LDBIntGroup1+1
   \   0010   70             MOV       X,A
   \   0011   F4E6           MOV       A,0xFFE6
   \   0013   6158           AND       A,X
   \   0015   F6E6           MOV       0xFFE6,A
   \   0017   B6             POP       HL
   \   0018   B2             POP       BC
   \   0019   B0             POP       AX
   \   001A   8F             RETI      
   \   001B                  REQUIRE ?CL78K_V4_6_L00
    428           
    429          //==============================================================================
    430          // DESCRIPTION :
    431          //
    432          // PARAMETERS (Type,Name,Min,Max) :   none
    433          //
    434          // RETURN VALUE :   none
    435          //
    436          // DESIGN INFORMATION : (pseudo code, algorithm ... )
    437          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    438          mLDBIntDeclareIsr(cLDBHarInterruptAlarmTimer)
   \                     LDBIntIsrINTWTI:
    439          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B1             PUSH      AX
   \   0001   B3             PUSH      BC
   \   0002   B7             PUSH      HL
   \   0003                  ; Total Auto size: 0
    440              mLDBIntEnterIsr(cLDBHarInterruptAlarmTimer);
   \   0003   11..01         MOV       S:LDBIntLevel,#1
   \   0006   F4E5           MOV       A,0xFFE5
   \   0008   6D1E           OR        A,#30
   \   000A   F6E5           MOV       0xFFE5,A
   \   000C   F4E6           MOV       A,0xFFE6
   \   000E   6D46           OR        A,#70
   \   0010   F6E6           MOV       0xFFE6,A
   \   0012   7A1E           EI
    441              // count generated interrupts  
    442              u8AlarmTimerCounter++;
   \   0014   8E....         MOV       A,u8AlarmTimerCounter
   \   0017   41             INC       A
   \   0018   9E....         MOV       u8AlarmTimerCounter,A
    443          
    444              mLIBassert(u8AlarmTimerCounter <= cWakeUpHighTimeout); // maximal allowed timeout
    445          
    446              switch (u8EmissionStage)
   \   001B   8E....         MOV       A,u8EmissionStage
   \   001E   4D00           CMP       A,#0
   \   0020   AD0E           BZ        ??LDBIntIsrINTWTI_7
   \   0022   4D01           CMP       A,#1
   \   0024   AD20           BZ        ??LDBIntIsrINTWTI_8
   \   0026   4D02           CMP       A,#2
   \   0028   AD3D           BZ        ??LDBIntIsrINTWTI_9
   \   002A   4D03           CMP       A,#3
   \   002C   AD73           BZ        ??LDBIntIsrINTWTI_10
   \   002E   FA13           BR        ??LDBIntIsrINTWTI_11
    447              {
    448              case (U8)cStartBreakTime:
    449                  if ((U8)cLDBAlaBreakTimeOutInMs <= u8AlarmTimerCounter)
   \                     ??LDBIntIsrINTWTI_7:
   \   0030   8E....         MOV       A,u8AlarmTimerCounter
   \   0033   4D05           CMP       A,#5
   \   0035   8D0C           BC        ??LDBIntIsrINTWTI_11
    450                  {
    451                      // Send wake-up low pattern
    452                      // Write  low level  for 2 ms     
    453                      #ifdef INVERSE_LOGIC
    454                      mLDBHarWrite(cLDBHarAlarmOut,1); 
   \   0037   A101           MOV       A,#1
   \   0039   3A01           SET1      S:0xFF01.3
    455                      #else
    456                      mLDBHarWrite(cLDBHarAlarmOut,0); 
    457                      #endif
    458          
    459                      u8EmissionStage = cWakeUpLowPattern;
   \   003B   9E....         MOV       u8EmissionStage,A
    460                      u8AlarmTimerCounter = 0;
   \   003E   A100           MOV       A,#0
   \   0040   9E....         MOV       u8AlarmTimerCounter,A
    461                  }
    462                  break;
    463              case (U8)cWakeUpLowPattern:
    464                  if ((U8)cWakeUpLowTimeout <= u8AlarmTimerCounter)
    465                  {
    466                      u8EmissionStage = cWakeUpHighPattern;
    467                      u8AlarmTimerCounter = 0;
    468                      // Force the first edge from low to high
    469                      
    470                      // Send WakeUp HighPattern
    471                      //Enable UART transmission here, because transmit data have to  be set to TXB6 
    472                      //at least one base clock (fXCLK6) after setting TXE6 = 1.
    473                      mLDBUART6TransmissionEnable();
    474                      // Write high level for 18 ms - done by UART
    475                  }
    476                  else
    477                  {
    478                      // wait
    479                  }
    480                  break;
    481              case (U8)cWakeUpHighPattern:
    482                  if (cWakeUpHighTimeout <= u8AlarmTimerCounter)
    483                  {
    484                      mLDBIntDisableIsr(cLDBHarInterruptAlarmTimer);
    485                      mStopAlarmTimer(); 
    486                      u8AlarmTimerCounter = 0;
    487                      // Force the data transmission
    488                      u8EmissionStage = cDataTransmission;
    489                      DataTransmission(); // first message
    490                  }
    491                  else
    492                  {
    493                      // wait
    494                  }
    495                  break;
    496              case (U8)cDataTransmission:
    497                  // Check for transmission completion can be implemented here
    498                  break;
    499              case (U8)cBreakTime:
    500                  if ((U8)cLDBAlaBreakTimeOutInMs <= u8AlarmTimerCounter)
    501                  {
    502                      if (u8MessageNumber >= cNbMessage)
    503                      {
    504                          // all four messages of the frame are transmitted
    505                      #ifdef DEBUG
    506                          bTransmissionIsActive = cFalse;
    507                      #endif
    508                          mLDBIntDisableIsr(cLDBHarInterruptAlarmTimer);
    509                          mStopAlarmTimer(); 
    510          
    511                          DATAlaCallBackTxWithoutAddr(cLDBCorrect);
    512                      }
    513                      else
    514                      {
    515                          // Transmit next message
    516                          mLDBIntDisableIsr(cLDBHarInterruptAlarmTimer);
    517                          mStopAlarmTimer(); 
    518                          u8AlarmTimerCounter = 0;
    519                          // Force the data transmission
    520                          u8EmissionStage = cDataTransmission;
    521                          DataTransmission();
    522                      }
    523                  }
    524                  else
    525                  {
    526                      // wait break time
    527                  }
    528                  break;
    529              default:
    530                  mLIBassert(cFalse);
    531              }
    532          
    533              mLDBIntLeaveIsr(cLDBHarInterruptAlarmTimer);
   \                     ??LDBIntIsrINTWTI_11:
   \   0043   9B....         BR        N:?Subroutine0
   \                     ??LDBIntIsrINTWTI_8:
   \   0046   8E....         MOV       A,u8AlarmTimerCounter
   \   0049   4D02           CMP       A,#2
   \   004B   8DF6           BC        ??LDBIntIsrINTWTI_11
   \   004D   A102           MOV       A,#2
   \   004F   9E....         MOV       u8EmissionStage,A
   \   0052   A100           MOV       A,#0
   \   0054   9E....         MOV       u8AlarmTimerCounter,A
   \   0057   717A50         SET1      0xFF50.7
   \   005A   716A50         SET1      0xFF50.6
   \   005D   715B50         CLR1      0xFF50.5
   \   0060   3A01           SET1      S:0xFF01.3
   \   0062   710A58         SET1      0xFF58.0
   \   0065   FADC           BR        ??LDBIntIsrINTWTI_11
   \                     ??LDBIntIsrINTWTI_9:
   \   0067   8E....         MOV       A,u8AlarmTimerCounter
   \   006A   4D12           CMP       A,#18
   \   006C   8DD5           BC        ??LDBIntIsrINTWTI_11
   \                     ??LDBIntIsrINTWTI_12:
   \   006E   7B1E           DI
   \   0070   2A..           SET1      S:LDBIntGroup1+1.2
   \   0072   C8..00         CMP       S:LDBIntLevel,#0
   \   0075   BD03           BNZ       ??LDBIntIsrINTWTI_13
   \   0077   712AE6         SET1      0xFFE6.2
   \                     ??LDBIntIsrINTWTI_13:
   \   007A   C8..02         CMP       S:LDBIntLevel,#2
   \   007D   AD02           BZ        ??LDBIntIsrINTWTI_14
   \   007F   7A1E           EI
   \                     ??LDBIntIsrINTWTI_14:
   \   0081   A100           MOV       A,#0
   \   0083   710B6F         CLR1      0xFF6F.0
   \   0086   9E....         MOV       u8AlarmTimerCounter,A
   \   0089   A104           MOV       A,#4
   \   008B   9E....         MOV       u8EmissionStage,A
   \   008E   8E....         MOV       A,u8DataPosition
   \   0091   73             MOV       B,A
   \   0092   16....         MOVW      HL,#Message
   \   0095   AB             MOV       A,[HL+B]
   \   0096   F20B           MOV       S:0xFF0B,A
   \   0098   8E....         MOV       A,u8DataPosition
   \   009B   41             INC       A
   \   009C   9E....         MOV       u8DataPosition,A
   \   009F   FAA2           BR        ??LDBIntIsrINTWTI_11
   \                     ??LDBIntIsrINTWTI_10:
   \   00A1   8E....         MOV       A,u8AlarmTimerCounter
   \   00A4   4D05           CMP       A,#5
   \   00A6   8D9B           BC        ??LDBIntIsrINTWTI_11
   \   00A8   8E....         MOV       A,u8MessageNumber
   \   00AB   4D04           CMP       A,#4
   \   00AD   8DBF           BC        ??LDBIntIsrINTWTI_12
   \   00AF   7B1E           DI
   \   00B1   2A..           SET1      S:LDBIntGroup1+1.2
   \   00B3   C8..00         CMP       S:LDBIntLevel,#0
   \   00B6   BD03           BNZ       ??LDBIntIsrINTWTI_15
   \   00B8   712AE6         SET1      0xFFE6.2
   \                     ??LDBIntIsrINTWTI_15:
   \   00BB   C8..02         CMP       S:LDBIntLevel,#2
   \   00BE   AD02           BZ        ??LDBIntIsrINTWTI_16
   \   00C0   7A1E           EI
   \                     ??LDBIntIsrINTWTI_16:
   \   00C2   A100           MOV       A,#0
   \   00C4   710B6F         CLR1      0xFF6F.0
   \   00C7   9A....         CALL      DATAlaCallBackTxWithoutAddr
   \   00CA   9B....         BR        N:??LDBIntIsrINTWTI_11
   \   00CD                  REQUIRE ?CL78K_V4_6_L00
   \   00CD                  REQUIRE _A_P1
   \   00CD                  REQUIRE _A_ASIM6
   \   00CD                  REQUIRE _A_ASICL6
   \   00CD                  REQUIRE _A_MK0
   \   00CD                  REQUIRE _A_MK1
   \   00CD                  REQUIRE _A_WTM
   \   00CD                  REQUIRE TXB6
    534          }

   \                                 In  segment INTVEC, offset 0x16, root
   \                     `??LDBIntIsrINTST6??INTVEC 22`:
   \   0016   ....           DW LDBIntIsrINTST6

   \                                 In  segment INTVEC, offset 0x28, root
   \                     `??LDBIntIsrINTWTI??INTVEC 40`:
   \   0028   ....           DW LDBIntIsrINTWTI

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_FAST_CALL_L07:
   \   0000   ....           DW       ?FAR_FAST_CALL_L07

   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     _A_P1                           1
     TXB6                            1
     _A_ASIM6                        1
     CKSR6                           1
     BRGC6                           1
     _A_ASICL6                       1
     _A_WTM                          1
     _A_IF0                          2
     _A_IF1                          2
     _A_MK0                          2
     _A_MK1                          2
     Message                         4
     u8EmissionStage                 1
     u8DataPosition                  1
     u8MessageNumber                 1
     u8AlarmTimerCounter             1
     UART6Config                    37
     StartOfCommunication           40
     LDBAlaInit                      6
     LDBAlaSendWithoutAddr          67
     LDBIntIsrINTST6               136
     ?Subroutine0                   27
     LDBIntIsrINTWTI               205
     ??LDBIntIsrINTST6??INTVEC 22    2
     ??LDBIntIsrINTWTI??INTVEC 40    2
     __T_?FAR_FAST_CALL_L07          2

 
 107 bytes in segment BCODE
   2 bytes in segment CLTVEC
 411 bytes in segment CODE
   4 bytes in segment INTVEC
  13 bytes in segment NEAR_A
   8 bytes in segment NEAR_Z
   2 bytes in segment SADDR_A
 
 518 bytes of CODE memory (+  6 bytes shared)
   8 bytes of DATA memory (+ 15 bytes shared)

Errors: none
Warnings: none
