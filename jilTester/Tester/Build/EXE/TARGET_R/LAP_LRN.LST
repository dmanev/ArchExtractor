###############################################################################
#                                                                             #
# IAR C/C++ Compiler V4.61A/W32 for 78K0 and 78K0S      15/Feb/2011  13:27:29 #
# Copyright 1992-2008 IAR Systems AB.                                         #
#                                                                             #
#    Core         =  78k0                                                     #
#    Code model   =  Standard                                                 #
#                 =                                                           #
#    Source file  =  D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\LAP\L #
#                    AP_LRN.C                                                 #
#    Command line =  --code_model standard --core 78k0 -e                     #
#                    -DMEM_TYPE=__banked -DMEM_FAST=__saddr                   #
#                    -DCALLT_TYPE=__callt -DX90_PROJECT                       #
#                    --generate_callt_runtime_library_calls -Ohs              #
#                    "-IC:\Program Files\IAR Systems\Embedded Workbench       #
#                    5.0\78k\inc" "-IC:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.0\78k\inc\clib" -I. -I..\EXE\GEN\            #
#                    -I..\SOURCES\DAT -I..\SOURCES\LAP -I..\SOURCES\LDB_API   #
#                    -I..\SOURCES\LIB -I..\SOURCES\TOS -I.\LDB -DROM          #
#                    -DUSE_LIBSTK -DDONT_KEEP_OLD_TYPE_COMPATIBILITY -l       #
#                    ..\EXE\TARGET_R\LAP_LRN.LST -o                           #
#                    ..\EXE\TARGET_R\LAP_LRN.R26                              #
#                    D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\LAP\L #
#                    AP_LRN.C                                                 #
#    List file    =  ..\EXE\TARGET_R\LAP_LRN.LST                              #
#    Object file  =  ..\EXE\TARGET_R\LAP_LRN.R26                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\LAP\LAP_LRN.C
      1          //*****************************************************************************
      2          // Company:      Johnson Controls Inc.
      3          // ----------------------------------------------------------------------------
      4          // Copyright:    This software is JCI property.
      5          //               Duplication or disclosure without JCI written authorization
      6          //               is prohibited.
      7          // ----------------------------------------------------------------------------
      8          // Project:      X90_BCM
      9          // Language:     ANSI-C
     10          // ----------------------------------------------------------------------------
     11          // Component:    LAP_LRN
     12          // ----------------------------------------------------------------------------
     13          // $Date:   Mar 31 2010 11:24:24  $
     14          // $Archive:   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/LAP/LRN/LAP_LRN.c-arc  $
     15          // $Revision:   1.36  $
     16          // ----------------------------------------------------------------------------  
     17          //
     18          //  $Log::   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/LAP/LRN/LAP_LRN.c-arc  $
     19          // 
     20          //    Rev 1.36   Mar 31 2010 11:24:24   amanevd
     21          // Cm006328: COD_ERR_AP set to 0 in function LRNKeyAlreadyLaerned()
     22          // 
     23          //    Rev 1.35   Mar 09 2010 17:37:42   amanevd
     24          // Cm006814: Code review corrections
     25          // 
     26          //    Rev 1.34   Mar 02 2010 10:40:42   adzhelp
     27          // Cm006814: N_MISE_APC normalized
     28          // 
     29          //    Rev 1.33   Feb 11 2010 17:27:30   amanevd
     30          // Cm006997: Implementation of recent prsFS_IMMO-675 and prsFS_IMMO-676
     31          // 
     32          //    Rev 1.32   Feb 08 2010 09:28:18   amanevd
     33          // Cm006744: Perform 32-bit math operations only when values are changed
     34          // 
     35          //    Rev 1.31   Jan 29 2010 18:06:36   amanevd
     36          // Cm007043 & Cm007116: AfterSaleModeValidationAuthorized is set 1 when entering in AFS Key replacement mode
     37          // 
     38          //    Rev 1.30   Jan 21 2010 10:14:06   amanevd
     39          // Cm006999: On unsuccessful pairing in BCM replacement mode the learning mode should
     40          // not be quit
     41          // 
     42          //    Rev 1.29   Jan 21 2010 08:33:52   amanevd
     43          // Cm006997: prsFS_IMMO-675 and prsFS_IMMO-676 put back to initial condition
     44          // 
     45          //    Rev 1.28   Jan 20 2010 12:23:40   amanevd
     46          // Cm007003: cde_eff_code_recu set to 1 on end of BCM replacement mode
     47          // 
     48          //    Rev 1.27   Jan 20 2010 12:01:50   amanevd
     49          // Cm007078: RA-bancs-BCM-53 implementation
     50          // 
     51          //    Rev 1.26   Jan 19 2010 17:05:42   amanevd
     52          // Cm006886: Update of prsFS_IMMO-938 implemented
     53          // 
     54          //    Rev 1.25   Nov 20 2009 11:47:50   amanevd
     55          // Cm006589: LRNStartLearningInAfterSaleMode updated to enable exiting  BCM replacement mode with parameter "Validate"
     56          // 
     57          //    Rev 1.24   Nov 20 2009 10:02:04   amanevd
     58          // Cm005198: FactoryModeAuthorized conditions changed
     59          // 
     60          //    Rev 1.23   Nov 05 2009 18:42:12   amanevd
     61          // Cm006588: COD_ERR_AP is updated to 0x00 on diag request for entering in learning mode
     62          // 
     63          //    Rev 1.22   Oct 06 2009 16:23:52   adzhelp
     64          // Cm006317: Function moved to banked area
     65          // 
     66          //    Rev 1.21   Oct 01 2009 15:09:08   amanevd
     67          // Cm006317: Even if BCM is not blank, authorize Plant Learning while AFS Code is available
     68          // 
     69          //    Rev 1.20   Oct 01 2009 13:59:50   amanevd
     70          // Cm006298: In LRNUpdateLearningAuthorizationConditions
     71          // setting the signal FactoryModeAuthorized to 0 when PWR_IGN==1 is removed
     72          // 
     73          //    Rev 1.19   Oct 01 2009 11:01:42   amanevd
     74          // Cm005587: In case of AFS key reassignment mode successful pairing COD_ERR_APP is set 1
     75          // 
     76          //    Rev 1.18   Oct 01 2009 10:31:30   amanevd
     77          // Cm006325: Verlog LED now blinks at 2Hz in Plant mode for already learnt key
     78          // 
     79          //    Rev 1.17   Sep 30 2009 18:08:24   amanevd
     80          // Cm006328: 'COD_ERR_AP' set to 00h in Plant mode for already learnt key
     81          // 
     82          //    Rev 1.16   Sep 18 2009 15:33:16   amanevd
     83          // Cm005198: EEP_AppCleNonEffect is managed as required in prsFS_IMMO-678, prsFS_IMMO-938 and prsFS_IMMO-992
     84          // 
     85          //    Rev 1.15   Aug 28 2009 15:17:28   amanevd
     86          // Cm005142: Code review corrections
     87          // 
     88          //    Rev 1.14   Aug 07 2009 18:09:48   amanevd
     89          // Cm005142: Implementation of Confidential Diagnostic
     90          // 
     91          //    Rev 1.13   Jul 28 2009 11:49:38   amanevd
     92          // Cm005565: Check for exit from learning conditions included on PWR_IGN==1
     93          // 
     94          //    Rev 1.12   Jul 27 2009 18:16:40   amanevd
     95          // Cm005186: BCM Replacement time measurement starts on sending successful diagnostic request
     96          // 
     97          //    Rev 1.11   Jul 23 2009 13:41:48   amanevd
     98          // Cm005526: 'LearningModeInProgress' is updated immediately on exiting learning mode
     99          // 
    100          //    Rev 1.10   Jul 22 2009 13:41:22   amanevd
    101          // Cm005191: N_MISE_APC parameter is now taken into account on fly on
    102          // 
    103          //    Rev 1.9   Jul 17 2009 10:53:02   amanevd
    104          // Cm004914: AFS code is either erased on Routine request or after Ignition counting reaches N_MISE_APC
    105          // 
    106          //    Rev 1.8   Jul 14 2009 17:18:36   amanevd
    107          // Cm005586: Updating of signal KeyFrequency removed
    108          // 
    109          //    Rev 1.7   May 21 2009 12:24:18   amanevd
    110          // Cm003272 - CCover justification - NO IMPACT ON REAL CODE
    111          // 
    112          //    Rev 1.6   May 07 2009 10:51:54   amanevd
    113          // Cm003272 - Finishing part 2 - pre-integration
    114          // 
    115          //    Rev 1.5   Apr 29 2009 13:14:20   amanevd
    116          // Cm003272 - Intermediate part 3 
    117          // - PRS compliance
    118          // 
    119          //    Rev 1.4   Apr 22 2009 19:23:50   amanevd
    120          // Cm003272 - Finishing part 1 - pre-integration
    121          // 
    122          //    Rev 1.3   Feb 26 2009 16:33:22   amanevd
    123          // Cm003272 - replace(Booleen to BOOL)
    124          // 
    125          //    Rev 1.2   Feb 13 2009 14:52:12   amanevd
    126          // Cm003272 - Intermediate part 1 - PRS compliance
    127          // 
    128          //    Rev 1.1   Feb 04 2009 13:29:48   amanevd
    129          // Cm003272 - Intermediate part 1
    130          // - PRS compliance
    131          // 
    132          //    Rev 1.0   Jan 09 2009 14:21:00   amanevd
    133          // Initial revision.
    134          //*****************************************************************************
    135          
    136          //-----------------------------------------------------------------------------
    137          //  Body Identification
    138          //-----------------------------------------------------------------------------
    139          
    140          #define LAP_LRN  "LAP_LRN"
    141          
    142          //-----------------------------------------------------------------------------
    143          //  Included files
    144          //
    145          //  #include <system_file_name.h>
    146          //  #include "project_file_name.h"
    147          //-----------------------------------------------------------------------------
    148          #include "tos.h"
    149          #include "lib.h"
    150          #include "lib_rnd.h"
    151          #include "dat.h"
    152          #include "LAP_LRN.h"
    153          #include "LAP_LRN.hgr"

   \                                 In  segment CONST, align 2
   \   tTOSSeqRuleType const __near LRNManageLearningService[104]
   \                     LRNManageLearningService:
   \   0000   ........       DW LRNIgnitionON, TOSSeqNoAction
   \   0004   FF01           DB 255, 1
   \   0006   ........       DW LRNEnterFactoryMode, LRNAuthenticationWithTransportISK
   \   000A   4202           DB 66, 2
   \   000C   ........       DW LRNAuthenticationOK, LRNMemoTransponderType
   \   0010   3C03           DB 60, 3
   \   0012   ........       DW LRNKeyIsLocked, LRNPutImmobilizerAntennaInSleepMode
   \   0016   0604           DB 6, 4
   \   0018   ........       DW LRNSleepModeFinished, LRNLearningModeNotSuccess
   \   001C   FF05           DB 255, 5
   \   001E   ........       DW LRNIgnitionOFF, LRNUpdateDiagData
   \   0022   FF00           DB 255, 0
   \   0024   ........       DW LRNKeyOKforLearning, LRNCalculateTranspCodes
   \   0028   3907           DB 57, 7
   \   002A   ........       DW TOSSeqTrueEval, LRNAuthenticationWithTransportISK
   \   002E   FF08           DB 255, 8
   \   0030   ........       DW LRNAuthenticationOK, TOSSeqNoAction
   \   0034   3809           DB 56, 9
   \   0036   ........       DW LRNKeyTypeWithRF, LRNWriteRSKLowIntoTransponder
   \   003A   370A           DB 55, 10
   \   003C   ........       DW LRNWritingFinishedOK, LRNWriteRSKHighIntoTransponder
   \   0040   350B           DB 53, 11
   \   0042   ........       DW LRNWritingRSKFinishedOK, LRNResynchronizeTransponder
   \   0046   330C           DB 51, 12
   \   0048   ........       DW LRNResynchroFinishedOK, LRNWriteISKLowIntoTransponder
   \   004C   310D           DB 49, 13
   \   004E   ........       DW LRNWritingFinishedOK, LRNWriteISKHighIntoTransponder
   \   0052   2A0E           DB 42, 14
   \   0054   ........       DW LRNWritingISKFinishedOK, LRNPutImmobilizerAntennaInSleepMode
   \   0058   230F           DB 35, 15
   \   005A   ........       DW LRNSleepModeOK, LRNAuthenticationWithCalculateISK
   \   005E   2210           DB 34, 16
   \   0060   ........       DW LRNAfterSaleTimeoutElapsed, LRNFactoryModeAuthentNewISKNOK
   \   0064   1211           DB 18, 17
   \   0066   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   006A   FF04           DB 255, 4
   \   006C   ........       DW LRNAuthenticationOK, TOSSeqNoAction
   \   0070   1E13           DB 30, 19
   \   0072   ........       DW LRNLockingTrpIsAuthorized, LRNLockingTransponder
   \   0076   1514           DB 21, 20
   \   0078   ........       DW LRNWritingFinishedOK, LRNKeyLockedForEver
   \   007C   1C15           DB 28, 21
   \   007E   ........       DW LRNFactoryModeInProgress, LRNWriteInEepromTransponderCodes
   \   0082   1A16           DB 26, 22
   \   0084   ........       DW LRNWritingInEepromFinishedOK, LRNPutImmobilizerAntennaInSleepMode
   \   0088   1817           DB 24, 23
   \   008A   ........       DW LRNSleepModeFinished, LRNLearningModeSuccess
   \   008E   FF05           DB 255, 5
   \   0090   ........       DW LRNWritingInEepromFinishedNOK, LRNEepromWritingError
   \   0094   FF19           DB 255, 25
   \   0096   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   009A   FF04           DB 255, 4
   \   009C   ........       DW TOSSeqTrueEval, LRNMemoriseNewTransp
   \   00A0   FF1B           DB 255, 27
   \   00A2   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   00A6   FF17           DB 255, 23
   \   00A8   ........       DW LRNWritingFinishedNOK, LRNLockingTransponderError
   \   00AC   FF1D           DB 255, 29
   \   00AE   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   00B2   FF04           DB 255, 4
   \   00B4   ........       DW LRNAuthenticationNOK, LRNAuthenticationWithCalculateISK
   \   00B8   FF1F           DB 255, 31
   \   00BA   ........       DW LRNAuthenticationOK, TOSSeqNoAction
   \   00BE   2013           DB 32, 19
   \   00C0   ........       DW LRNAuthenticationNOK, LRNFactoryModeAuthentNewISKNOK
   \   00C4   FF21           DB 255, 33
   \   00C6   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   00CA   FF04           DB 255, 4
   \   00CC   ........       DW LRNSleepModeNOK, LRNPutImmobilizerAntennaInSleepMode
   \   00D0   FF04           DB 255, 4
   \   00D2   ........       DW LRNWritingFinishedNOK, TOSSeqNoAction
   \   00D6   FF24           DB 255, 36
   \   00D8   ........       DW LRNAuthenticationNOK, LRNAuthenticationWithCalculatedISKHigh
   \   00DC   2825           DB 40, 37
   \   00DE   ........       DW LRNAuthenticationOK, TOSSeqNoAction
   \   00E2   2613           DB 38, 19
   \   00E4   ........       DW LRNAuthenticationNOK, LRNISKWritingError
   \   00E8   FF27           DB 255, 39
   \   00EA   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   00EE   FF04           DB 255, 4
   \   00F0   ........       DW TOSSeqTrueEval, LRNISKWritingError
   \   00F4   FF29           DB 255, 41
   \   00F6   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   00FA   FF04           DB 255, 4
   \   00FC   ........       DW LRNWritingFinishedNOK, TOSSeqNoAction
   \   0100   FF2B           DB 255, 43
   \   0102   ........       DW LRNAuthenticationNOK, LRNAuthenticationWithCalculatedISKLow
   \   0106   2F2C           DB 47, 44
   \   0108   ........       DW LRNAuthenticationOK, LRNWriteISKHighIntoTransponder
   \   010C   2D0E           DB 45, 14
   \   010E   ........       DW LRNAuthenticationNOK, LRNISKWritingError
   \   0112   FF2E           DB 255, 46
   \   0114   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   0118   FF04           DB 255, 4
   \   011A   ........       DW TOSSeqTrueEval, LRNISKWritingError
   \   011E   FF30           DB 255, 48
   \   0120   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   0124   FF04           DB 255, 4
   \   0126   ........       DW LRNResynchroFinishedNOK, LRNResynchroErrorAction
   \   012A   FF32           DB 255, 50
   \   012C   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   0130   FF04           DB 255, 4
   \   0132   ........       DW LRNWritingFinishedNOK, LRNWriteRSKErrorAction
   \   0136   FF34           DB 255, 52
   \   0138   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   013C   FF04           DB 255, 4
   \   013E   ........       DW LRNWritingFinishedNOK, LRNWriteRSKErrorAction
   \   0142   FF36           DB 255, 54
   \   0144   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   0148   FF04           DB 255, 4
   \   014A   ........       DW TOSSeqTrueEval, LRNWriteISKLowIntoTransponder
   \   014E   FF0D           DB 255, 13
   \   0150   ........       DW LRNAuthenticationNOK, LRNPutImmobilizerAntennaInSleepMode
   \   0154   FF04           DB 255, 4
   \   0156   ........       DW TOSSeqTrueEval, LRNSelectRemoteConfigBlockForRFKey
   \   015A   FF3A           DB 255, 58
   \   015C   ........       DW LRNWritingFinishedOK, LRNCalculateTranspCodes
   \   0160   3B07           DB 59, 7
   \   0162   ........       DW LRNWritingFinishedNOK, LRNPutImmobilizerAntennaInSleepMode
   \   0166   FF04           DB 255, 4
   \   0168   ........       DW LRNAuthenticationNOK, TOSSeqNoAction
   \   016C   FF3D           DB 255, 61
   \   016E   ........       DW LRNKeyAlreadyLearned, LRNAuthenticationWithCalculateISK
   \   0172   413E           DB 65, 62
   \   0174   ........       DW LRNAuthenticationOK, LRNKeyAlreadyLaerned
   \   0178   403F           DB 64, 63
   \   017A   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   017E   FF04           DB 255, 4
   \   0180   ........       DW LRNAuthenticationNOK, LRNKeyNotBlank
   \   0184   FF3F           DB 255, 63
   \   0186   ........       DW TOSSeqTrueEval, LRNKeyNotBlank
   \   018A   FF3F           DB 255, 63
   \   018C   ........       DW LRNEnterAfterSaleBCMReplacementMode, LRNCalculateISKandAuthenticate
   \   0190   5143           DB 81, 67
   \   0192   ........       DW LRNAuthenticationOK, LRNMemoTransponderType
   \   0196   4F44           DB 79, 68
   \   0198   ........       DW TOSSeqTrueEval, LRNCalculateCodesInAfterSaleMode
   \   019C   FF45           DB 255, 69
   \   019E   ........       DW LRNKeyTypeWithRF, LRNAuthentWithCorrectISK
   \   01A2   4E46           DB 78, 70
   \   01A4   ........       DW LRNAuthenticationOK, LRNResynchronizeTransponder
   \   01A8   4D47           DB 77, 71
   \   01AA   ........       DW LRNResynchroFinishedOK, LRNWriteInEepromFirstTransponderCodes
   \   01AE   4B48           DB 75, 72
   \   01B0   ........       DW LRNWritingInEepromFinishedOK, LRNPutImmobilizerAntennaInSleepMode
   \   01B4   4917           DB 73, 23
   \   01B6   ........       DW LRNWritingInEepromFinishedNOK, LRNEepromWritingError
   \   01BA   FF4A           DB 255, 74
   \   01BC   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   01C0   FF04           DB 255, 4
   \   01C2   ........       DW LRNResynchroFinishedNOK, LRNBcmReplacementResyncNOK
   \   01C6   FF4C           DB 255, 76
   \   01C8   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   01CC   FF04           DB 255, 4
   \   01CE   ........       DW LRNAuthenticationNOK, LRNPutImmobilizerAntennaInSleepMode
   \   01D2   FF04           DB 255, 4
   \   01D4   ........       DW TOSSeqTrueEval, LRNWriteInEepromFirstTransponderCodes
   \   01D8   FF48           DB 255, 72
   \   01DA   ........       DW LRNAuthenticationNOK, LRNBCMReplacementAuthentError
   \   01DE   FF50           DB 255, 80
   \   01E0   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   01E4   FF04           DB 255, 4
   \   01E6   ........       DW LRNEnterAfterSaleKeyReassigmentMode, TOSSeqNoAction
   \   01EA   6752           DB 103, 82
   \   01EC   ........       DW LRNReassignmentCannotBeDone, LRNLearningModeNotSuccess
   \   01F0   5305           DB 83, 5
   \   01F2   ........       DW TOSSeqTrueEval, LRNAuthenticationWithCarISK
   \   01F6   FF54           DB 255, 84
   \   01F8   ........       DW LRNAuthenticationOK, TOSSeqNoAction
   \   01FC   6655           DB 102, 85
   \   01FE   ........       DW LRNKeyNotAlreadyRelearnt, TOSSeqNoAction
   \   0202   6556           DB 101, 86
   \   0204   ........       DW LRNKeyKnownByBCM, TOSSeqNoAction
   \   0208   5C57           DB 92, 87
   \   020A   ........       DW LRNKeyTypeWithRF, LRNResynchronizeTransponder
   \   020E   5B58           DB 91, 88
   \   0210   ........       DW LRNResynchroFinishedOK, LRNMemorizeTranspAlreadyKnown
   \   0214   5A59           DB 90, 89
   \   0216   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   021A   FF17           DB 255, 23
   \   021C   ........       DW LRNResynchroFinishedNOK, LRNPutImmobilizerAntennaInSleepMode
   \   0220   FF04           DB 255, 4
   \   0222   ........       DW TOSSeqTrueEval, LRNMemorizeTranspAlreadyKnown
   \   0226   FF59           DB 255, 89
   \   0228   ........       DW TOSSeqTrueEval, LRNMemoTransponderType
   \   022C   FF5D           DB 255, 93
   \   022E   ........       DW TOSSeqTrueEval, LRNCalculateTranspCodes
   \   0232   FF5E           DB 255, 94
   \   0234   ........       DW LRNKeyTypeWithRF, LRNAuthenticationWithCarISK
   \   0238   645F           DB 100, 95
   \   023A   ........       DW LRNAuthenticationOK, LRNResynchronizeTransponder
   \   023E   6360           DB 99, 96
   \   0240   ........       DW LRNResynchroFinishedOK, LRNMemoriseNewTransp
   \   0244   6261           DB 98, 97
   \   0246   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   024A   FF17           DB 255, 23
   \   024C   ........       DW LRNResynchroFinishedNOK, LRNPutImmobilizerAntennaInSleepMode
   \   0250   FF04           DB 255, 4
   \   0252   ........       DW LRNAuthenticationNOK, LRNPutImmobilizerAntennaInSleepMode
   \   0256   FF04           DB 255, 4
   \   0258   ........       DW TOSSeqTrueEval, LRNMemoriseNewTransp
   \   025C   FF61           DB 255, 97
   \   025E   ........       DW TOSSeqTrueEval, LRNPutImmobilizerAntennaInSleepMode
   \   0262   FF04           DB 255, 4
   \   0264   ........       DW LRNAuthenticationNOK, LRNAuthenticationWithTransportISK
   \   0268   FF02           DB 255, 2
   \   026A   ........       DW TOSSeqTrueEval, TOSSeqNoAction
   \   026E   FF05           DB 255, 5

   \                                 In  segment CONST, align 2
   \   tTOSSeqRuleType const __near LRNUpdateLearningAuthorization[1]
   \                     LRNUpdateLearningAuthorization:
   \   0000   ........       DW TOSSeqTrueEval, LRNUpdateLearningAuthorizationConditions
   \   0004   FF00           DB 255, 0
    154          
    155          
    156          //-----------------------------------------------------------------------------
    157          //  Local constants
    158          //
    159          //  #define cConstantName   ((tType) ConstantValue)
    160          //-----------------------------------------------------------------------------
    161          
    162          // definitions of useful masks
    163          #define cValueBitBStoOne        ((U32) 0x08000000UL)
    164          #define cLockRFKey              ((U32) 0xF8000000UL)
    165          #define cLockNonRFKey           ((U32) 0xF8000000UL)
    166          #define cPutBitBStoZero         ((U32) 0xF7FFFFFFUL)
    167          #define cMaskKeep24Bits         ((U32) 0x00FFFFFFUL)
    168          
    169          #define cPage0                  ((U8) 0)
    170          #define cPage1                  ((U8) 1)
    171          #define cPage2                  ((U8) 2)
    172          #define cPage3                  ((U8) 3)
    173          #define cPage4                  ((U8) 4)
    174          #define cPage5                  ((U8) 5)
    175          #define cPage6                  ((U8) 6)
    176          
    177          #define cCodeError0h            ((U8) 0x00U)
    178          #define cCodeError1h            ((U8) 0x01U)
    179          #define cCodeError2h            ((U8) 0x02U)
    180          #define cCodeError11h           ((U8) 0x11U)
    181          #define cCodeError12h           ((U8) 0x12U)
    182          #define cCodeError13h           ((U8) 0x13U)
    183          #define cCodeError14h           ((U8) 0x14U)
    184          #define cCodeError15h           ((U8) 0x15U)
    185          #define cCodeError16h           ((U8) 0x16U)
    186          #define cCodeError17h           ((U8) 0x17U)
    187          #define cCodeError18h           ((U8) 0x18U)
    188          #define cCodeError19h           ((U8) 0x19U)
    189          #define cCodeErrorA1h           ((U8) 0xA1U)
    190          #define cCodeErrorA2h           ((U8) 0xA2U)
    191          #define cCodeErrorB2h           ((U8) 0xB2U)
    192          #define cCodeErrorB3h           ((U8) 0xB3U)
    193          #define cCodeErrorB4h           ((U8) 0xB4U)
    194          #define cCodeErrorB5h           ((U8) 0xB5U)
    195          #define cCodeErrorB6h           ((U8) 0xB6U)
    196          #define cCodeErrorB7h           ((U8) 0xB7U)
    197          
    198          // amanevd: QAC expects 32 bit word, we are using 8 bit word.
    199          // It is useless to define 4 times bigger constants just to
    200          // make QAC to shut up.
    201          #ifndef _QAC_
    202          #define cSKIndex0               ((U8) 0)
    203          #define cSKIndex1               ((U8) 1)
    204          #define cSKIndex2               ((U8) 2)
    205          #define cSKIndex3               ((U8) 3)
    206          #define cSKIndex4               ((U8) 4)
    207          #define cSKIndex5               ((U8) 5)
    208          #define cSKIndex6               ((U8) 6)
    209          #else
    210          #define cSKIndex0               ((U32) 0)
    211          #define cSKIndex1               ((U32) 1)
    212          #define cSKIndex2               ((U32) 2)
    213          #define cSKIndex3               ((U32) 3)
    214          #define cSKIndex4               ((U32) 4)
    215          #define cSKIndex5               ((U32) 5)
    216          #define cSKIndex6               ((U32) 6)
    217          #endif
    218          
    219          #define cNoLearning               ((U8) 0)
    220          #define cFactoryMode              ((U8) 1)
    221          #define cBcmReplacement           ((U8) 2)
    222          #define cKeyReassignment          ((U8) 3)
    223          
    224          // amanevd: 'Neg' constants make QAC to shut up. Must update them
    225          // every time you update the original constant !!!
    226          #define cExitFactoryMode         ((U8) 0x01U)
    227          #define cNegExitFactoryMode      ((U8) 0xFEU)
    228          #define cGiveUpAfterSaleMode     ((U8) 0x02U)
    229          #define cNegGiveUpAfterSaleMode  ((U8) 0xFDU)
    230          #define cLearningValidation      ((U8) 0x04U)
    231          #define cNegLearningValidation   ((U8) 0xFBU)
    232          
    233          #define cFactoryModeMaxKeysToLearn    ((U8) 0x02U)
    234          
    235          // amanevd: QAC expects 32 bit word, we are using 8 bit word
    236          #ifndef _QAC_
    237          #define cShiftBy8   ((U8) 8)
    238          #define cShiftBy16  ((U8) 16)
    239          #define cShiftBy24  ((U8) 24)
    240          #else
    241          #define cShiftBy8   ((U32) 8)
    242          #define cShiftBy16  ((U32) 16)
    243          #define cShiftBy24  ((U32) 24)
    244          #endif
    245          
    246          #define cKeyNumber1 ((U8)0)
    247          #define cKeyNumber2 ((U8)1)
    248          #define cKeyNumber3 ((U8)2)
    249          #define cKeyNumber4 ((U8)3)
    250          
    251          #define cU8Max      ((U8)0xFFU)
    252          
    253          //-----------------------------------------------------------------------------
    254          //  Local macros
    255          //
    256          //  #define mMacroName   (MacroDefinition)
    257          //-----------------------------------------------------------------------------
    258          #define mSetExitFactoryModeRequested()    (u8AprFlag |= cExitFactoryMode)
    259          #define mClearExitFactoryModeRequested()  (u8AprFlag &= cNegExitFactoryMode)
    260          #define mExitFactoryModeRequestedIsOn()   ((u8AprFlag & cExitFactoryMode) != 0)
    261          #define mExitFactoryModeRequestedIsOff()  ((u8AprFlag & cExitFactoryMode) == 0)
    262          
    263          #define mSetGiveUpAfterSaleModeRequested()   (u8AprFlag |= cGiveUpAfterSaleMode)
    264          #define mClearGiveUpAfterSaleModeRequested() (u8AprFlag &= cNegGiveUpAfterSaleMode)
    265          #define mGiveUpAfterSaleModeRequestedIsOn()  ((u8AprFlag & cGiveUpAfterSaleMode) != 0)
    266          #define mGiveUpAfterSaleModeRequestedIsOff() ((u8AprFlag & cGiveUpAfterSaleMode) == 0)
    267          
    268          #define mSetLearningValidation()   (u8AprFlag |= cLearningValidation)
    269          #define mClearLearningValidation() (u8AprFlag &= cNegLearningValidation)
    270          #define mLearningValidationIsOn()  ((u8AprFlag & cLearningValidation) != 0)
    271          #define mLearningValidationIsOff() ((u8AprFlag & cLearningValidation) == 0)
    272          
    273          //QACJ 3443:amanevd: Last instance of mDATRead(cTimeOutMERA -> mDATRead -> mDATRead2 -> [mDATRead]) is a concatenation of mDATRead ## DataType## DataName ## TreatmentType()
    274          #define mCalcPlantModeTimeOut() (mTOSConvMsInTimerTick((U32)(u8tmp_app_cle = mDATRead(U8Bit, EEP_tmp_app_cle, Default))*(U32)1000UL))
    275          
    276          #define mPlantModeTimeOut()     (CalculatedTmp_app_cle = \
    277                                              (u8tmp_app_cle == mDATRead(U8Bit, EEP_tmp_app_cle, Default)) \
    278                                              ? CalculatedTmp_app_cle \
    279              /*//QACJ 3443:amanevd: Last instance of mDATRead(cTimeOutMERA -> mDATRead -> mDATRead2 -> [mDATRead]) is a concatenation of mDATRead ## DataType## DataName ## TreatmentType()*/ \
    280                                              : mCalcPlantModeTimeOut())
    281          
    282          //QACJ 3443:amanevd: Last instance of mDATRead(cTimeOutMERA -> mDATRead -> mDATRead2 -> [mDATRead]) is a concatenation of mDATRead ## DataType## DataName ## TreatmentType()
    283          #define mCalcAfterSaleTimeOut() (mTOSConvMsInTimerTick((U32)(u8timeout_app_cle = mDATRead(U8Bit, EEP_timeout_app_cle, Default))*(U32)60000UL))
    284          
    285          #define mAfterSaleTimeOut() (CalculatedTimeout_app_cle = \
    286                                          (u8timeout_app_cle == mDATRead(U8Bit, EEP_timeout_app_cle, Default)) \
    287                                          ? CalculatedTimeout_app_cle \
    288              /*//QACJ 3443:amanevd: Last instance of mDATRead(cTimeOutMERA -> mDATRead -> mDATRead2 -> [mDATRead]) is a concatenation of mDATRead ## DataType## DataName ## TreatmentType()*/ \
    289                                          : mCalcAfterSaleTimeOut())
    290          
    291          //-----------------------------------------------------------------------------
    292          //  Local types
    293          //
    294          //  struct  sStructureName { ... };
    295          //  union   uUnionName { ... };
    296          //  enum    eEnumerationName { ... };
    297          //  typedef Expression tTypeName;
    298          //-----------------------------------------------------------------------------
    299          typedef struct sLowHighSKType
    300          {
    301              U32  SKLow;
    302              U16  SKHigh;
    303          } sLowHighSK;
    304          
    305          typedef union uSecretKeyType
    306          //QACJ 0750:amanevd: Union is used to optimize memory and cpu usage
    307          {  
    308              sLowHighSK  SK;
    309              U8          SecretKey[cDATTrpISKLengthInBytes];
    310          } uSecretKey;
    311          
    312          typedef U8 tKeyType;
    313          //-----------------------------------------------------------------------------
    314          //  Local data
    315          //
    316          //  static  tType   VariableName;
    317          //  static  tType*  pVariableName; 
    318          //-----------------------------------------------------------------------------
    319          // Timer used to manage after sale mode time out

   \                                 In  segment NEAR_Z, align 2, align-sorted
    320          static tTOSTimer    AfterSaleTimer;
   \                     AfterSaleTimer:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    321          static tTOSTimer    PlantModeTimer;
   \                     PlantModeTimer:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    322          static tTOSTimer    CalculatedTmp_app_cle;
   \                     CalculatedTmp_app_cle:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    323          static tTOSTimer    CalculatedTimeout_app_cle;
   \                     CalculatedTimeout_app_cle:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z
    324          

   \                                 In  segment NEAR_Z, align 2, align-sorted
    325          static U32  u32TrpIdentifierReceived;
   \                     u32TrpIdentifierReceived:
   \   0000                  DS 4
   \   0004                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    326          static U32  u32TrpConfigAndPassWordTag;
   \                     u32TrpConfigAndPassWordTag:
   \   0000                  DS 4
   \   0004                  REQUIRE __INIT_NEAR_Z
    327          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    328          static U8   ImmobilizerSecretKey[cDATTrpISKLengthInBytes];
   \                     ImmobilizerSecretKey:
   \   0000                  DS 6
   \   0006                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    329          static U8   RemoteSecretKey[cDATTrpISKLengthInBytes];
   \                     RemoteSecretKey:
   \   0000                  DS 6
   \   0006                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    330          static U8   AfterSaleCode[cDATTrpISKLengthInBytes];
   \                     AfterSaleCode:
   \   0000                  DS 6
   \   0006                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    331          static U16  u16SKey;
   \                     u16SKey:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z
    332          

   \                                 In  segment NEAR_Z, align 2, align-sorted
    333          static U32          TableOfKeyIdentifierReassigned[cDATTrpMaxNumberOfKey];
   \                     TableOfKeyIdentifierReassigned:
   \   0000                  DS 16
   \   0010                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    334          static U32          TableOfPassWordTagReassigned[cDATTrpMaxNumberOfKey];
   \                     TableOfPassWordTagReassigned:
   \   0000                  DS 16
   \   0010                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    335          static uSecretKey   TableOfRemoteSecretKeyReassigned[cDATTrpMaxNumberOfKey];
   \                     TableOfRemoteSecretKeyReassigned:
   \   0000                  DS 24
   \   0018                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    336          static U32          TableOfResynchroValueReassigned[cDATTrpMaxNumberOfKey];
   \                     TableOfResynchroValueReassigned:
   \   0000                  DS 16
   \   0010                  REQUIRE __INIT_NEAR_Z
    337          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    338          static U8   u8LearningMode;
   \                     u8LearningMode:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    339          static U8   u8AprFlag;
   \                     u8AprFlag:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    340          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    341          static U8   u8tmp_app_cle;
   \                     u8tmp_app_cle:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    342          static U8   u8timeout_app_cle;
   \                     u8timeout_app_cle:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    343          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    344          static BOOL   bKeyAlreadyLearned;
   \                     bKeyAlreadyLearned:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    345          
    346          //-----------------------------------------------------------------------------
    347          //  Constant local data
    348          //
    349          //  static const tType  VariableName;
    350          //-----------------------------------------------------------------------------
    351          
    352          
    353          //-----------------------------------------------------------------------------
    354          //  Exported data
    355          //
    356          //  tType   LAYCmpVariableName;   (LAY: 3 characters to identify the layer)
    357          //  tType*  pLAYCmpVariableName;  (Cmp: 3 characters to identify this component)
    358          //-----------------------------------------------------------------------------
    359          
    360          
    361          //-----------------------------------------------------------------------------
    362          //  Constant exported data
    363          //
    364          //              (LAY: 3 characters to identify the layer)
    365          //              (Cmp: 3 characters to identify this component)
    366          // 
    367          //  const tType   LAYCmpVariableName;
    368          //-----------------------------------------------------------------------------
    369          
    370          
    371          //-----------------------------------------------------------------------------
    372          //  Local function prototypes
    373          //  
    374          //  static tTypeRetour FunctionName(tTypeArgument1 ArgumentName1, ... );
    375          //-----------------------------------------------------------------------------
    376          static MEM_TYPE void MemorizeKeyFrequencyCounter(void);
    377          static MEM_TYPE void WriteRSKInEeprom(const tKeyType u8IndexKeyP, const U8* const pu8RSKP);
    378          static MEM_TYPE void CheckExitConditions(void);
    379                     
    380          #ifdef X90_PROJECT
    381          static MEM_TYPE void LRNLearningModeSuccess_Static(void);
    382          static MEM_TYPE void LRNCalculateTranspCodes_Static(void);
    383          static MEM_TYPE void LRNWriteISKHighIntoTransponder_Static(void);
    384          static MEM_TYPE void LRNWriteRSKErrorAction_Static(void);
    385          static MEM_TYPE void LRNWriteISKLowIntoTransponder_Static(void);
    386          static MEM_TYPE void LRNAuthenticationWithCalculateISK_Static(void);
    387          static MEM_TYPE void LRNResynchroErrorAction_Static(void);
    388          static MEM_TYPE void LRNWriteInEepromTransponderCodes_Static(void);
    389          static MEM_TYPE void LRNCalculateCodesInAfterSaleMode_Static(void);
    390          static MEM_TYPE void LRNWriteInEepromFirstTransponderCodes_Static(void);
    391          static MEM_TYPE void LRNMemorizeTranspAlreadyKnown_Static(void);
    392          static MEM_TYPE void LRNMemoriseNewTransp_Static(void);
    393          static MEM_TYPE BOOL LRNIgnitionON_Static(void);
    394          static MEM_TYPE void LRNLearningModeNotSuccess_Static(void);
    395          static MEM_TYPE void LRNStartLearningInAfterSaleMode_Static(void);
    396          static MEM_TYPE void LRNValidateLearningInAfterSaleMode_Static(void);
    397          static MEM_TYPE void LRNUpdateLearningAuthorizationConditions_Static(void);
    398          static MEM_TYPE void LRNStartLearningInFactoryMode_Static(void);
    399          static MEM_TYPE void LRNAuthenticationWithTransportISK_Static(void);
    400          static MEM_TYPE void LRNMemoTransponderType_Static(void);
    401          static MEM_TYPE void LRNSelectRemoteConfigBlockForRFKey_Static(void);
    402          static MEM_TYPE void LRNWriteRSKHighIntoTransponder_Static(void);
    403          static MEM_TYPE void LRNWriteRSKLowIntoTransponder_Static(void);
    404          static MEM_TYPE void LRNFactoryModeAuthentNewISKNOK_Static(void);
    405          static MEM_TYPE void LRNLockingTransponder_Static(void);
    406          static MEM_TYPE BOOL LRNWritingInEepromFinishedNOK_Static(void);
    407          static MEM_TYPE void LRNCalculateISKandAuthenticate_Static(void);
    408          static MEM_TYPE void LRNAuthenticationWithCarISK_Static(void);
    409          static MEM_TYPE BOOL LRNEnterAfterSaleBCMReplacementMode_Static(void);
    410          static MEM_TYPE BOOL LRNEnterAfterSaleKeyReassigmentMode_Static(void);
    411          static MEM_TYPE BOOL LRNEnterFactoryMode_Static(void);
    412          static MEM_TYPE void LRNUpdateDiagData_Static(void);
    413          static MEM_TYPE void LRNAuthenticationWithCalculatedISKHigh_Static(void);
    414          static MEM_TYPE void LRNAuthenticationWithCalculatedISKLow_Static(void);
    415          static MEM_TYPE BOOL LRNKeyAlreadyLearned_Static(void);
    416          static MEM_TYPE BOOL LRNKeyNotAlreadyRelearnt_Static(void);
    417          #endif
    418          
    419          //=============================================================================
    420          //=========================== LOCAL FUNCTIONS =================================
    421          //=============================================================================
    422          
    423          //=============================================================================
    424          //  DESCRIPTION :
    425          //  
    426          //  PARAMETERS (Type,Name,Min,Max) :   none
    427          //
    428          //  RETURN VALUE :   none
    429          // 
    430          //  DESIGN INFORMATION :   refer to Detailed Design Document
    431          //=============================================================================
    432          //static type FunctionName(...)
    433          
    434          //=============================================================================
    435          //  DESCRIPTION : Memorize the key frequency counter
    436          //  
    437          //  PARAMETERS (Type,Name,Min,Max) :  none
    438          //
    439          //  RETURN VALUE :   none
    440          // 
    441          //  DESIGN INFORMATION :   refer to Detailed Design Document
    442          //=============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    443          static MEM_TYPE void MemorizeKeyFrequencyCounter(void)
   \                     MemorizeKeyFrequencyCounter:
    444          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    445              U8 u8KeyCounterL;
    446          
    447              switch (mDATRead(U8Bit, DATTrpFrequencyOfPresentKey, Default))
   \   0000   8E....         MOV       A,DatTrpExportData+39
   \   0003   4D00           CMP       A,#0
   \   0005   AD19           BZ        ??LRNFactoryModeInProgress_0
   \   0007   4D10           CMP       A,#16
   \   0009   AD05           BZ        ??LRNFactoryModeInProgress_1
   \   000B   4D30           CMP       A,#48
   \   000D   AD09           BZ        ??LRNFactoryModeInProgress_2
   \   000F   AF             RET       
    448              {
    449                  case cDATTrpKey315Mhz:
    450                  u8KeyCounterL = mDATRead(U8Bit, NumberOfKeys315MHzLearnt, Default);
    451                  mDATWrite(U8Bit, NumberOfKeys315MHzLearnt, (u8KeyCounterL + 1), Default);
   \                     ??LRNFactoryModeInProgress_1:
   \   0010   8E....         MOV       A,DATCmnImmoData+14
   \   0013   41             INC       A
   \   0014   9E....         MOV       DATCmnImmoData+14,A
   \   0017   AF             RET       
    452                  break;
    453          
    454                  case cDATTrpKey315MhzSmall:
    455                  u8KeyCounterL = mDATRead(U8Bit, NumberOfKeys315MHzSmallLearnt, Default);
    456                  mDATWrite(U8Bit, NumberOfKeys315MHzSmallLearnt, (u8KeyCounterL + 1), Default);
   \                     ??LRNFactoryModeInProgress_2:
   \   0018   8E....         MOV       A,DATCmnImmoData+15
   \   001B   41             INC       A
   \   001C   9E....         MOV       DATCmnImmoData+15,A
   \   001F   AF             RET       
    457                  break;
    458          
    459                  case cDATTrpKey433Mhz:
    460                  u8KeyCounterL = mDATRead(U8Bit, NumberOfKeys433MHzLearnt, Default);
    461                  mDATWrite(U8Bit, NumberOfKeys433MHzLearnt, (u8KeyCounterL + 1), Default);
   \                     ??LRNFactoryModeInProgress_0:
   \   0020   8E....         MOV       A,DATCmnImmoData+16
   \   0023   41             INC       A
   \   0024   9E....         MOV       DATCmnImmoData+16,A
    462                  break;
    463          
    464                  //CCOV: amanevd: Cannot be covered because this default case rises explicit assert
    465                  default:
    466                  mLIBassert(cFalse);
    467                  break;
    468              }
    469          }
   \   0027   AF             RET       
   \   0028                  REQUIRE ?CL78K_V4_6_L00
    470          
    471          //=============================================================================
    472          //  DESCRIPTION : Write RSK in EEPROM
    473          //  
    474          //  PARAMETERS (Type,Name,Min,Max) : U8 u8IndexKeyP
    475          //                                   U8* pu8RSKP
    476          //
    477          //  RETURN VALUE :   none
    478          // 
    479          //  DESIGN INFORMATION :   refer to Detailed Design Document
    480          //=============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    481          static MEM_TYPE void WriteRSKInEeprom(const tKeyType u8IndexKeyP, const U8* const pu8RSKP)
   \                     WriteRSKInEeprom:
    482          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 2
   \   0000   B7             PUSH      HL
   \   0001   B3             PUSH      BC
   \   0002   B4             POP       DE
    483              U8 u8IndexL;
    484          
    485              mLIBassert(NULL != pu8RSKP);
    486          
    487              switch(u8IndexKeyP)
   \   0003   4D00           CMP       A,#0
   \   0005   AD12           BZ        ??LRNFactoryModeInProgress_3
   \   0007   4D01           CMP       A,#1
   \   0009   AD46           BZ        ??LRNFactoryModeInProgress_4
   \   000B   4D02           CMP       A,#2
   \   000D   AD77           BZ        ??LRNFactoryModeInProgress_5
   \   000F   4D03           CMP       A,#3
   \   0011   BD03           BNZ       $+5
   \   0013   9B....         BR        N:??LRNFactoryModeInProgress_6
   \   0016   9B....         BR        N:??LRNFactoryModeInProgress_7
    488              {
    489                  case cKeyNumber1:
    490                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_3:
   \   0019   12....         MOVW      BC,#DATDbkMirrors
   \   001C   891C           MOVW      AX,SP
   \   001E   D6             MOVW      HL,AX
   \   001F   A106           MOV       A,#6
   \   0021   97             MOV       [HL],A
    491                  {
    492                      //QACJ 0506:amanevd: Function is called in two points with static argument in place of pu8RSKP. For any case pointer is checked in debug mode.
    493                      mDATWriteTable(U8Bit, EEP_RemoteSecretKey1, u8IndexL, pu8RSKP[u8IndexL], Default);
   \                     ??WriteRSKInEeprom_0:
   \   0022   85             MOV       A,[DE]
   \   0023   70             MOV       X,A
   \   0024   B3             PUSH      BC
   \   0025   B6             POP       HL
   \   0026   E6             XCHW      AX,HL
   \   0027   CA7000         ADDW      AX,#112
   \   002A   E6             XCHW      AX,HL
   \   002B   87             MOV       A,[HL]
   \   002C   6148           CMP       A,X
   \   002E   AD0E           BZ        ??LRNFactoryModeInProgress_8
   \   0030   85             MOV       A,[DE]
   \   0031   B3             PUSH      BC
   \   0032   B6             POP       HL
   \   0033   E6             XCHW      AX,HL
   \   0034   CA7000         ADDW      AX,#112
   \   0037   E6             XCHW      AX,HL
   \   0038   97             MOV       [HL],A
   \   0039   A103           MOV       A,#3
   \   003B   9A....         CALL      DATDbkStartUpdate
    494                  }
   \                     ??LRNFactoryModeInProgress_8:
   \   003E   84             INCW      DE
   \   003F   B3             PUSH      BC
   \   0040   B6             POP       HL
   \   0041   86             INCW      HL
   \   0042   B7             PUSH      HL
   \   0043   B2             POP       BC
   \   0044   891C           MOVW      AX,SP
   \   0046   D6             MOVW      HL,AX
   \   0047   87             MOV       A,[HL]
   \   0048   51             DEC       A
   \   0049   97             MOV       [HL],A
   \   004A   BD03           BNZ       $+5
   \   004C   9B....         BR        N:??LRNFactoryModeInProgress_7
   \   004F   FAD1           BR        ??WriteRSKInEeprom_0
    495                  break;
    496          
    497                  case cKeyNumber2:
    498                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_4:
   \   0051   12....         MOVW      BC,#DATDbkMirrors
   \   0054   891C           MOVW      AX,SP
   \   0056   D6             MOVW      HL,AX
   \   0057   A106           MOV       A,#6
   \   0059   97             MOV       [HL],A
    499                  {
    500                      mDATWriteTable(U8Bit, EEP_RemoteSecretKey2, u8IndexL, pu8RSKP[u8IndexL], Default);
   \                     ??WriteRSKInEeprom_1:
   \   005A   85             MOV       A,[DE]
   \   005B   70             MOV       X,A
   \   005C   B3             PUSH      BC
   \   005D   B6             POP       HL
   \   005E   E6             XCHW      AX,HL
   \   005F   CA7600         ADDW      AX,#118
   \   0062   E6             XCHW      AX,HL
   \   0063   87             MOV       A,[HL]
   \   0064   6148           CMP       A,X
   \   0066   AD0E           BZ        ??LRNFactoryModeInProgress_9
   \   0068   85             MOV       A,[DE]
   \   0069   B3             PUSH      BC
   \   006A   B6             POP       HL
   \   006B   E6             XCHW      AX,HL
   \   006C   CA7600         ADDW      AX,#118
   \   006F   E6             XCHW      AX,HL
   \   0070   97             MOV       [HL],A
   \   0071   A103           MOV       A,#3
   \   0073   9A....         CALL      DATDbkStartUpdate
    501                  }
   \                     ??LRNFactoryModeInProgress_9:
   \   0076   84             INCW      DE
   \   0077   B3             PUSH      BC
   \   0078   B6             POP       HL
   \   0079   86             INCW      HL
   \   007A   B7             PUSH      HL
   \   007B   B2             POP       BC
   \   007C   891C           MOVW      AX,SP
   \   007E   D6             MOVW      HL,AX
   \   007F   87             MOV       A,[HL]
   \   0080   51             DEC       A
   \   0081   97             MOV       [HL],A
   \   0082   AD6A           BZ        ??LRNFactoryModeInProgress_7
   \   0084   FAD4           BR        ??WriteRSKInEeprom_1
    502                  break;
    503          
    504                  case cKeyNumber3:
    505                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_5:
   \   0086   12....         MOVW      BC,#DATDbkMirrors
   \   0089   891C           MOVW      AX,SP
   \   008B   D6             MOVW      HL,AX
   \   008C   A106           MOV       A,#6
   \   008E   97             MOV       [HL],A
    506                  {
    507                      mDATWriteTable(U8Bit, EEP_RemoteSecretKey3, u8IndexL, pu8RSKP[u8IndexL], Default);
   \                     ??WriteRSKInEeprom_2:
   \   008F   85             MOV       A,[DE]
   \   0090   70             MOV       X,A
   \   0091   B3             PUSH      BC
   \   0092   B6             POP       HL
   \   0093   E6             XCHW      AX,HL
   \   0094   CA7C00         ADDW      AX,#124
   \   0097   E6             XCHW      AX,HL
   \   0098   87             MOV       A,[HL]
   \   0099   6148           CMP       A,X
   \   009B   AD0E           BZ        ??LRNFactoryModeInProgress_10
   \   009D   85             MOV       A,[DE]
   \   009E   B3             PUSH      BC
   \   009F   B6             POP       HL
   \   00A0   E6             XCHW      AX,HL
   \   00A1   CA7C00         ADDW      AX,#124
   \   00A4   E6             XCHW      AX,HL
   \   00A5   97             MOV       [HL],A
   \   00A6   A103           MOV       A,#3
   \   00A8   9A....         CALL      DATDbkStartUpdate
    508                  }
   \                     ??LRNFactoryModeInProgress_10:
   \   00AB   84             INCW      DE
   \   00AC   B3             PUSH      BC
   \   00AD   B6             POP       HL
   \   00AE   86             INCW      HL
   \   00AF   B7             PUSH      HL
   \   00B0   B2             POP       BC
   \   00B1   891C           MOVW      AX,SP
   \   00B3   D6             MOVW      HL,AX
   \   00B4   87             MOV       A,[HL]
   \   00B5   51             DEC       A
   \   00B6   97             MOV       [HL],A
   \   00B7   AD35           BZ        ??LRNFactoryModeInProgress_7
   \   00B9   FAD4           BR        ??WriteRSKInEeprom_2
    509                  break;
    510          
    511                  case cKeyNumber4:
    512                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_6:
   \   00BB   12....         MOVW      BC,#DATDbkMirrors
   \   00BE   891C           MOVW      AX,SP
   \   00C0   D6             MOVW      HL,AX
   \   00C1   A106           MOV       A,#6
   \   00C3   97             MOV       [HL],A
    513                  {
    514                      mDATWriteTable(U8Bit, EEP_RemoteSecretKey4, u8IndexL, pu8RSKP[u8IndexL], Default);
   \                     ??WriteRSKInEeprom_3:
   \   00C4   85             MOV       A,[DE]
   \   00C5   70             MOV       X,A
   \   00C6   B3             PUSH      BC
   \   00C7   B6             POP       HL
   \   00C8   E6             XCHW      AX,HL
   \   00C9   CA8200         ADDW      AX,#130
   \   00CC   E6             XCHW      AX,HL
   \   00CD   87             MOV       A,[HL]
   \   00CE   6148           CMP       A,X
   \   00D0   AD0E           BZ        ??LRNFactoryModeInProgress_11
   \   00D2   85             MOV       A,[DE]
   \   00D3   B3             PUSH      BC
   \   00D4   B6             POP       HL
   \   00D5   E6             XCHW      AX,HL
   \   00D6   CA8200         ADDW      AX,#130
   \   00D9   E6             XCHW      AX,HL
   \   00DA   97             MOV       [HL],A
   \   00DB   A103           MOV       A,#3
   \   00DD   9A....         CALL      DATDbkStartUpdate
    515                  }
   \                     ??LRNFactoryModeInProgress_11:
   \   00E0   84             INCW      DE
   \   00E1   B3             PUSH      BC
   \   00E2   B6             POP       HL
   \   00E3   86             INCW      HL
   \   00E4   B7             PUSH      HL
   \   00E5   B2             POP       BC
   \   00E6   891C           MOVW      AX,SP
   \   00E8   D6             MOVW      HL,AX
   \   00E9   87             MOV       A,[HL]
   \   00EA   51             DEC       A
   \   00EB   97             MOV       [HL],A
   \   00EC   BDD6           BNZ       ??WriteRSKInEeprom_3
    516                  break;
    517          
    518                  //CCOV: amanevd: Cannot be covered because this default case rises explicit assert
    519                  default:
    520                  mLIBassert(cFalse);
    521                  break;
    522              }
    523          }
   \                     ??LRNFactoryModeInProgress_7:
   \   00EE   B0             POP       AX
   \   00EF   AF             RET       
   \   00F0                  REQUIRE ?CL78K_V4_6_L00
    524          //=============================================================================
    525          //  DESCRIPTION : Check Exit Conditions
    526          //  
    527          //  PARAMETERS (Type,Name,Min,Max) : 
    528          //
    529          //  RETURN VALUE :   none
    530          // 
    531          //  DESIGN INFORMATION :   refer to Detailed Design Document
    532          //=============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    533          static MEM_TYPE void CheckExitConditions(void)
   \                     CheckExitConditions:
    534          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   10....         MOVW      AX,#AfterSaleTimer
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
    535              BOOL bTimerStatusL;
    536              tTOSTimer   TempTimer;
    537          
    538              bTimerStatusL = TOSIsTimerStarted(&AfterSaleTimer);
   \   0004   9A....         CALL      TOSIsTimerStarted
   \   0007   70             MOV       X,A
    539              if(cFalse != bTimerStatusL)
   \   0008   4D00           CMP       A,#0
   \   000A   AD33           BZ        ??LRNFactoryModeInProgress_12
    540              {
    541                  //QACJ 3226: amanevd: This is intentional and is checked out for problems.
    542                  TempTimer = mAfterSaleTimeOut();
   \   000C   8E....         MOV       A,u8timeout_app_cle
   \   000F   48....         CMP       A,DATDbkMirrors+64
   \   0012   BD05           BNZ       ??LRNFactoryModeInProgress_13
   \   0014   02....         MOVW      AX,CalculatedTimeout_app_cle
   \   0017   FA1D           BR        ??LRNFactoryModeInProgress_14
   \                     ??LRNFactoryModeInProgress_13:
   \   0019   8E....         MOV       A,DATDbkMirrors+64
   \   001C   9E....         MOV       u8timeout_app_cle,A
   \   001F   100000         MOVW      AX,#0
   \   0022   B1             PUSH      AX
   \   0023   A00A           MOV       X,#10
   \   0025   B1             PUSH      AX
   \   0026   70             MOV       X,A
   \   0027   B1             PUSH      AX
   \   0028   1060EA         MOVW      AX,#60000
   \   002B   B1             PUSH      AX
   \   002C   8E....         MOV       A,u8timeout_app_cle
   \   002F   120000         MOVW      BC,#0
   \   0032   70             MOV       X,A
   \   0033   63             MOV       A,B
   \   0034   ..             CALLT     [__T_?L_MUL_L03]
   \   0035   ..             CALLT     [__T_?UL_DIV_L03]
   \                     ??LRNFactoryModeInProgress_14:
   \   0036   03....         MOVW      CalculatedTimeout_app_cle,AX
    543                  bTimerStatusL = TOSIsTimerElapsed(&AfterSaleTimer, TempTimer);
   \   0039   D2             MOVW      BC,AX
   \   003A   10....         MOVW      AX,#AfterSaleTimer
   \   003D   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   003E   70             MOV       X,A
    544              }
    545          
    546              if ((((u8LearningMode == cBcmReplacement) 
    547                  || (u8LearningMode == cKeyReassignment))  
    548                  && (bTimerStatusL != cFalse))
    549                  || mExitFactoryModeRequestedIsOn()
    550                  || mGiveUpAfterSaleModeRequestedIsOn())
   \                     ??LRNFactoryModeInProgress_12:
   \   003F   8E....         MOV       A,u8LearningMode
   \   0042   4D02           CMP       A,#2
   \   0044   AD04           BZ        ??LRNFactoryModeInProgress_15
   \   0046   4D03           CMP       A,#3
   \   0048   BD05           BNZ       ??LRNFactoryModeInProgress_16
   \                     ??LRNFactoryModeInProgress_15:
   \   004A   60             MOV       A,X
   \   004B   4D00           CMP       A,#0
   \   004D   BD07           BNZ       ??LRNFactoryModeInProgress_17
   \                     ??LRNFactoryModeInProgress_16:
   \   004F   8E....         MOV       A,u8AprFlag
   \   0052   5D03           AND       A,#3
   \   0054   AD16           BZ        ??LRNFactoryModeInProgress_18
    551              {
    552                  mClearExitFactoryModeRequested();
    553                  mClearGiveUpAfterSaleModeRequested();
    554                  mClearExitFactoryModeRequested();
   \                     ??LRNFactoryModeInProgress_17:
   \   0056   8E....         MOV       A,u8AprFlag
   \   0059   5DFC           AND       A,#252
   \   005B   9E....         MOV       u8AprFlag,A
    555          
    556                  u8LearningMode = cNoLearning;
   \   005E   A100           MOV       A,#0
   \   0060   9E....         MOV       u8LearningMode,A
    557                  mDATWrite(U8Bit, LearningModeInProgress, cDATNoLearningMode, Default);
   \   0063   16....         MOVW      HL,#DATCmnImmoData+17
   \   0066   97             MOV       [HL],A
    558                  mDATWrite(U1Bit, DATTrpKeyLearningElapsed, 1, Default);
   \   0067   16....         MOVW      HL,#DatTrpExportData+51
   \   006A   71C2           SET1      [HL].4
    559              }
    560          }
   \                     ??LRNFactoryModeInProgress_18:
   \   006C   B2             POP       BC
   \   006D   AF             RET       
   \   006E                  REQUIRE ?CL78K_V4_6_L00
    561          
    562          //=============================================================================
    563          //============================ EXPORTED FUNCTIONS =============================
    564          //=============================================================================
    565          
    566          //*****************************************************************************
    567          //  DESCRIPTION : Initialize Learning component.
    568          //  
    569          //  PARAMETERS (Type,Name,Min,Max) :  none
    570          //
    571          //  RETURN VALUE :  none
    572          // 
    573          //  DESIGN INFORMATION :  refer to Detailed Design Document
    574          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    575          void LRNInitialize(void)
   \                     LRNInitialize:
    576          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    577              u8LearningMode = cNoLearning;
   \   0000   A100           MOV       A,#0
   \   0002   9E....         MOV       u8LearningMode,A
    578          
    579              bKeyAlreadyLearned = cFalse;
   \   0005   9E....         MOV       bKeyAlreadyLearned,A
    580              mClearExitFactoryModeRequested();
    581              mClearGiveUpAfterSaleModeRequested();
    582              mClearLearningValidation();
   \   0008   8E....         MOV       A,u8AprFlag
   \   000B   5DF8           AND       A,#248
   \   000D   9E....         MOV       u8AprFlag,A
    583          }
   \   0010   AF             RET       
   \   0011                  REQUIRE ?CL78K_V4_6_L00
    584          //*****************************************************************************
    585          //  DESCRIPTION : Active learning component.
    586          //  
    587          //  PARAMETERS (Type,Name,Min,Max) :  none
    588          //
    589          //  RETURN VALUE :  none
    590          // 
    591          //  DESIGN INFORMATION :  refer to Detailed Design Document
    592          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    593          void LRNEnterActiveState(void)
   \                     LRNEnterActiveState:
    594          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    595              TOSSeqActivateGraph(cTOSSeqGraphIdLRNManageLearningService);
   \   0000   A126           MOV       A,#38
   \   0002   ..             CALLT     [__T_TOSSeqActivateGraph]
    596              TOSSeqActivateGraph(cTOSSeqGraphIdLRNUpdateLearningAuthorization);
   \   0003   A125           MOV       A,#37
   \   0005   ..             CALLT     [__T_TOSSeqActivateGraph]
    597          }
   \   0006   AF             RET       
   \   0007                  REQUIRE ?CL78K_V4_6_L00
    598          //*****************************************************************************
    599          //  DESCRIPTION : Stop learning component.
    600          //  
    601          //  PARAMETERS (Type,Name,Min,Max) :  none
    602          //
    603          //  RETURN VALUE :  none
    604          // 
    605          //  DESIGN INFORMATION :  refer to Detailed Design Document
    606          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    607          void LRNLeaveActiveState(void)
   \                     LRNLeaveActiveState:
    608          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    609              TOSSeqDeactivateGraph(cTOSSeqGraphIdLRNManageLearningService);
   \   0000   A126           MOV       A,#38
   \   0002   ..             CALLT     [__T_TOSSeqDeactivateGraph]
    610              TOSSeqDeactivateGraph(cTOSSeqGraphIdLRNUpdateLearningAuthorization);
   \   0003   A125           MOV       A,#37
   \   0005   ..             CALLT     [__T_TOSSeqDeactivateGraph]
    611          }
   \   0006   AF             RET       
   \   0007                  REQUIRE ?CL78K_V4_6_L00
    612          //*****************************************************************************
    613          //  DESCRIPTION : Start the service learning in factory mode.
    614          //  
    615          //  PARAMETERS (Type,Name,Min,Max) :  none
    616          //
    617          //  RETURN VALUE :  none
    618          // 
    619          //  DESIGN INFORMATION :  refer to Detailed Design Document
    620          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    621          void LRNStartLearningInFactoryMode(void)
   \                     LRNStartLearningInFactoryMode:
    622          { 
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    623          #ifdef X90_PROJECT
    624              LRNStartLearningInFactoryMode_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNStartLearningInFactoryMode_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNStartLearningInFactoryMode_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    625          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    626          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    627          static MEM_TYPE void LRNStartLearningInFactoryMode_Static(void)
   \                     LRNStartLearningInFactoryMode_Static:
    628          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    629          #endif
    630          
    631              mDATWrite(U1Bit, FactoryModeAuthorized, 0, Default);
   \   0000   A100           MOV       A,#0
   \   0002   9E....         MOV       DATCmnImmoData,A
    632              mDATWrite(U1Bit, AfterSaleModeAuthorized, 0, Default);
   \   0005   9E....         MOV       DATCmnImmoData+1,A
    633          
    634              mClearExitFactoryModeRequested();
   \   0008   A101           MOV       A,#1
   \   000A   16....         MOVW      HL,#u8AprFlag
   \   000D   7183           CLR1      [HL].0
    635          
    636              u8LearningMode = cFactoryMode;
   \   000F   9E....         MOV       u8LearningMode,A
    637          
    638              mDATWrite(U8Bit, COD_ERR_APP, cCodeError0h, Default);
   \   0012   A100           MOV       A,#0
   \   0014   16....         MOVW      HL,#DATCmnImmoData+22
   \   0017   97             MOV       [HL],A
    639              mDATWrite(U8Bit, LearningModeInProgress, cDATFactoryMode, Default);
   \   0018   A101           MOV       A,#1
   \   001A   16....         MOVW      HL,#DATCmnImmoData+17
   \   001D   97             MOV       [HL],A
    640          }
   \   001E   AF             RET       
   \   001F                  REQUIRE ?CL78K_V4_6_L00
    641          //*****************************************************************************
    642          //  DESCRIPTION : Stop factory mode service.
    643          //  
    644          //  PARAMETERS (Type,Name,Min,Max) :  none
    645          //
    646          //  RETURN VALUE :  none
    647          // 
    648          //  DESIGN INFORMATION :  refer to Detailed Design Document
    649          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    650          void LRNExitFromLearningInFactoryMode(void)
   \                     LRNExitFromLearningInFactoryMode:
    651          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    652              mSetExitFactoryModeRequested();
   \   0000   16....         MOVW      HL,#u8AprFlag
   \   0003   7182           SET1      [HL].0
    653          }
   \   0005   AF             RET       
   \   0006                  REQUIRE ?CL78K_V4_6_L00
    654          //*****************************************************************************
    655          //  DESCRIPTION : Start an authentication with the transport ISK.
    656          //  
    657          //  PARAMETERS (Type,Name,Min,Max) :  none
    658          //
    659          //  RETURN VALUE :  none
    660          // 
    661          //  DESIGN INFORMATION :  refer to Detailed Design Document
    662          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    663          void LRNAuthenticationWithTransportISK(void)
   \                     LRNAuthenticationWithTransportISK:
    664          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    665          #ifdef X90_PROJECT
    666              LRNAuthenticationWithTransportISK_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNAuthenticationWithTransportISK_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNAuthenticationWithTransportISK_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    667          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    668          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    669          static MEM_TYPE void LRNAuthenticationWithTransportISK_Static(void)
   \                     LRNAuthenticationWithTransportISK_Static:
    670          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
    671          #endif
    672          
    673              U8 u8IndexL;
    674          
    675              for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0001   14....         MOVW      DE,#DatTrpExportData
   \   0004   12....         MOVW      BC,#DATTrpTransportISK
   \   0007   A006           MOV       X,#6
    676              {
    677                  mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, mDATReadTable(U8Bit, DATTrpTransportISK, u8IndexL, Default), Default);
   \                     ??LRNAuthenticationWithTransportISK_Static_0:
   \   0009   B3             PUSH      BC
   \   000A   B6             POP       HL
   \   000B   87             MOV       A,[HL]
   \   000C   B5             PUSH      DE
   \   000D   B6             POP       HL
   \   000E   E6             XCHW      AX,HL
   \   000F   CA2000         ADDW      AX,#32
   \   0012   E6             XCHW      AX,HL
   \   0013   97             MOV       [HL],A
    678              }
   \   0014   B3             PUSH      BC
   \   0015   B6             POP       HL
   \   0016   86             INCW      HL
   \   0017   B7             PUSH      HL
   \   0018   B2             POP       BC
   \   0019   84             INCW      DE
   \   001A   50             DEC       X
   \   001B   BDEC           BNZ       ??LRNAuthenticationWithTransportISK_Static_0
    679          
    680              mDATWrite(U1Bit, DATTrpAuthentInLearningMode, 1, Default);
   \   001D   A103           MOV       A,#3
   \   001F   16....         MOVW      HL,#DatTrpExportData+50
   \   0022   7182           SET1      [HL].0
    681              mDATControl(Trp, cDATTrpAuthenticate);
   \   0024   ..             CALLT     [__T_DATTrpControl]
    682          }
   \   0025   B2             POP       BC
   \   0026   AF             RET       
   \   0027                  REQUIRE ?CL78K_V4_6_L00
    683          
    684          //*****************************************************************************
    685          //  DESCRIPTION : Action if key inserted is not blank
    686          //  
    687          //  PARAMETERS (Type,Name,Min,Max) :  none
    688          //
    689          //  RETURN VALUE :  none
    690          // 
    691          //  DESIGN INFORMATION :  refer to Detailed Design Document
    692          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    693          void LRNKeyNotBlank(void)
   \                     LRNKeyNotBlank:
    694          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    695              if (u8LearningMode == cFactoryMode)
   \   0000   8E....         MOV       A,u8LearningMode
   \   0003   51             DEC       A
   \   0004   BD04           BNZ       ??LRNFactoryModeInProgress_140
    696              {
    697                  mDATWrite(U8Bit, COD_ERR_APP, cCodeError11h, Default);
   \   0006   A111           MOV       A,#17
   \   0008   FA02           BR        ??LRNFactoryModeInProgress_141
    698              }
    699              else // if(u8LearningMode == cKeyReassignment)
    700              {
    701                  mDATWrite(U8Bit, COD_ERR_APP, cCodeErrorB2h, Default);
   \                     ??LRNFactoryModeInProgress_140:
   \   000A   A1B2           MOV       A,#178
    702              }
   \                     ??LRNFactoryModeInProgress_141:
   \   000C   9B....         BR        N:?Subroutine3
   \   000F                  REQUIRE ?CL78K_V4_6_L00
    703          }

   \                                 In  segment CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   0000   16....         MOVW      HL,#DATCmnImmoData+22
   \   0003   97             MOV       [HL],A
   \   0004   AF             RET       
   \   0005                  REQUIRE ?CL78K_V4_6_L00
    704          
    705          //*****************************************************************************
    706          //  DESCRIPTION : Action if key is already learned
    707          //  
    708          //  PARAMETERS (Type,Name,Min,Max) :  none
    709          //
    710          //  RETURN VALUE :  none
    711          // 
    712          //  DESIGN INFORMATION :  refer to Detailed Design Document
    713          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    714          void LRNKeyAlreadyLaerned(void)
   \                     LRNKeyAlreadyLaerned:
    715          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    716              bKeyAlreadyLearned = cTrue;
   \   0000   A101           MOV       A,#1
   \   0002   9E....         MOV       bKeyAlreadyLearned,A
    717              mDATWrite(U8Bit, COD_ERR_APP, cCodeError0h, Default);
   \   0005   A100           MOV       A,#0
   \   0007   9B....         BR        N:?Subroutine3
   \   000A                  REQUIRE ?CL78K_V4_6_L00
    718          }
    719          
    720          //*****************************************************************************
    721          //  DESCRIPTION : Test if authentication is not successfully finished
    722          //  
    723          //  PARAMETERS (Type,Name,Min,Max) :  none
    724          //
    725          //  RETURN VALUE :  cFalse or cTrue
    726          // 
    727          //  DESIGN INFORMATION :  refer to Detailed Design Document
    728          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    729          BOOL LRNAuthenticationNOK(void)
   \                     LRNAuthenticationNOK:
    730          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    731              return (mDATRead(U8Bit, DATTrpAuthenticationState, Default) == cDATTrpServiceNotSuccessful);
   \   0000   8E....         MOV       A,DatTrpExportData+44
   \   0003   4D03           CMP       A,#3
   \   0005   BD03           BNZ       ??LRNFactoryModeInProgress_142
   \   0007   A101           MOV       A,#1
   \   0009   AF             RET       
   \                     ??LRNFactoryModeInProgress_142:
   \   000A   A100           MOV       A,#0
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
    732          }
    733          
    734          //*****************************************************************************
    735          //  DESCRIPTION : Special case for last authent with written ISK in Factory
    736          //                  and AfterSale mode
    737          //  
    738          //  PARAMETERS (Type,Name,Min,Max) :  none
    739          //
    740          //  RETURN VALUE :  cFalse or cTrue
    741          // 
    742          //  DESIGN INFORMATION :  refer to Detailed Design Document
    743          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    744          BOOL LRNAfterSaleTimeoutElapsed(void)
   \                     LRNAfterSaleTimeoutElapsed:
    745          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
    746              BOOL bTimerElapsedL = cFalse;
    747              tTOSTimer   TempTimer;
    748               
    749              if(u8LearningMode == cKeyReassignment)
   \   0001   8E....         MOV       A,u8LearningMode
   \   0004   4D03           CMP       A,#3
   \   0006   BD3A           BNZ       ??LRNFactoryModeInProgress_143
    750              {
    751                  //QACJ 3226: amanevd: This is intentional and is checked out for problems.
    752                  TempTimer = mAfterSaleTimeOut();
   \   0008   8E....         MOV       A,u8timeout_app_cle
   \   000B   48....         CMP       A,DATDbkMirrors+64
   \   000E   BD05           BNZ       ??LRNFactoryModeInProgress_144
   \   0010   02....         MOVW      AX,CalculatedTimeout_app_cle
   \   0013   FA1D           BR        ??LRNFactoryModeInProgress_145
   \                     ??LRNFactoryModeInProgress_144:
   \   0015   8E....         MOV       A,DATDbkMirrors+64
   \   0018   9E....         MOV       u8timeout_app_cle,A
   \   001B   100000         MOVW      AX,#0
   \   001E   B1             PUSH      AX
   \   001F   A00A           MOV       X,#10
   \   0021   B1             PUSH      AX
   \   0022   70             MOV       X,A
   \   0023   B1             PUSH      AX
   \   0024   1060EA         MOVW      AX,#60000
   \   0027   B1             PUSH      AX
   \   0028   8E....         MOV       A,u8timeout_app_cle
   \   002B   120000         MOVW      BC,#0
   \   002E   70             MOV       X,A
   \   002F   63             MOV       A,B
   \   0030   ..             CALLT     [__T_?L_MUL_L03]
   \   0031   ..             CALLT     [__T_?UL_DIV_L03]
   \                     ??LRNFactoryModeInProgress_145:
   \   0032   03....         MOVW      CalculatedTimeout_app_cle,AX
    753                  bTimerElapsedL = TOSIsTimerElapsed(&AfterSaleTimer, TempTimer);
    754              }
    755          
    756              return (cFalse != bTimerElapsedL);
   \   0035   D2             MOVW      BC,AX
   \   0036   10....         MOVW      AX,#AfterSaleTimer
   \   0039   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   003A   4D00           CMP       A,#0
   \   003C   AD04           BZ        ??LRNFactoryModeInProgress_143
   \   003E   A101           MOV       A,#1
   \   0040   FA02           BR        ??LRNFactoryModeInProgress_146
   \                     ??LRNFactoryModeInProgress_143:
   \   0042   A100           MOV       A,#0
   \                     ??LRNFactoryModeInProgress_146:
   \   0044   B2             POP       BC
   \   0045   AF             RET       
   \   0046                  REQUIRE ?CL78K_V4_6_L00
    757          }
    758          
    759          //*****************************************************************************
    760          //  DESCRIPTION : Test if authentication is successfully finished
    761          //  
    762          //  PARAMETERS (Type,Name,Min,Max) :  none
    763          //
    764          //  RETURN VALUE :  cFalse or cTrue
    765          // 
    766          //  DESIGN INFORMATION :  refer to Detailed Design Document
    767          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    768          BOOL LRNAuthenticationOK(void)
   \                     LRNAuthenticationOK:
    769          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    770              BOOL bResultL = cFalse;
   \   0000   A000           MOV       X,#0
    771              if (mDATRead(U8Bit, DATTrpAuthenticationState, Default) == cDATTrpServiceSuccessful)
   \   0002   8E....         MOV       A,DatTrpExportData+44
   \   0005   4D02           CMP       A,#2
   \   0007   BD02           BNZ       ??LRNFactoryModeInProgress_147
    772              {
    773                  bResultL = cTrue;
   \   0009   A001           MOV       X,#1
    774              }
    775          
    776              return bResultL; 
   \                     ??LRNFactoryModeInProgress_147:
   \   000B   60             MOV       A,X
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
    777          }
    778          
    779          //*****************************************************************************
    780          //  DESCRIPTION : Test if key has been learned and IDE is in EEPROM
    781          //  
    782          //  PARAMETERS (Type,Name,Min,Max) :  none
    783          //
    784          //  RETURN VALUE :  cFalse or cTrue
    785          // 
    786          //  DESIGN INFORMATION :  refer to Detailed Design Document
    787          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    788          BOOL LRNKeyAlreadyLearned(void)
   \                     LRNKeyAlreadyLearned:
    789          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    790          #ifdef X90_PROJECT
    791              return LRNKeyAlreadyLearned_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNKeyAlreadyLearned_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNKeyAlreadyLearned_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    792          }
    793          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    794          static MEM_TYPE BOOL LRNKeyAlreadyLearned_Static(void)
   \                     LRNKeyAlreadyLearned_Static:
    795          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 2
   \   0001   B7             PUSH      HL
    796          #endif
    797              BOOL    bResultL = cFalse;
   \   0002   A500           MOV       D,#0
    798              U8      u8IndexL;
    799          
    800              if(     (mDATRead(U1Bit, EEP_BCMBlank, Default) == 0)
    801                  &&  (u8LearningMode == cFactoryMode)
    802                )
   \   0004   16....         MOVW      HL,#DATDbkMirrors+143
   \   0007   318677         BT        [HL].0, ??LRNFactoryModeInProgress_19
   \   000A   8E....         MOV       A,u8LearningMode
   \   000D   51             DEC       A
   \   000E   BD71           BNZ       ??LRNFactoryModeInProgress_19
    803              {
    804                  for (u8IndexL = 0; (u8IndexL < mDATRead(U8Bit, NumberOfKeysLearnt, Default)); u8IndexL++)
   \   0010   8E....         MOV       A,DATCmnImmoData+13
   \   0013   4D00           CMP       A,#0
   \   0015   AD6A           BZ        ??LRNFactoryModeInProgress_19
   \   0017   10....         MOVW      AX,#DATDbkMirrors
   \   001A   B6             POP       HL
   \   001B   B1             PUSH      AX
   \   001C   8E....         MOV       A,DATCmnImmoData+13
   \   001F   74             MOV       E,A
    805                  {
    806                      if (mDATReadTable(U32Bit, EEP_KeyIdentifier, u8IndexL, Default)
    807                          == mDATRead(U32Bit, DATTrpIdentifierOfPresentKey, Default))
   \                     ??LRNKeyAlreadyLearned_Static_0:
   \   0020   891C           MOVW      AX,SP
   \   0022   D6             MOVW      HL,AX
   \   0023   87             MOV       A,[HL]
   \   0024   70             MOV       X,A
   \   0025   AE01           MOV       A,[HL+0x01]
   \   0027   D6             MOVW      HL,AX
   \   0028   AE46           MOV       A,[HL+0x46]
   \   002A   70             MOV       X,A
   \   002B   AE47           MOV       A,[HL+0x47]
   \   002D   D2             MOVW      BC,AX
   \   002E   100000         MOVW      AX,#0
   \   0031   B3             PUSH      BC
   \   0032   B1             PUSH      AX
   \   0033   891C           MOVW      AX,SP
   \   0035   D6             MOVW      HL,AX
   \   0036   AE04           MOV       A,[HL+0x04]
   \   0038   70             MOV       X,A
   \   0039   AE05           MOV       A,[HL+0x05]
   \   003B   D6             MOVW      HL,AX
   \   003C   AE44           MOV       A,[HL+0x44]
   \   003E   70             MOV       X,A
   \   003F   AE45           MOV       A,[HL+0x45]
   \   0041   120000         MOVW      BC,#0
   \   0044   D6             MOVW      HL,AX
   \   0045   891C           MOVW      AX,SP
   \   0047   E6             XCHW      AX,HL
   \   0048   E2             XCHW      AX,BC
   \   0049   0902           ADD       A,[HL+0x02]
   \   004B   30             XCH       A,X
   \   004C   0903           ADD       A,[HL+0x03]
   \   004E   E2             XCHW      AX,BC
   \   004F   B6             POP       HL
   \   0050   B6             POP       HL
   \   0051   B5             PUSH      DE
   \   0052   D4             MOVW      DE,AX
   \   0053   64             MOV       A,E
   \   0054   18....         SUB       A,DatTrpExportData+12
   \   0057   70             MOV       X,A
   \   0058   65             MOV       A,D
   \   0059   38....         SUBC      A,DatTrpExportData+13
   \   005C   6160           OR        X,A
   \   005E   62             MOV       A,C
   \   005F   38....         SUBC      A,DatTrpExportData+14
   \   0062   6160           OR        X,A
   \   0064   63             MOV       A,B
   \   0065   38....         SUBC      A,DatTrpExportData+15
   \   0068   6160           OR        X,A
   \   006A   B4             POP       DE
   \   006B   BD02           BNZ       ??LRNFactoryModeInProgress_20
    808                      {
    809                          bResultL = cTrue;
   \   006D   A501           MOV       D,#1
    810                      }
    811                  }
   \                     ??LRNFactoryModeInProgress_20:
   \   006F   891C           MOVW      AX,SP
   \   0071   D6             MOVW      HL,AX
   \   0072   87             MOV       A,[HL]
   \   0073   70             MOV       X,A
   \   0074   AE01           MOV       A,[HL+0x01]
   \   0076   D6             MOVW      HL,AX
   \   0077   86             INCW      HL
   \   0078   86             INCW      HL
   \   0079   86             INCW      HL
   \   007A   86             INCW      HL
   \   007B   C6             MOVW      AX,HL
   \   007C   B6             POP       HL
   \   007D   B1             PUSH      AX
   \   007E   54             DEC       E
   \   007F   BD9F           BNZ       ??LRNKeyAlreadyLearned_Static_0
    812              }
    813          
    814              return bResultL;
   \                     ??LRNFactoryModeInProgress_19:
   \   0081   65             MOV       A,D
   \   0082   B2             POP       BC
   \   0083   B2             POP       BC
   \   0084   AF             RET       
   \   0085                  REQUIRE ?CL78K_V4_6_L00
    815          }
    816          //*****************************************************************************
    817          //  DESCRIPTION : Store into ram the transponder configuration and its password
    818          //                tag.
    819          //  
    820          //  PARAMETERS (Type,Name,Min,Max) :  none
    821          //
    822          //  RETURN VALUE :  none
    823          // 
    824          //  DESIGN INFORMATION :  refer to Detailed Design Document (REQ: prsFS_IMMO-933)
    825          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    826          void LRNMemoTransponderType(void)
   \                     LRNMemoTransponderType:
    827          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    828          #ifdef X90_PROJECT
    829              LRNMemoTransponderType_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNMemoTransponderType_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNMemoTransponderType_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    830          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    831          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    832          static MEM_TYPE void LRNMemoTransponderType_Static(void)
   \                     LRNMemoTransponderType_Static:
    833          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    834          #endif
    835          
    836              // Store the identifier of the transponder
    837              u32TrpIdentifierReceived = mDATRead(U32Bit, DATTrpIdentifierOfPresentKey, Default);
   \   0000   02....         MOVW      AX,DatTrpExportData+14
   \   0003   03....         MOVW      u32TrpIdentifierReceived+2,AX
   \   0006   02....         MOVW      AX,DatTrpExportData+12
   \   0009   03....         MOVW      u32TrpIdentifierReceived,AX
    838          
    839              // Store the content of the page 3 of block 0 of the transponder memory
    840              u32TrpConfigAndPassWordTag = mDATRead(U32Bit, DATTrpDataRead, Default);
   \   000C   02....         MOVW      AX,DatTrpExportData+18
   \   000F   03....         MOVW      u32TrpConfigAndPassWordTag+2,AX
   \   0012   02....         MOVW      AX,DatTrpExportData+16
   \   0015   03....         MOVW      u32TrpConfigAndPassWordTag,AX
    841          }
   \   0018   AF             RET       
   \   0019                  REQUIRE ?CL78K_V4_6_L00
    842          
    843          //*****************************************************************************
    844          //  DESCRIPTION : Test if current key is locked.
    845          //  
    846          //  PARAMETERS (Type,Name,Min,Max) :  none
    847          //
    848          //  RETURN VALUE :  cFalse or cTrue
    849          // 
    850          //  DESIGN INFORMATION :  refer to Detailed Design Document
    851          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    852          BOOL LRNKeyIsLocked(void)
   \                     LRNKeyIsLocked:
    853          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    854              return (mDATRead(U1Bit, DATTrpPresentKeyLocked, Default) != 0);
   \   0000   A100           MOV       A,#0
   \   0002   16....         MOVW      HL,#DatTrpExportData+51
   \   0005   7194           MOV1      CY,[HL].1
   \   0007   27             ROLC      A,0x1
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    855          }
    856          //*****************************************************************************
    857          //  DESCRIPTION : Test if current key can be learnt.
    858          //  
    859          //  PARAMETERS (Type,Name,Min,Max) :  none
    860          //
    861          //  RETURN VALUE :  cFalse or cTrue
    862          // 
    863          //  DESIGN INFORMATION :  refer to Detailed Design Document
    864          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    865          BOOL LRNKeyOKforLearning(void)
   \                     LRNKeyOKforLearning:
    866          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001   B5             PUSH      DE
   \   0002                  ; Total Auto size: 0
    867              return (BOOL)(   (mDATRead(U1Bit, DATTrpKeyWithRF, Default) == 0)
    868              || ((u32TrpConfigAndPassWordTag & cValueBitBStoOne) == 0UL));
   \   0002   A41B           MOV       E,#27
   \   0004   02....         MOVW      AX,u32TrpConfigAndPassWordTag+2
   \   0007   D2             MOVW      BC,AX
   \   0008   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   000B   9A....         CALL      ?UL_RSH_L03
   \   000E   60             MOV       A,X
   \   000F   5D01           AND       A,#1
   \   0011   16....         MOVW      HL,#DatTrpExportData+51
   \   0014   70             MOV       X,A
   \   0015   A100           MOV       A,#0
   \   0017   71A4           MOV1      CY,[HL].2
   \   0019   27             ROLC      A,0x1
   \   001A   30             XCH       A,X
   \   001B   6150           AND       X,A
   \   001D   60             MOV       A,X
   \   001E   7D01           XOR       A,#1
   \   0020   B4             POP       DE
   \   0021   B2             POP       BC
   \   0022   AF             RET       
   \   0023                  REQUIRE ?CL78K_V4_6_L00
    869          }
    870          //*****************************************************************************
    871          //  DESCRIPTION : Select remote config block in transponder with RF memory.
    872          //  
    873          //  PARAMETERS (Type,Name,Min,Max) :  none
    874          //
    875          //  RETURN VALUE :  none
    876          // 
    877          //  DESIGN INFORMATION :  refer to Detailed Design Document
    878          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    879          void LRNSelectRemoteConfigBlockForRFKey(void)
   \                     LRNSelectRemoteConfigBlockForRFKey:
    880          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    881          #ifdef X90_PROJECT
    882              LRNSelectRemoteConfigBlockForRFKey_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNSelectRemoteConfigBlockForRFKey_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNSelectRemoteConfigBlockForRFKey_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    883          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    884          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    885          static MEM_TYPE void LRNSelectRemoteConfigBlockForRFKey_Static(void)
   \                     LRNSelectRemoteConfigBlockForRFKey_Static:
    886          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   10FFF7         MOVW      AX,#63487
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
    887          #endif
    888          
    889              // Put bit BS to 0
    890              u32TrpConfigAndPassWordTag &= cPutBitBStoZero;
   \   0004   B1             PUSH      AX
   \   0005   A1FF           MOV       A,#255
   \   0007   B1             PUSH      AX
   \   0008   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   000B   D2             MOVW      BC,AX
   \   000C   02....         MOVW      AX,u32TrpConfigAndPassWordTag+2
   \   000F   E2             XCHW      AX,BC
   \   0010   9A....         CALL      ?L_AND_L03
   \   0013   03....         MOVW      u32TrpConfigAndPassWordTag,AX
   \   0016   E2             XCHW      AX,BC
   \   0017   03....         MOVW      u32TrpConfigAndPassWordTag+2,AX
    891          
    892              mDATWrite(U1Bit, DATTrpWriteSecretKeyHigh, 0, Default);
   \   001A   16....         MOVW      HL,#DatTrpExportData+50
   \   001D   7193           CLR1      [HL].1
    893              mDATWrite(U32Bit, DATTrpDataToWrite, u32TrpConfigAndPassWordTag, Default);
   \   001F   03....         MOVW      DatTrpExportData+10,AX
   \   0022   C2             MOVW      AX,BC
   \   0023   03....         MOVW      DatTrpExportData+8,AX
    894              mDATWrite(U8Bit, DATTrpPageNumber, cPage3, Default);
   \   0026   A103           MOV       A,#3
   \   0028   16....         MOVW      HL,#DatTrpExportData+38
   \   002B   97             MOV       [HL],A
    895              mDATControl(Trp, cDATTrpWritePage);
   \   002C   A105           MOV       A,#5
   \   002E   ..             CALLT     [__T_DATTrpControl]
    896          }
   \   002F   B2             POP       BC
   \   0030   AF             RET       
   \   0031                  REQUIRE ?CL78K_V4_6_L00
    897          //*****************************************************************************
    898          //  DESCRIPTION : Test if ISK writing in transponder memory is finished 
    899          //                successfully.
    900          //  
    901          //  PARAMETERS (Type,Name,Min,Max) :  none
    902          //
    903          //  RETURN VALUE :  cFalse or cTrue
    904          // 
    905          //  DESIGN INFORMATION :  refer to Detailed Design Document
    906          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    907          BOOL LRNWritingISKFinishedOK(void)
   \                     LRNWritingISKFinishedOK:
    908          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    909              BOOL bResultL = cFalse;
   \   0000   A000           MOV       X,#0
    910          
    911              if (mDATRead(U8Bit, DATTrpWriteAccessState, Default) == cDATTrpServiceSuccessful)
   \   0002   8E....         MOV       A,DatTrpExportData+48
   \   0005   4D02           CMP       A,#2
   \   0007   BD06           BNZ       ??LRNFactoryModeInProgress_148
    912              {
    913                  mDATWrite(U1Bit, ISKSuccessfullyWritten, 1, Default);
   \   0009   A101           MOV       A,#1
   \   000B   9E....         MOV       DATCmnImmoData+2,A
    914                  bResultL = cTrue;
   \   000E   70             MOV       X,A
    915              }
    916              return (bResultL);
   \                     ??LRNFactoryModeInProgress_148:
   \   000F   60             MOV       A,X
   \   0010   AF             RET       
   \   0011                  REQUIRE ?CL78K_V4_6_L00
    917          }
    918          //*****************************************************************************
    919          //  DESCRIPTION : Test if RSK writing in transponder memory is finished 
    920          //                successfully.
    921          //  
    922          //  PARAMETERS (Type,Name,Min,Max) :  none
    923          //
    924          //  RETURN VALUE :  cFalse or cTrue
    925          // 
    926          //  DESIGN INFORMATION :  refer to Detailed Design Document
    927          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    928          BOOL LRNWritingRSKFinishedOK(void)
   \                     LRNWritingRSKFinishedOK:
    929          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    930              BOOL bResultL = cFalse;
   \   0000   A000           MOV       X,#0
    931          
    932              if (mDATRead(U8Bit, DATTrpWriteAccessState, Default) == cDATTrpServiceSuccessful)
   \   0002   8E....         MOV       A,DatTrpExportData+48
   \   0005   4D02           CMP       A,#2
   \   0007   BD07           BNZ       ??LRNFactoryModeInProgress_149
    933              {
    934                  mDATWrite(U1Bit, RSKSuccessfullyWritten, 1, Default);
   \   0009   A101           MOV       A,#1
   \   000B   16....         MOVW      HL,#DATCmnImmoData+3
   \   000E   97             MOV       [HL],A
    935                  bResultL = cTrue;
   \   000F   70             MOV       X,A
    936              }
    937              return (bResultL);
   \                     ??LRNFactoryModeInProgress_149:
   \   0010   60             MOV       A,X
   \   0011   AF             RET       
   \   0012                  REQUIRE ?CL78K_V4_6_L00
    938          }
    939          //*****************************************************************************
    940          //  DESCRIPTION : Test if writing in transponder memory is finished not 
    941          //                successfully.
    942          //  
    943          //  PARAMETERS (Type,Name,Min,Max) :  none
    944          //
    945          //  RETURN VALUE :  cFalse or cTrue
    946          // 
    947          //  DESIGN INFORMATION :  refer to Detailed Design Document
    948          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    949          BOOL LRNWritingFinishedNOK(void)
   \                     LRNWritingFinishedNOK:
    950          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    951              return (mDATRead(U8Bit, DATTrpWriteAccessState, Default) == cDATTrpServiceNotSuccessful);
   \   0000   8E....         MOV       A,DatTrpExportData+48
   \   0003   4D03           CMP       A,#3
   \   0005   BD03           BNZ       ??LRNFactoryModeInProgress_150
   \   0007   A101           MOV       A,#1
   \   0009   AF             RET       
   \                     ??LRNFactoryModeInProgress_150:
   \   000A   A100           MOV       A,#0
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
    952          }
    953          //*****************************************************************************
    954          //  DESCRIPTION : Test if writing in transponder memory is finished successfully.
    955          //  
    956          //  PARAMETERS (Type,Name,Min,Max) :  none
    957          //
    958          //  RETURN VALUE :  cFalse or cTrue
    959          // 
    960          //  DESIGN INFORMATION :  refer to Detailed Design Document
    961          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    962          BOOL LRNWritingFinishedOK(void)
   \                     LRNWritingFinishedOK:
    963          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    964              return (mDATRead(U8Bit, DATTrpWriteAccessState, Default) == cDATTrpServiceSuccessful);
   \   0000   8E....         MOV       A,DatTrpExportData+48
   \   0003   4D02           CMP       A,#2
   \   0005   BD03           BNZ       ??LRNFactoryModeInProgress_151
   \   0007   A101           MOV       A,#1
   \   0009   AF             RET       
   \                     ??LRNFactoryModeInProgress_151:
   \   000A   A100           MOV       A,#0
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
    965          }
    966          //*****************************************************************************
    967          //  DESCRIPTION : Calculate codes for the key transponder.
    968          //  
    969          //  PARAMETERS (Type,Name,Min,Max) :  none
    970          //
    971          //  RETURN VALUE :  none
    972          // 
    973          //  DESIGN INFORMATION :  refer to Detailed Design Document
    974          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    975          void LRNCalculateTranspCodes(void)
   \                     LRNCalculateTranspCodes:
    976          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    977          #ifdef X90_PROJECT
    978              LRNCalculateTranspCodes_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNCalculateTranspCodes_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNCalculateTranspCodes_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    979          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    980          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    981          static MEM_TYPE void LRNCalculateTranspCodes_Static( void )
   \                     LRNCalculateTranspCodes_Static:
    982          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 6
   \   0001   B7             PUSH      HL
   \   0002   B7             PUSH      HL
   \   0003   B7             PUSH      HL
    983          #endif
    984          
    985              U8  u8IndexL;
    986          
    987              if (   (mDATRead(U8Bit, NumberOfKeysLearnt, Default) == 0)
    988              && (mDATRead(U1Bit, EEP_BCMBlank, Default) != 0) )
   \   0004   8E....         MOV       A,DATCmnImmoData+13
   \   0007   4D00           CMP       A,#0
   \   0009   AD03           BZ        $+5
   \   000B   9B....         BR        N:??LRNFactoryModeInProgress_21
   \   000E   16....         MOVW      HL,#DATDbkMirrors+143
   \   0011   318603         BT        [HL].0, $+6
   \   0014   9B....         BR        N:??LRNFactoryModeInProgress_21
    989              {
    990                  // For the learning of the first key
    991                  // Generate ISK, After sale code and VERLOG code
    992                  mDATWrite(U32Bit, DATAprIdentifier, u32TrpIdentifierReceived, Default);
   \   0017   02....         MOVW      AX,u32TrpIdentifierReceived+2
   \   001A   03....         MOVW      DatAprExportData+2,AX
   \   001D   02....         MOVW      AX,u32TrpIdentifierReceived
   \   0020   03....         MOVW      DatAprExportData,AX
    993                  mDATWrite(U32Bit, DATAprPasswordTag, (u32TrpConfigAndPassWordTag & cMaskKeep24Bits), Default);
   \   0023   10FF00         MOVW      AX,#255
   \   0026   B1             PUSH      AX
   \   0027   A1FF           MOV       A,#255
   \   0029   B1             PUSH      AX
   \   002A   02....         MOVW      AX,u32TrpConfigAndPassWordTag+2
   \   002D   D2             MOVW      BC,AX
   \   002E   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   0031   9A....         CALL      ?L_AND_L03
   \   0034   03....         MOVW      DatAprExportData+4,AX
   \   0037   C2             MOVW      AX,BC
   \   0038   03....         MOVW      DatAprExportData+6,AX
    994                  mDATControl(Apr, cDATAprComputeISK);
   \   003B   16....         MOVW      HL,#LWRD(DATAprControl)
   \   003E   A4..           MOV       E,#BYTE3(DATAprControl)
   \   0040   ..             CALLT     [__T_?FAR_CALL_L07]
    995                  mDATControl(Apr, cDATAprComputeAfterSaleCode);
   \   0041   A103           MOV       A,#3
   \   0043   16....         MOVW      HL,#LWRD(DATAprControl)
   \   0046   A4..           MOV       E,#BYTE3(DATAprControl)
   \   0048   ..             CALLT     [__T_?FAR_CALL_L07]
    996                  mDATControl(Apr, cDATAprComputeSKey);
   \   0049   A102           MOV       A,#2
   \   004B   16....         MOVW      HL,#LWRD(DATAprControl)
   \   004E   A4..           MOV       E,#BYTE3(DATAprControl)
   \   0050   ..             CALLT     [__T_?FAR_CALL_L07]
    997          
    998                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0051   10....         MOVW      AX,#ImmobilizerSecretKey
   \   0054   D6             MOVW      HL,AX
   \   0055   891C           MOVW      AX,SP
   \   0057   E6             XCHW      AX,HL
   \   0058   BE03           MOV       [HL+0x03],A
   \   005A   60             MOV       A,X
   \   005B   BE02           MOV       [HL+0x02],A
   \   005D   10....         MOVW      AX,#AfterSaleCode
   \   0060   14....         MOVW      DE,#DatAprExportData
   \   0063   B6             POP       HL
   \   0064   B1             PUSH      AX
   \   0065   891C           MOVW      AX,SP
   \   0067   CA0400         ADDW      AX,#4
   \   006A   D6             MOVW      HL,AX
   \   006B   A106           MOV       A,#6
   \   006D   97             MOV       [HL],A
    999                  {
   1000                      ImmobilizerSecretKey[u8IndexL] = mDATReadTable(U8Bit, DATAprImmobilizerSecretKey, u8IndexL, Default);
   \                     ??LRNCalculateTranspCodes_Static_0:
   \   006E   891C           MOVW      AX,SP
   \   0070   D6             MOVW      HL,AX
   \   0071   AE02           MOV       A,[HL+0x02]
   \   0073   70             MOV       X,A
   \   0074   AE03           MOV       A,[HL+0x03]
   \   0076   D6             MOVW      HL,AX
   \   0077   C4             MOVW      AX,DE
   \   0078   B7             PUSH      HL
   \   0079   B2             POP       BC
   \   007A   D6             MOVW      HL,AX
   \   007B   AE08           MOV       A,[HL+0x08]
   \   007D   B3             PUSH      BC
   \   007E   B6             POP       HL
   \   007F   97             MOV       [HL],A
   1001                      AfterSaleCode[u8IndexL]        = mDATReadTable(U8Bit, DATAprAfterSaleCode, u8IndexL, Default);
   \   0080   891C           MOVW      AX,SP
   \   0082   D6             MOVW      HL,AX
   \   0083   87             MOV       A,[HL]
   \   0084   70             MOV       X,A
   \   0085   AE01           MOV       A,[HL+0x01]
   \   0087   D6             MOVW      HL,AX
   \   0088   C4             MOVW      AX,DE
   \   0089   B7             PUSH      HL
   \   008A   B2             POP       BC
   \   008B   D6             MOVW      HL,AX
   \   008C   AE14           MOV       A,[HL+0x14]
   \   008E   B3             PUSH      BC
   \   008F   B6             POP       HL
   \   0090   97             MOV       [HL],A
   1002                  }
   \   0091   891C           MOVW      AX,SP
   \   0093   D6             MOVW      HL,AX
   \   0094   87             MOV       A,[HL]
   \   0095   70             MOV       X,A
   \   0096   AE01           MOV       A,[HL+0x01]
   \   0098   D6             MOVW      HL,AX
   \   0099   86             INCW      HL
   \   009A   C6             MOVW      AX,HL
   \   009B   B6             POP       HL
   \   009C   B1             PUSH      AX
   \   009D   84             INCW      DE
   \   009E   891C           MOVW      AX,SP
   \   00A0   D6             MOVW      HL,AX
   \   00A1   AE02           MOV       A,[HL+0x02]
   \   00A3   70             MOV       X,A
   \   00A4   AE03           MOV       A,[HL+0x03]
   \   00A6   D6             MOVW      HL,AX
   \   00A7   86             INCW      HL
   \   00A8   891C           MOVW      AX,SP
   \   00AA   E6             XCHW      AX,HL
   \   00AB   BE03           MOV       [HL+0x03],A
   \   00AD   60             MOV       A,X
   \   00AE   BE02           MOV       [HL+0x02],A
   \   00B0   AE04           MOV       A,[HL+0x04]
   \   00B2   51             DEC       A
   \   00B3   BE04           MOV       [HL+0x04],A
   \   00B5   BDB7           BNZ       ??LRNCalculateTranspCodes_Static_0
   1003          
   1004                  u16SKey = mDATRead(U16Bit, DATAprSKey, Default);
   \   00B7   02....         MOVW      AX,DatAprExportData+32
   \   00BA   03....         MOVW      u16SKey,AX
   1005              }
   1006          
   1007              // Generate RSK for transponder with RF function
   1008              mDATWrite(U32Bit, DATAprIdentifier, u32TrpIdentifierReceived, Default);
   \                     ??LRNFactoryModeInProgress_21:
   \   00BD   02....         MOVW      AX,u32TrpIdentifierReceived+2
   \   00C0   03....         MOVW      DatAprExportData+2,AX
   \   00C3   02....         MOVW      AX,u32TrpIdentifierReceived
   \   00C6   03....         MOVW      DatAprExportData,AX
   1009              mDATControl(Apr, cDATAprComputeRSK);
   \   00C9   A101           MOV       A,#1
   \   00CB   16....         MOVW      HL,#LWRD(DATAprControl)
   \   00CE   A4..           MOV       E,#BYTE3(DATAprControl)
   \   00D0   ..             CALLT     [__T_?FAR_CALL_L07]
   1010              for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   00D1   12....         MOVW      BC,#RemoteSecretKey
   \   00D4   14....         MOVW      DE,#DatAprExportData
   \   00D7   A006           MOV       X,#6
   1011              {
   1012                  RemoteSecretKey[u8IndexL] = mDATReadTable(U8Bit, DATAprRemoteSecretKey, u8IndexL, Default);    
   \                     ??LRNCalculateTranspCodes_Static_1:
   \   00D9   B5             PUSH      DE
   \   00DA   B6             POP       HL
   \   00DB   E6             XCHW      AX,HL
   \   00DC   CA0E00         ADDW      AX,#14
   \   00DF   E6             XCHW      AX,HL
   \   00E0   87             MOV       A,[HL]
   \   00E1   B3             PUSH      BC
   \   00E2   B6             POP       HL
   \   00E3   97             MOV       [HL],A
   1013              }
   \   00E4   84             INCW      DE
   \   00E5   B3             PUSH      BC
   \   00E6   B6             POP       HL
   \   00E7   86             INCW      HL
   \   00E8   B7             PUSH      HL
   \   00E9   B2             POP       BC
   \   00EA   50             DEC       X
   \   00EB   60             MOV       A,X
   \   00EC   BDEB           BNZ       ??LRNCalculateTranspCodes_Static_1
   1014          }
   \   00EE                  REQUIRE ?CL78K_V4_6_L00
   \   00EE                  REQUIRE ?Subroutine0
   \   00EE                  ; // Fall through to label ?Subroutine0

   \                                 In  segment BCODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   0000   B0             POP       AX
   \   0001   B0             POP       AX
   \   0002   B0             POP       AX
   \   0003   B2             POP       BC
   \   0004   AF             RET       
   \   0005                  REQUIRE ?CL78K_V4_6_L00
   1015          //*****************************************************************************
   1016          //  DESCRIPTION : Test if transponder has RF function
   1017          //  
   1018          //  PARAMETERS (Type,Name,Min,Max) :  none
   1019          //
   1020          //  RETURN VALUE :  cFalse or cTrue
   1021          // 
   1022          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1023          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1024          BOOL LRNKeyTypeWithRF(void)
   \                     LRNKeyTypeWithRF:
   1025          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1026              return (mDATRead(U1Bit, DATTrpKeyWithRF, Default) != 0);
   \   0000   A100           MOV       A,#0
   \   0002   16....         MOVW      HL,#DatTrpExportData+51
   \   0005   71A4           MOV1      CY,[HL].2
   \   0007   27             ROLC      A,0x1
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1027          }
   1028          //*****************************************************************************
   1029          //  DESCRIPTION : Start writing of RSK High into transponder memory
   1030          //  
   1031          //  PARAMETERS (Type,Name,Min,Max) :  none
   1032          //
   1033          //  RETURN VALUE :  none
   1034          // 
   1035          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1036          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1037          void LRNWriteRSKHighIntoTransponder(void)
   \                     LRNWriteRSKHighIntoTransponder:
   1038          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1039          #ifdef X90_PROJECT
   1040              LRNWriteRSKHighIntoTransponder_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNWriteRSKHighIntoTransponder_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNWriteRSKHighIntoTransponder_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1041          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1042          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1043          static MEM_TYPE void LRNWriteRSKHighIntoTransponder_Static(void)
   \                     LRNWriteRSKHighIntoTransponder_Static:
   1044          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1045          #endif
   1046          
   1047              U32 u32DataPageToWriteL;
   1048          
   1049              u32DataPageToWriteL  = ((U32)RemoteSecretKey[cSKIndex5]);
   1050              u32DataPageToWriteL |= ((U32)RemoteSecretKey[cSKIndex4] << cShiftBy8);
   \   0001   8E....         MOV       A,RemoteSecretKey+4
   \   0004   120000         MOVW      BC,#0
   \   0007   70             MOV       X,A
   \   0008   63             MOV       A,B
   \   0009   E2             XCHW      AX,BC
   \   000A   E2             XCHW      AX,BC
   \   000B   60             MOV       A,X
   \   000C   A000           MOV       X,#0
   \   000E   B3             PUSH      BC
   \   000F   B1             PUSH      AX
   \   0010   8E....         MOV       A,RemoteSecretKey+5
   \   0013   70             MOV       X,A
   \   0014   63             MOV       A,B
   \   0015   9A....         CALL      ?L_IOR_L03
   1051          
   1052              // Start the writing of the RSK High into the transponder memory
   1053              mDATWrite(U1Bit, DATTrpWriteSecretKeyHigh, 1, Default);
   \   0018   16....         MOVW      HL,#DatTrpExportData+50
   \   001B   7192           SET1      [HL].1
   1054              mDATWrite(U32Bit, DATTrpDataToWrite, u32DataPageToWriteL, Default);
   \   001D   03....         MOVW      DatTrpExportData+8,AX
   \   0020   C2             MOVW      AX,BC
   \   0021   03....         MOVW      DatTrpExportData+10,AX
   1055              mDATWrite(U8Bit, DATTrpPageNumber, cPage5, Default);
   \   0024   A105           MOV       A,#5
   \   0026   16....         MOVW      HL,#DatTrpExportData+38
   \   0029   97             MOV       [HL],A
   1056              mDATControl(Trp, cDATTrpWritePage);
   \   002A   ..             CALLT     [__T_DATTrpControl]
   1057          }
   \   002B   B2             POP       BC
   \   002C   AF             RET       
   \   002D                  REQUIRE ?CL78K_V4_6_L00
   1058          //*****************************************************************************
   1059          //  DESCRIPTION : Start writing of RSK Low into transponder memory
   1060          //  
   1061          //  PARAMETERS (Type,Name,Min,Max) :  none
   1062          //
   1063          //  RETURN VALUE :  none
   1064          // 
   1065          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1066          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1067          void LRNWriteRSKLowIntoTransponder(void)
   \                     LRNWriteRSKLowIntoTransponder:
   1068          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1069          #ifdef X90_PROJECT
   1070              LRNWriteRSKLowIntoTransponder_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNWriteRSKLowIntoTransponder_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNWriteRSKLowIntoTransponder_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1071          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1072          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1073          static MEM_TYPE void LRNWriteRSKLowIntoTransponder_Static(void)
   \                     LRNWriteRSKLowIntoTransponder_Static:
   1074          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1075          #endif
   1076          
   1077              U32 u32DataPageToWriteL;
   1078          
   1079              u32DataPageToWriteL  = ((U32)RemoteSecretKey[cSKIndex0] << cShiftBy24);
   1080              u32DataPageToWriteL |= ((U32)RemoteSecretKey[cSKIndex1] << cShiftBy16); 
   1081              u32DataPageToWriteL |= ((U32)RemoteSecretKey[cSKIndex2] << cShiftBy8);
   1082              u32DataPageToWriteL |= ((U32)RemoteSecretKey[cSKIndex3]);  
   \   0001   8E....         MOV       A,RemoteSecretKey+3
   \   0004   74             MOV       E,A
   \   0005   A500           MOV       D,#0
   \   0007   160000         MOVW      HL,#0
   \   000A   B7             PUSH      HL
   \   000B   B5             PUSH      DE
   \   000C   8E....         MOV       A,RemoteSecretKey+2
   \   000F   120000         MOVW      BC,#0
   \   0012   70             MOV       X,A
   \   0013   63             MOV       A,B
   \   0014   E2             XCHW      AX,BC
   \   0015   E2             XCHW      AX,BC
   \   0016   60             MOV       A,X
   \   0017   A000           MOV       X,#0
   \   0019   B3             PUSH      BC
   \   001A   B1             PUSH      AX
   \   001B   8E....         MOV       A,RemoteSecretKey+1
   \   001E   70             MOV       X,A
   \   001F   63             MOV       A,B
   \   0020   D2             MOVW      BC,AX
   \   0021   70             MOV       X,A
   \   0022   B3             PUSH      BC
   \   0023   B1             PUSH      AX
   \   0024   8E....         MOV       A,RemoteSecretKey
   \   0027   73             MOV       B,A
   \   0028   67             MOV       A,H
   \   0029   72             MOV       C,A
   \   002A   9A....         CALL      ?L_IOR_L03
   \   002D   9A....         CALL      ?L_IOR_L03
   \   0030   9A....         CALL      ?L_IOR_L03
   1083          
   1084              // Start the writing of the RSK Low into the transponder memory
   1085              mDATWrite(U1Bit, DATTrpWriteSecretKeyHigh, 0, Default);
   \   0033   16....         MOVW      HL,#DatTrpExportData+50
   \   0036   7193           CLR1      [HL].1
   1086              mDATWrite(U32Bit, DATTrpDataToWrite, u32DataPageToWriteL, Default);
   \   0038   03....         MOVW      DatTrpExportData+8,AX
   \   003B   C2             MOVW      AX,BC
   \   003C   03....         MOVW      DatTrpExportData+10,AX
   1087              mDATWrite(U8Bit, DATTrpPageNumber, cPage4, Default);
   \   003F   A104           MOV       A,#4
   \   0041   16....         MOVW      HL,#DatTrpExportData+38
   \   0044   97             MOV       [HL],A
   1088              mDATControl(Trp, cDATTrpWritePage);
   \   0045   A105           MOV       A,#5
   \   0047   ..             CALLT     [__T_DATTrpControl]
   1089          }
   \   0048   B2             POP       BC
   \   0049   AF             RET       
   \   004A                  REQUIRE ?CL78K_V4_6_L00
   1090          //*****************************************************************************
   1091          //  DESCRIPTION : Start writing of ISK High into transponder memory
   1092          //  
   1093          //  PARAMETERS (Type,Name,Min,Max) :  none
   1094          //
   1095          //  RETURN VALUE :  none
   1096          // 
   1097          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1098          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1099          void LRNWriteISKHighIntoTransponder(void)
   \                     LRNWriteISKHighIntoTransponder:
   1100          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1101          #ifdef X90_PROJECT
   1102              LRNWriteISKHighIntoTransponder_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNWriteISKHighIntoTransponder_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNWriteISKHighIntoTransponder_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1103          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1104          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1105          static MEM_TYPE void LRNWriteISKHighIntoTransponder_Static(void)
   \                     LRNWriteISKHighIntoTransponder_Static:
   1106          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 4
   \   0001   B7             PUSH      HL
   \   0002   B7             PUSH      HL
   1107          #endif
   1108          
   1109              U32 u32DataPageToWriteL;
   1110              U8  u8IndexL;
   1111          
   1112              if (mDATRead(U1Bit, EEP_BCMBlank, Default) == 0)
   \   0003   16....         MOVW      HL,#DATDbkMirrors+143
   \   0006   891C           MOVW      AX,SP
   \   0008   318645         BT        [HL].0, ??LRNFactoryModeInProgress_22
   1113              {
   1114                  u32DataPageToWriteL  = ((U32)mDATReadTable(U8Bit, EEP_ImmoSecretKey, cSKIndex5, Default));
   1115                  u32DataPageToWriteL |= ((U32)mDATReadTable(U8Bit, EEP_ImmoSecretKey, cSKIndex4, Default) << cShiftBy8);
   \   000B   D6             MOVW      HL,AX
   \   000C   8E....         MOV       A,DATDbkMirrors+110
   \   000F   120000         MOVW      BC,#0
   \   0012   70             MOV       X,A
   \   0013   63             MOV       A,B
   \   0014   E2             XCHW      AX,BC
   \   0015   E2             XCHW      AX,BC
   \   0016   60             MOV       A,X
   \   0017   A000           MOV       X,#0
   \   0019   B3             PUSH      BC
   \   001A   B1             PUSH      AX
   \   001B   8E....         MOV       A,DATDbkMirrors+111
   \   001E   70             MOV       X,A
   \   001F   63             MOV       A,B
   \   0020   9A....         CALL      ?L_IOR_L03
   \   0023   BE01           MOV       [HL+0x01],A
   \   0025   60             MOV       A,X
   \   0026   97             MOV       [HL],A
   \   0027   C2             MOVW      AX,BC
   \   0028   BE03           MOV       [HL+0x03],A
   \   002A   BE02           MOV       [HL+0x02],A
   1116          
   1117                  for (u8IndexL = 0; u8IndexL < (cDATTrpISKLengthInBytes - cSKIndex2); u8IndexL++)
   \   002C   12....         MOVW      BC,#DatTrpExportData
   \   002F   16....         MOVW      HL,#DATDbkMirrors
   \   0032   A004           MOV       X,#4
   1118                  {
   1119                      mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, mDATReadTable(U8Bit, EEP_ImmoSecretKey, u8IndexL, Default), Default);
   \                     ??LRNWriteISKHighIntoTransponder_Static_0:
   \   0034   B7             PUSH      HL
   \   0035   B4             POP       DE
   \   0036   E4             XCHW      AX,DE
   \   0037   CA6A00         ADDW      AX,#106
   \   003A   E4             XCHW      AX,DE
   \   003B   85             MOV       A,[DE]
   \   003C   B3             PUSH      BC
   \   003D   B4             POP       DE
   \   003E   E4             XCHW      AX,DE
   \   003F   CA2000         ADDW      AX,#32
   \   0042   E4             XCHW      AX,DE
   \   0043   95             MOV       [DE],A
   1120                  }    
   \   0044   86             INCW      HL
   \   0045   B3             PUSH      BC
   \   0046   B4             POP       DE
   \   0047   84             INCW      DE
   \   0048   B5             PUSH      DE
   \   0049   B2             POP       BC
   \   004A   50             DEC       X
   \   004B   60             MOV       A,X
   \   004C   AD3F           BZ        ??LRNFactoryModeInProgress_23
   \   004E   FAE4           BR        ??LRNWriteISKHighIntoTransponder_Static_0
   1121              }
   1122              else
   1123              {    
   1124                  u32DataPageToWriteL  = ((U32)ImmobilizerSecretKey[cSKIndex5]);
   1125                  u32DataPageToWriteL |= ((U32)ImmobilizerSecretKey[cSKIndex4] << cShiftBy8);
   \                     ??LRNFactoryModeInProgress_22:
   \   0050   D6             MOVW      HL,AX
   \   0051   8E....         MOV       A,ImmobilizerSecretKey+4
   \   0054   120000         MOVW      BC,#0
   \   0057   70             MOV       X,A
   \   0058   63             MOV       A,B
   \   0059   E2             XCHW      AX,BC
   \   005A   E2             XCHW      AX,BC
   \   005B   60             MOV       A,X
   \   005C   A000           MOV       X,#0
   \   005E   B3             PUSH      BC
   \   005F   B1             PUSH      AX
   \   0060   8E....         MOV       A,ImmobilizerSecretKey+5
   \   0063   70             MOV       X,A
   \   0064   63             MOV       A,B
   \   0065   9A....         CALL      ?L_IOR_L03
   \   0068   BE01           MOV       [HL+0x01],A
   \   006A   60             MOV       A,X
   \   006B   97             MOV       [HL],A
   \   006C   C2             MOVW      AX,BC
   \   006D   BE03           MOV       [HL+0x03],A
   \   006F   BE02           MOV       [HL+0x02],A
   1126          
   1127                  for (u8IndexL = 0; u8IndexL < (cDATTrpISKLengthInBytes - cSKIndex2); u8IndexL++)
   \   0071   14....         MOVW      DE,#DatTrpExportData
   \   0074   12....         MOVW      BC,#ImmobilizerSecretKey
   \   0077   A004           MOV       X,#4
   1128                  {
   1129                      mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, ImmobilizerSecretKey[u8IndexL], Default);
   \                     ??LRNWriteISKHighIntoTransponder_Static_1:
   \   0079   B3             PUSH      BC
   \   007A   B6             POP       HL
   \   007B   87             MOV       A,[HL]
   \   007C   B5             PUSH      DE
   \   007D   B6             POP       HL
   \   007E   E6             XCHW      AX,HL
   \   007F   CA2000         ADDW      AX,#32
   \   0082   E6             XCHW      AX,HL
   \   0083   97             MOV       [HL],A
   1130                  }
   \   0084   B3             PUSH      BC
   \   0085   B6             POP       HL
   \   0086   86             INCW      HL
   \   0087   B7             PUSH      HL
   \   0088   B2             POP       BC
   \   0089   84             INCW      DE
   \   008A   50             DEC       X
   \   008B   BDEC           BNZ       ??LRNWriteISKHighIntoTransponder_Static_1
   1131              }
   1132              mDATWriteTable(U8Bit, DATTrpISKForAuthent, cSKIndex4, mDATReadTable(U8Bit, DATTrpTransportISK, cSKIndex4, Default), Default);
   \                     ??LRNFactoryModeInProgress_23:
   \   008D   8E....         MOV       A,DATTrpTransportISK+4
   \   0090   9E....         MOV       DatTrpExportData+36,A
   1133              mDATWriteTable(U8Bit, DATTrpISKForAuthent, cSKIndex5, mDATReadTable(U8Bit, DATTrpTransportISK, cSKIndex5, Default), Default);
   \   0093   8E....         MOV       A,DATTrpTransportISK+5
   \   0096   9E....         MOV       DatTrpExportData+37,A
   1134          
   1135              // Start the writing of the ISK High into the transponder memory
   1136              mDATWrite(U1Bit, DATTrpWriteSecretKeyHigh, 1, Default);
   \   0099   16....         MOVW      HL,#DatTrpExportData+50
   \   009C   7192           SET1      [HL].1
   1137              mDATWrite(U32Bit, DATTrpDataToWrite, u32DataPageToWriteL, Default);
   \   009E   891C           MOVW      AX,SP
   \   00A0   D6             MOVW      HL,AX
   \   00A1   AE02           MOV       A,[HL+0x02]
   \   00A3   72             MOV       C,A
   \   00A4   AE03           MOV       A,[HL+0x03]
   \   00A6   73             MOV       B,A
   \   00A7   87             MOV       A,[HL]
   \   00A8   70             MOV       X,A
   \   00A9   AE01           MOV       A,[HL+0x01]
   \   00AB   03....         MOVW      DatTrpExportData+8,AX
   \   00AE   C2             MOVW      AX,BC
   \   00AF   03....         MOVW      DatTrpExportData+10,AX
   1138              mDATWrite(U8Bit, DATTrpPageNumber, cPage2, Default);
   \   00B2   A102           MOV       A,#2
   \   00B4   16....         MOVW      HL,#DatTrpExportData+38
   \   00B7   97             MOV       [HL],A
   1139              mDATControl(Trp, cDATTrpWritePage);
   \   00B8   A105           MOV       A,#5
   \   00BA   ..             CALLT     [__T_DATTrpControl]
   1140          }
   \   00BB   B0             POP       AX
   \   00BC   B0             POP       AX
   \   00BD   B2             POP       BC
   \   00BE   AF             RET       
   \   00BF                  REQUIRE ?CL78K_V4_6_L00
   1141          //*****************************************************************************
   1142          //  DESCRIPTION : Write RSK Error Action
   1143          //  
   1144          //  PARAMETERS (Type,Name,Min,Max) :  none
   1145          //
   1146          //  RETURN VALUE :  none
   1147          // 
   1148          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1149          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1150          void LRNWriteRSKErrorAction(void)
   \                     LRNWriteRSKErrorAction:
   1151          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1152          #ifdef X90_PROJECT
   1153              LRNWriteRSKErrorAction_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNWriteRSKErrorAction_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNWriteRSKErrorAction_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1154          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1155          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1156          static MEM_TYPE void LRNWriteRSKErrorAction_Static( void )
   \                     LRNWriteRSKErrorAction_Static:
   1157          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1158          #endif
   1159          
   1160              if (u8LearningMode == cFactoryMode)
   \   0000   8E....         MOV       A,u8LearningMode
   \   0003   51             DEC       A
   \   0004   BD11           BNZ       ??LRNFactoryModeInProgress_24
   1161              {
   1162                  if(cFalse != mDATRead(U1Bit, DATTrpWriteAccessWritingError, Default))
   \   0006   16....         MOVW      HL,#DatTrpExportData+51
   \   0009   31D704         BF        [HL].5, ??LRNFactoryModeInProgress_25
   1163                  {
   1164                      mDATWrite(U8Bit, COD_ERR_APP, cCodeError14h, Default);
   \   000C   A114           MOV       A,#20
   \   000E   FA09           BR        ??LRNFactoryModeInProgress_26
   1165                  }
   1166                  else if(cFalse != mDATRead(U1Bit, DATTrpWriteAccessReadingError, Default))
   \                     ??LRNFactoryModeInProgress_25:
   \   0010   31E70A         BF        [HL].6, ??LRNFactoryModeInProgress_27
   1167                  {
   1168                      mDATWrite(U8Bit, COD_ERR_APP, cCodeError15h, Default);
   \   0013   A115           MOV       A,#21
   \   0015   FA02           BR        ??LRNFactoryModeInProgress_26
   1169                  }
   1170                  else
   1171                  {
   1172                      //Nothing to do
   1173                  }
   1174              }
   1175              else // if(u8LearningMode == cKeyReassignment)
   1176              {
   1177                  mDATWrite(U8Bit, COD_ERR_APP, cCodeErrorB5h, Default);
   \                     ??LRNFactoryModeInProgress_24:
   \   0017   A1B5           MOV       A,#181
   \                     ??LRNFactoryModeInProgress_26:
   \   0019   16....         MOVW      HL,#DATCmnImmoData+22
   \   001C   97             MOV       [HL],A
   1178              }
   1179          }
   \                     ??LRNFactoryModeInProgress_27:
   \   001D   AF             RET       
   \   001E                  REQUIRE ?CL78K_V4_6_L00
   1180          //*****************************************************************************
   1181          //  DESCRIPTION : Start writing of ISK Low into transponder memory
   1182          //  
   1183          //  PARAMETERS (Type,Name,Min,Max) :  none
   1184          //
   1185          //  RETURN VALUE :  none
   1186          // 
   1187          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1188          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1189          void LRNWriteISKLowIntoTransponder(void)
   \                     LRNWriteISKLowIntoTransponder:
   1190          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1191          #ifdef X90_PROJECT
   1192              LRNWriteISKLowIntoTransponder_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNWriteISKLowIntoTransponder_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNWriteISKLowIntoTransponder_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1193          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1194          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1195          static MEM_TYPE void LRNWriteISKLowIntoTransponder_Static( void )
   \                     LRNWriteISKLowIntoTransponder_Static:
   1196          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1197          #endif
   1198          
   1199              U32 u32DataPageToWriteL;
   1200              U8  u8IndexL;
   1201          
   1202              for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0001   14....         MOVW      DE,#DatTrpExportData
   \   0004   12....         MOVW      BC,#DATTrpTransportISK
   \   0007   A006           MOV       X,#6
   1203              {
   1204                  mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, mDATReadTable(U8Bit, DATTrpTransportISK, u8IndexL, Default), Default);
   \                     ??LRNWriteISKLowIntoTransponder_Static_0:
   \   0009   B3             PUSH      BC
   \   000A   B6             POP       HL
   \   000B   87             MOV       A,[HL]
   \   000C   B5             PUSH      DE
   \   000D   B6             POP       HL
   \   000E   E6             XCHW      AX,HL
   \   000F   CA2000         ADDW      AX,#32
   \   0012   E6             XCHW      AX,HL
   \   0013   97             MOV       [HL],A
   1205              }
   \   0014   B3             PUSH      BC
   \   0015   B6             POP       HL
   \   0016   86             INCW      HL
   \   0017   B7             PUSH      HL
   \   0018   B2             POP       BC
   \   0019   84             INCW      DE
   \   001A   50             DEC       X
   \   001B   BDEC           BNZ       ??LRNWriteISKLowIntoTransponder_Static_0
   1206          
   1207              if (mDATRead(U1Bit, EEP_BCMBlank, Default) != 0)
   \   001D   16....         MOVW      HL,#DATDbkMirrors+143
   \   0020   318734         BF        [HL].0, ??LRNFactoryModeInProgress_28
   1208              {
   1209                  u32DataPageToWriteL  = ((U32)ImmobilizerSecretKey[cSKIndex0] << cShiftBy24);
   1210                  u32DataPageToWriteL |= ((U32)ImmobilizerSecretKey[cSKIndex1] << cShiftBy16);
   1211                  u32DataPageToWriteL |= ((U32)ImmobilizerSecretKey[cSKIndex2] << cShiftBy8);
   1212                  u32DataPageToWriteL |= ((U32)ImmobilizerSecretKey[cSKIndex3]);
   \   0023   8E....         MOV       A,ImmobilizerSecretKey+3
   \   0026   74             MOV       E,A
   \   0027   A500           MOV       D,#0
   \   0029   160000         MOVW      HL,#0
   \   002C   B7             PUSH      HL
   \   002D   B5             PUSH      DE
   \   002E   8E....         MOV       A,ImmobilizerSecretKey+2
   \   0031   120000         MOVW      BC,#0
   \   0034   70             MOV       X,A
   \   0035   63             MOV       A,B
   \   0036   E2             XCHW      AX,BC
   \   0037   E2             XCHW      AX,BC
   \   0038   60             MOV       A,X
   \   0039   A000           MOV       X,#0
   \   003B   B3             PUSH      BC
   \   003C   B1             PUSH      AX
   \   003D   8E....         MOV       A,ImmobilizerSecretKey+1
   \   0040   70             MOV       X,A
   \   0041   63             MOV       A,B
   \   0042   D2             MOVW      BC,AX
   \   0043   70             MOV       X,A
   \   0044   B3             PUSH      BC
   \   0045   B1             PUSH      AX
   \   0046   8E....         MOV       A,ImmobilizerSecretKey
   \   0049   73             MOV       B,A
   \   004A   67             MOV       A,H
   \   004B   72             MOV       C,A
   \   004C   9A....         CALL      ?L_IOR_L03
   \   004F   9A....         CALL      ?L_IOR_L03
   \   0052   9A....         CALL      ?L_IOR_L03
   \   0055   FA32           BR        ??LRNFactoryModeInProgress_29
   1213              }
   1214              else
   1215              {
   1216                  u32DataPageToWriteL  = ((U32)mDATReadTable(U8Bit, EEP_ImmoSecretKey, cSKIndex0, Default) << cShiftBy24);
   1217                  u32DataPageToWriteL |= ((U32)mDATReadTable(U8Bit, EEP_ImmoSecretKey, cSKIndex1, Default) << cShiftBy16);
   1218                  u32DataPageToWriteL |= ((U32)mDATReadTable(U8Bit, EEP_ImmoSecretKey, cSKIndex2, Default) << cShiftBy8);
   1219                  u32DataPageToWriteL |= ((U32)mDATReadTable(U8Bit, EEP_ImmoSecretKey, cSKIndex3, Default));
   \                     ??LRNFactoryModeInProgress_28:
   \   0057   8E....         MOV       A,DATDbkMirrors+109
   \   005A   74             MOV       E,A
   \   005B   A500           MOV       D,#0
   \   005D   160000         MOVW      HL,#0
   \   0060   B7             PUSH      HL
   \   0061   B5             PUSH      DE
   \   0062   8E....         MOV       A,DATDbkMirrors+108
   \   0065   120000         MOVW      BC,#0
   \   0068   70             MOV       X,A
   \   0069   63             MOV       A,B
   \   006A   E2             XCHW      AX,BC
   \   006B   E2             XCHW      AX,BC
   \   006C   60             MOV       A,X
   \   006D   A000           MOV       X,#0
   \   006F   B3             PUSH      BC
   \   0070   B1             PUSH      AX
   \   0071   8E....         MOV       A,DATDbkMirrors+107
   \   0074   70             MOV       X,A
   \   0075   63             MOV       A,B
   \   0076   D2             MOVW      BC,AX
   \   0077   70             MOV       X,A
   \   0078   B3             PUSH      BC
   \   0079   B1             PUSH      AX
   \   007A   8E....         MOV       A,DATDbkMirrors+106
   \   007D   73             MOV       B,A
   \   007E   67             MOV       A,H
   \   007F   72             MOV       C,A
   \   0080   9A....         CALL      ?L_IOR_L03
   \   0083   9A....         CALL      ?L_IOR_L03
   \   0086   9A....         CALL      ?L_IOR_L03
   1220              }  
   1221          
   1222              // Start the writing of the ISK Low into the transponder memory
   1223              mDATWrite(U1Bit, DATTrpWriteSecretKeyHigh, 0, Default);
   \                     ??LRNFactoryModeInProgress_29:
   \   0089   16....         MOVW      HL,#DatTrpExportData+50
   \   008C   7193           CLR1      [HL].1
   1224              mDATWrite(U32Bit, DATTrpDataToWrite, u32DataPageToWriteL, Default);
   \   008E   03....         MOVW      DatTrpExportData+8,AX
   \   0091   C2             MOVW      AX,BC
   \   0092   03....         MOVW      DatTrpExportData+10,AX
   1225              mDATWrite(U8Bit, DATTrpPageNumber, cPage1, Default);
   \   0095   A101           MOV       A,#1
   \   0097   16....         MOVW      HL,#DatTrpExportData+38
   \   009A   97             MOV       [HL],A
   1226              mDATControl(Trp, cDATTrpWritePage);
   \   009B   A105           MOV       A,#5
   \   009D   ..             CALLT     [__T_DATTrpControl]
   1227          }
   \   009E   B2             POP       BC
   \   009F   AF             RET       
   \   00A0                  REQUIRE ?CL78K_V4_6_L00
   1228          
   1229          //*****************************************************************************
   1230          //  DESCRIPTION : Start immobilizer antenna sleep control
   1231          //  
   1232          //  PARAMETERS (Type,Name,Min,Max) :  none
   1233          //
   1234          //  RETURN VALUE :  none
   1235          // 
   1236          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1237          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1238          void LRNPutImmobilizerAntennaInSleepMode(void)
   \                     LRNPutImmobilizerAntennaInSleepMode:
   1239          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1240              mDATControl(Trp, cDATTrpSleep);
   \   0000   A101           MOV       A,#1
   \   0002   ..             CALLT     [__T_DATTrpControl]
   1241          }
   \   0003   AF             RET       
   \   0004                  REQUIRE ?CL78K_V4_6_L00
   1242          //*****************************************************************************
   1243          //  DESCRIPTION : Test if sleep control finished not successfully
   1244          //  
   1245          //  PARAMETERS (Type,Name,Min,Max) :  none
   1246          //
   1247          //  RETURN VALUE :  cFalse or cTrue
   1248          // 
   1249          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1250          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1251          BOOL LRNSleepModeNOK(void)
   \                     LRNSleepModeNOK:
   1252          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1253              return (mDATRead(U8Bit, DATTrpSleepControlState, Default) == cDATTrpServiceNotSuccessful);
   \   0000   8E....         MOV       A,DatTrpExportData+46
   \   0003   4D03           CMP       A,#3
   \   0005   BD03           BNZ       ??LRNFactoryModeInProgress_152
   \   0007   A101           MOV       A,#1
   \   0009   AF             RET       
   \                     ??LRNFactoryModeInProgress_152:
   \   000A   A100           MOV       A,#0
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
   1254          }
   1255          //*****************************************************************************
   1256          //  DESCRIPTION : Test if sleep control finished successfully
   1257          //  
   1258          //  PARAMETERS (Type,Name,Min,Max) :  none
   1259          //
   1260          //  RETURN VALUE :  cFalse or cTrue
   1261          // 
   1262          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1263          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1264          BOOL LRNSleepModeOK(void)
   \                     LRNSleepModeOK:
   1265          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1266              return (mDATRead(U8Bit, DATTrpSleepControlState, Default) == cDATTrpServiceSuccessful);
   \   0000   8E....         MOV       A,DatTrpExportData+46
   \   0003   4D02           CMP       A,#2
   \   0005   BD03           BNZ       ??LRNFactoryModeInProgress_153
   \   0007   A101           MOV       A,#1
   \   0009   AF             RET       
   \                     ??LRNFactoryModeInProgress_153:
   \   000A   A100           MOV       A,#0
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
   1267          }
   1268          //*****************************************************************************
   1269          //  DESCRIPTION : Start authentication with the last calculated ISK.
   1270          //  
   1271          //  PARAMETERS (Type,Name,Min,Max) :  none
   1272          //
   1273          //  RETURN VALUE :  none
   1274          // 
   1275          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1276          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1277          void LRNAuthenticationWithCalculateISK(void)
   \                     LRNAuthenticationWithCalculateISK:
   1278          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1279          #ifdef X90_PROJECT
   1280              LRNAuthenticationWithCalculateISK_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNAuthenticationWithCalculateISK_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNAuthenticationWithCalculateISK_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1281          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1282          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1283          static MEM_TYPE void LRNAuthenticationWithCalculateISK_Static( void )
   \                     LRNAuthenticationWithCalculateISK_Static:
   1284          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1285          #endif
   1286          
   1287              U8 u8IndexL;
   1288          
   1289              if (mDATRead(U1Bit, EEP_BCMBlank, Default) == 0)
   \   0001   16....         MOVW      HL,#DATDbkMirrors+143
   \   0004   318624         BT        [HL].0, ??LRNFactoryModeInProgress_30
   1290              {
   1291                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0007   12....         MOVW      BC,#DatTrpExportData
   \   000A   16....         MOVW      HL,#DATDbkMirrors
   \   000D   A006           MOV       X,#6
   1292                  {
   1293                      mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, mDATReadTable(U8Bit, EEP_ImmoSecretKey, u8IndexL, Default), Default);
   \                     ??LRNAuthenticationWithCalculateISK_Static_0:
   \   000F   B7             PUSH      HL
   \   0010   B4             POP       DE
   \   0011   E4             XCHW      AX,DE
   \   0012   CA6A00         ADDW      AX,#106
   \   0015   E4             XCHW      AX,DE
   \   0016   85             MOV       A,[DE]
   \   0017   B3             PUSH      BC
   \   0018   B4             POP       DE
   \   0019   E4             XCHW      AX,DE
   \   001A   CA2000         ADDW      AX,#32
   \   001D   E4             XCHW      AX,DE
   \   001E   95             MOV       [DE],A
   1294                  }    
   \   001F   86             INCW      HL
   \   0020   B3             PUSH      BC
   \   0021   B4             POP       DE
   \   0022   84             INCW      DE
   \   0023   B5             PUSH      DE
   \   0024   B2             POP       BC
   \   0025   50             DEC       X
   \   0026   60             MOV       A,X
   \   0027   AD1E           BZ        ??LRNFactoryModeInProgress_31
   \   0029   FAE4           BR        ??LRNAuthenticationWithCalculateISK_Static_0
   1295              }
   1296              else
   1297              {
   1298                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_30:
   \   002B   14....         MOVW      DE,#DatTrpExportData
   \   002E   12....         MOVW      BC,#ImmobilizerSecretKey
   \   0031   A006           MOV       X,#6
   1299                  {
   1300                      mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, ImmobilizerSecretKey[u8IndexL], Default);
   \                     ??LRNAuthenticationWithCalculateISK_Static_1:
   \   0033   B3             PUSH      BC
   \   0034   B6             POP       HL
   \   0035   87             MOV       A,[HL]
   \   0036   B5             PUSH      DE
   \   0037   B6             POP       HL
   \   0038   E6             XCHW      AX,HL
   \   0039   CA2000         ADDW      AX,#32
   \   003C   E6             XCHW      AX,HL
   \   003D   97             MOV       [HL],A
   1301                  }
   \   003E   B3             PUSH      BC
   \   003F   B6             POP       HL
   \   0040   86             INCW      HL
   \   0041   B7             PUSH      HL
   \   0042   B2             POP       BC
   \   0043   84             INCW      DE
   \   0044   50             DEC       X
   \   0045   BDEC           BNZ       ??LRNAuthenticationWithCalculateISK_Static_1
   1302              }
   1303          
   1304              mDATWrite(U1Bit, DATTrpAuthentInLearningMode, 1, Default);
   \                     ??LRNFactoryModeInProgress_31:
   \   0047   A103           MOV       A,#3
   \   0049   16....         MOVW      HL,#DatTrpExportData+50
   \   004C   7182           SET1      [HL].0
   1305              mDATControl(Trp, cDATTrpAuthenticate);
   \   004E   ..             CALLT     [__T_DATTrpControl]
   1306          }
   \   004F   B2             POP       BC
   \   0050   AF             RET       
   \   0051                  REQUIRE ?CL78K_V4_6_L00
   1307          
   1308          //*****************************************************************************
   1309          //  DESCRIPTION : 
   1310          //  
   1311          //  PARAMETERS (Type,Name,Min,Max) :  none
   1312          //
   1313          //  RETURN VALUE :  none
   1314          // 
   1315          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1316          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1317          void LRNFactoryModeAuthentNewISKNOK(void)
   \                     LRNFactoryModeAuthentNewISKNOK:
   1318          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1319          #ifdef X90_PROJECT
   1320              LRNFactoryModeAuthentNewISKNOK_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNFactoryModeAuthentNewISKNOK_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNFactoryModeAuthentNewISKNOK_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1321          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1322          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1323          static MEM_TYPE void LRNFactoryModeAuthentNewISKNOK_Static(void)
   \                     LRNFactoryModeAuthentNewISKNOK_Static:
   1324          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1325          #endif
   1326          
   1327              mDATWrite(U1Bit, DATTrpKeyLearningElapsed, 1, Default);
   \   0000   16....         MOVW      HL,#DatTrpExportData+51
   \   0003   71C2           SET1      [HL].4
   1328          
   1329              if (u8LearningMode == cFactoryMode)
   \   0005   8E....         MOV       A,u8LearningMode
   \   0008   51             DEC       A
   \   0009   BD04           BNZ       ??LRNFactoryModeInProgress_32
   1330              {
   1331                  mDATWrite(U8Bit, COD_ERR_APP, cCodeError13h, Default);    
   \   000B   A113           MOV       A,#19
   \   000D   FA02           BR        ??LRNFactoryModeInProgress_33
   1332              }
   1333              else // if(u8LearningMode == cKeyReassignment)
   1334              {
   1335                  mDATWrite(U8Bit, COD_ERR_APP, cCodeErrorB4h, Default);
   \                     ??LRNFactoryModeInProgress_32:
   \   000F   A1B4           MOV       A,#180
   \                     ??LRNFactoryModeInProgress_33:
   \   0011   16....         MOVW      HL,#DATCmnImmoData+22
   \   0014   97             MOV       [HL],A
   1336              }
   1337          }
   \   0015   AF             RET       
   \   0016                  REQUIRE ?CL78K_V4_6_L00
   1338          
   1339          //*****************************************************************************
   1340          //  DESCRIPTION : Test if resynchronization service is finished not successfully.
   1341          //  
   1342          //  PARAMETERS (Type,Name,Min,Max) :  none
   1343          //
   1344          //  RETURN VALUE :  cFalse or cTrue
   1345          // 
   1346          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1347          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1348          BOOL LRNResynchroFinishedNOK(void)
   \                     LRNResynchroFinishedNOK:
   1349          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1350              return (mDATRead(U8Bit, DATTrpResynchronizationState, Default) == cDATTrpServiceNotSuccessful);
   \   0000   8E....         MOV       A,DatTrpExportData+49
   \   0003   4D03           CMP       A,#3
   \   0005   BD03           BNZ       ??LRNFactoryModeInProgress_154
   \   0007   A101           MOV       A,#1
   \   0009   AF             RET       
   \                     ??LRNFactoryModeInProgress_154:
   \   000A   A100           MOV       A,#0
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
   1351          }
   1352          //*****************************************************************************
   1353          //  DESCRIPTION : Test if resynchronization service is finished successfully.
   1354          //  
   1355          //  PARAMETERS (Type,Name,Min,Max) :  none
   1356          //
   1357          //  RETURN VALUE :  cFalse or cTrue
   1358          // 
   1359          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1360          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1361          BOOL LRNResynchroFinishedOK(void)
   \                     LRNResynchroFinishedOK:
   1362          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1363              BOOL bResultL = cFalse;
   \   0000   A000           MOV       X,#0
   1364          
   1365              if (mDATRead(U8Bit, DATTrpResynchronizationState, Default) == cDATTrpServiceSuccessful)
   \   0002   8E....         MOV       A,DatTrpExportData+49
   \   0005   4D02           CMP       A,#2
   \   0007   BD07           BNZ       ??LRNFactoryModeInProgress_155
   1366              {
   1367                  mDATWrite(U1Bit, SynchroSuccessfullyWritten, 1, Default);
   \   0009   A101           MOV       A,#1
   \   000B   16....         MOVW      HL,#DATCmnImmoData+4
   \   000E   97             MOV       [HL],A
   1368                  bResultL = cTrue;
   \   000F   70             MOV       X,A
   1369              }
   1370              return (bResultL);
   \                     ??LRNFactoryModeInProgress_155:
   \   0010   60             MOV       A,X
   \   0011   AF             RET       
   \   0012                  REQUIRE ?CL78K_V4_6_L00
   1371          }
   1372          //*****************************************************************************
   1373          //  DESCRIPTION : Start resynchronization service.
   1374          //  
   1375          //  PARAMETERS (Type,Name,Min,Max) :  none
   1376          //
   1377          //  RETURN VALUE :  none
   1378          // 
   1379          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1380          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1381          void LRNResynchronizeTransponder(void)
   \                     LRNResynchronizeTransponder:
   1382          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1383              mDATWrite(U1Bit, DATTrpWriteSecretKeyHigh, 0, Default);
   \   0000   A106           MOV       A,#6
   \   0002   16....         MOVW      HL,#DatTrpExportData+50
   \   0005   7193           CLR1      [HL].1
   1384              mDATControl(Trp, cDATTrpResynchronize);
   \   0007   ..             CALLT     [__T_DATTrpControl]
   1385          }
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1386          
   1387          //*****************************************************************************
   1388          //  DESCRIPTION : Bcm Replacement Resynchronization failure error code
   1389          //  
   1390          //  PARAMETERS (Type,Name,Min,Max) :  none
   1391          //
   1392          //  RETURN VALUE :  none
   1393          // 
   1394          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1395          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1396          void LRNBcmReplacementResyncNOK(void)
   \                     LRNBcmReplacementResyncNOK:
   1397          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1398              mDATWrite(U8Bit, COD_ERR_APP, cCodeErrorA2h, Default);
   \   0000   A1A2           MOV       A,#162
   \   0002   9B....         BR        N:?Subroutine3
   \   0005                  REQUIRE ?CL78K_V4_6_L00
   1399          }
   1400          
   1401          //*****************************************************************************
   1402          //  DESCRIPTION : Resynchro Error Action.
   1403          //  
   1404          //  PARAMETERS (Type,Name,Min,Max) :  none
   1405          //
   1406          //  RETURN VALUE :  none
   1407          // 
   1408          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1409          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1410          void LRNResynchroErrorAction(void)
   \                     LRNResynchroErrorAction:
   1411          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1412          #ifdef X90_PROJECT
   1413              LRNResynchroErrorAction_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNResynchroErrorAction_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNResynchroErrorAction_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1414          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1415          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1416          static MEM_TYPE void LRNResynchroErrorAction_Static( void )
   \                     LRNResynchroErrorAction_Static:
   1417          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1418          #endif
   1419          
   1420              if (u8LearningMode == cFactoryMode)
   \   0000   8E....         MOV       A,u8LearningMode
   \   0003   51             DEC       A
   \   0004   BD11           BNZ       ??LRNFactoryModeInProgress_34
   1421              {
   1422                  if(cFalse != mDATRead(U1Bit, DATTrpWriteAccessWritingError, Default))
   \   0006   16....         MOVW      HL,#DatTrpExportData+51
   \   0009   31D704         BF        [HL].5, ??LRNFactoryModeInProgress_35
   1423                  {
   1424                      mDATWrite(U8Bit, COD_ERR_APP, cCodeError16h, Default);
   \   000C   A116           MOV       A,#22
   \   000E   FA09           BR        ??LRNFactoryModeInProgress_36
   1425                  }
   1426                  else if(cFalse != mDATRead(U1Bit, DATTrpWriteAccessReadingError, Default))
   \                     ??LRNFactoryModeInProgress_35:
   \   0010   31E70A         BF        [HL].6, ??LRNFactoryModeInProgress_37
   1427                  {
   1428                      mDATWrite(U8Bit, COD_ERR_APP, cCodeError17h, Default);
   \   0013   A117           MOV       A,#23
   \   0015   FA02           BR        ??LRNFactoryModeInProgress_36
   1429                  }
   1430                  else
   1431                  {
   1432                      //Nothing to do
   1433                  }
   1434              }
   1435              else // if(u8LearningMode == cKeyReassignment)
   1436              {
   1437                  mDATWrite(U8Bit, COD_ERR_APP, cCodeErrorB6h, Default);
   \                     ??LRNFactoryModeInProgress_34:
   \   0017   A1B6           MOV       A,#182
   \                     ??LRNFactoryModeInProgress_36:
   \   0019   16....         MOVW      HL,#DATCmnImmoData+22
   \   001C   97             MOV       [HL],A
   1438              }
   1439          }
   \                     ??LRNFactoryModeInProgress_37:
   \   001D   AF             RET       
   \   001E                  REQUIRE ?CL78K_V4_6_L00
   1440          
   1441          //*****************************************************************************
   1442          //  DESCRIPTION : Test if key locking is authorized.
   1443          //  
   1444          //  PARAMETERS (Type,Name,Min,Max) :  none
   1445          //
   1446          //  RETURN VALUE :  cFalse or cTrue
   1447          // 
   1448          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1449          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1450          BOOL LRNLockingTrpIsAuthorized(void)
   \                     LRNLockingTrpIsAuthorized:
   1451          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1452              return (0 == mDATRead(U1Bit, EEP_CALULKTR, Default));
   \   0000   A100           MOV       A,#0
   \   0002   16....         MOVW      HL,#DATDbkMirrors+27
   \   0005   71C4           MOV1      CY,[HL].4
   \   0007   27             ROLC      A,0x1
   \   0008   7D01           XOR       A,#1
   \   000A   AF             RET       
   \   000B                  REQUIRE ?CL78K_V4_6_L00
   1453          }
   1454          //*****************************************************************************
   1455          //  DESCRIPTION : Start locking of transponder
   1456          //  
   1457          //  PARAMETERS (Type,Name,Min,Max) :  none
   1458          //
   1459          //  RETURN VALUE :  none
   1460          // 
   1461          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1462          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1463          void LRNLockingTransponder(void)
   \                     LRNLockingTransponder:
   1464          {  
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1465          #ifdef X90_PROJECT
   1466              LRNLockingTransponder_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNLockingTransponder_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNLockingTransponder_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1467          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1468          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1469          static MEM_TYPE void LRNLockingTransponder_Static(void)
   \                     LRNLockingTransponder_Static:
   1470          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   1000F8         MOVW      AX,#63488
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
   1471          #endif
   1472          
   1473              if (mDATRead(U1Bit, DATTrpKeyWithRF, Default) != 0)
   1474              {
   1475                  u32TrpConfigAndPassWordTag |= cLockRFKey;
   \   0004   B1             PUSH      AX
   \   0005   A100           MOV       A,#0
   \   0007   B1             PUSH      AX
   \   0008   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   000B   D2             MOVW      BC,AX
   \   000C   02....         MOVW      AX,u32TrpConfigAndPassWordTag+2
   \   000F   E2             XCHW      AX,BC
   \   0010   9A....         CALL      ?L_IOR_L03
   \   0013   03....         MOVW      u32TrpConfigAndPassWordTag,AX
   \   0016   E2             XCHW      AX,BC
   \   0017   03....         MOVW      u32TrpConfigAndPassWordTag+2,AX
   1476              }
   1477              else
   1478              {
   1479                  u32TrpConfigAndPassWordTag |= cLockNonRFKey;
   1480              }
   1481          
   1482              mDATWrite(U1Bit, DATTrpWriteSecretKeyHigh, 0, Default);
   \   001A   16....         MOVW      HL,#DatTrpExportData+50
   \   001D   7193           CLR1      [HL].1
   1483              mDATWrite(U32Bit, DATTrpDataToWrite, u32TrpConfigAndPassWordTag, Default);
   \   001F   03....         MOVW      DatTrpExportData+10,AX
   \   0022   C2             MOVW      AX,BC
   \   0023   03....         MOVW      DatTrpExportData+8,AX
   1484              mDATWrite(U8Bit, DATTrpPageNumber, cPage3, Default);
   \   0026   A103           MOV       A,#3
   \   0028   16....         MOVW      HL,#DatTrpExportData+38
   \   002B   97             MOV       [HL],A
   1485              mDATControl(Trp, cDATTrpWritePage);
   \   002C   A105           MOV       A,#5
   \   002E   ..             CALLT     [__T_DATTrpControl]
   1486          }
   \   002F   B2             POP       BC
   \   0030   AF             RET       
   \   0031                  REQUIRE ?CL78K_V4_6_L00
   1487          
   1488          //*****************************************************************************
   1489          //  DESCRIPTION : Locking Transponder Error
   1490          //  
   1491          //  PARAMETERS (Type,Name,Min,Max) :  none
   1492          //
   1493          //  RETURN VALUE :  none
   1494          // 
   1495          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1496          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1497          void LRNLockingTransponderError(void)
   \                     LRNLockingTransponderError:
   1498          {  
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1499              if (u8LearningMode == cFactoryMode)
   \   0000   8E....         MOV       A,u8LearningMode
   \   0003   51             DEC       A
   \   0004   BD04           BNZ       ??LRNFactoryModeInProgress_156
   1500              {
   1501                  mDATWrite(U8Bit, COD_ERR_APP, cCodeError18h, Default);
   \   0006   A118           MOV       A,#24
   \   0008   FA02           BR        ??LRNFactoryModeInProgress_157
   1502              }
   1503              else // if(u8LearningMode == cKeyReassignment)
   1504              {
   1505                  mDATWrite(U8Bit, COD_ERR_APP, cCodeErrorB7h, Default);
   \                     ??LRNFactoryModeInProgress_156:
   \   000A   A1B7           MOV       A,#183
   1506              }
   \                     ??LRNFactoryModeInProgress_157:
   \   000C                  REQUIRE ?CL78K_V4_6_L00
   \   000C                  REQUIRE ?Subroutine3
   \   000C                  ; // Fall through to label ?Subroutine3
   1507          }
   1508          
   1509          //*****************************************************************************
   1510          //  DESCRIPTION : Indicate that the transponder memory is locked.
   1511          //  
   1512          //  PARAMETERS (Type,Name,Min,Max) :  none
   1513          //
   1514          //  RETURN VALUE :  none
   1515          // 
   1516          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1517          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1518          void LRNKeyLockedForEver(void)
   \                     LRNKeyLockedForEver:
   1519          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1520              mDATWrite(U1Bit, DATTrpPresentKeyLocked, 1, Default);
   \   0000   16....         MOVW      HL,#DatTrpExportData+51
   \   0003   7192           SET1      [HL].1
   1521          }
   \   0005   AF             RET       
   \   0006                  REQUIRE ?CL78K_V4_6_L00
   1522          //*****************************************************************************
   1523          //  DESCRIPTION : Start writing of all transponder data in BCM EEPROM.
   1524          //  
   1525          //  PARAMETERS (Type,Name,Min,Max) :  none
   1526          //
   1527          //  RETURN VALUE :  none
   1528          // 
   1529          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1530          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1531          void LRNWriteInEepromTransponderCodes(void)
   \                     LRNWriteInEepromTransponderCodes:
   1532          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1533          #ifdef X90_PROJECT
   1534              LRNWriteInEepromTransponderCodes_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNWriteInEepromTransponderCodes_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNWriteInEepromTransponderCodes_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1535          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1536          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1537          static MEM_TYPE void LRNWriteInEepromTransponderCodes_Static(void)
   \                     LRNWriteInEepromTransponderCodes_Static:
   1538          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 12
   \   0001   ..             CALLT     [__T_?FUNC_ENTER_L06]
   \   0002   0C00           DW        0xC
   1539          #endif
   1540          
   1541              U8 u8IndexL;
   1542              U32 u32RandomValue;
   1543              tKeyType KeyNumberL;
   1544          
   1545              KeyNumberL = (tKeyType)mDATRead(U8Bit, NumberOfKeysLearnt, Default);
   \   0004   8E....         MOV       A,DATCmnImmoData+13
   \   0007   D6             MOVW      HL,AX
   \   0008   891C           MOVW      AX,SP
   \   000A   80             INCW      AX
   \   000B   E6             XCHW      AX,HL
   \   000C   97             MOV       [HL],A
   1546          
   1547              if (KeyNumberL == cKeyNumber1)
   \   000D   4D00           CMP       A,#0
   \   000F   AD03           BZ        $+5
   \   0011   9B....         BR        N:??LRNFactoryModeInProgress_38
   1548              {   
   1549                  // Store in Eeprom the ISK calculated, 
   1550                  // the VERLOG code calculated and the encoded After Sale code
   1551                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0014   10....         MOVW      AX,#DATDbkMirrors
   \   0017   D6             MOVW      HL,AX
   \   0018   891C           MOVW      AX,SP
   \   001A   E6             XCHW      AX,HL
   \   001B   BE03           MOV       [HL+0x03],A
   \   001D   60             MOV       A,X
   \   001E   BE02           MOV       [HL+0x02],A
   \   0020   10....         MOVW      AX,#DatAprExportData
   \   0023   14....         MOVW      DE,#ImmobilizerSecretKey
   \   0026   D6             MOVW      HL,AX
   \   0027   891C           MOVW      AX,SP
   \   0029   E6             XCHW      AX,HL
   \   002A   BE07           MOV       [HL+0x07],A
   \   002C   60             MOV       A,X
   \   002D   BE06           MOV       [HL+0x06],A
   \   002F   10....         MOVW      AX,#AfterSaleCode
   \   0032   D6             MOVW      HL,AX
   \   0033   891C           MOVW      AX,SP
   \   0035   E6             XCHW      AX,HL
   \   0036   BE05           MOV       [HL+0x05],A
   \   0038   60             MOV       A,X
   \   0039   BE04           MOV       [HL+0x04],A
   \   003B   A106           MOV       A,#6
   \   003D   97             MOV       [HL],A
   1552                  {
   1553                      mDATWriteTable(U8Bit, EEP_ImmoSecretKey, u8IndexL, ImmobilizerSecretKey[u8IndexL], Default);
   \                     ??LRNWriteInEepromTransponderCodes_Static_0:
   \   003E   85             MOV       A,[DE]
   \   003F   72             MOV       C,A
   \   0040   AE02           MOV       A,[HL+0x02]
   \   0042   70             MOV       X,A
   \   0043   AE03           MOV       A,[HL+0x03]
   \   0045   D6             MOVW      HL,AX
   \   0046   AE6A           MOV       A,[HL+0x6A]
   \   0048   614A           CMP       A,C
   \   004A   AD13           BZ        ??LRNFactoryModeInProgress_39
   \   004C   891C           MOVW      AX,SP
   \   004E   D6             MOVW      HL,AX
   \   004F   AE02           MOV       A,[HL+0x02]
   \   0051   70             MOV       X,A
   \   0052   AE03           MOV       A,[HL+0x03]
   \   0054   CA6A00         ADDW      AX,#106
   \   0057   D6             MOVW      HL,AX
   \   0058   62             MOV       A,C
   \   0059   97             MOV       [HL],A
   \   005A   A103           MOV       A,#3
   \   005C   9A....         CALL      DATDbkStartUpdate
   1554                      mDATWriteTable(U8Bit, DATAprAfterSaleCode, u8IndexL, AfterSaleCode[u8IndexL], Default);
   \                     ??LRNFactoryModeInProgress_39:
   \   005F   891C           MOVW      AX,SP
   \   0061   D6             MOVW      HL,AX
   \   0062   AE04           MOV       A,[HL+0x04]
   \   0064   70             MOV       X,A
   \   0065   AE05           MOV       A,[HL+0x05]
   \   0067   D6             MOVW      HL,AX
   \   0068   87             MOV       A,[HL]
   \   0069   72             MOV       C,A
   \   006A   891C           MOVW      AX,SP
   \   006C   D6             MOVW      HL,AX
   \   006D   AE06           MOV       A,[HL+0x06]
   \   006F   70             MOV       X,A
   \   0070   AE07           MOV       A,[HL+0x07]
   \   0072   CA1400         ADDW      AX,#20
   \   0075   D6             MOVW      HL,AX
   \   0076   62             MOV       A,C
   \   0077   97             MOV       [HL],A
   1555                  }
   \   0078   891C           MOVW      AX,SP
   \   007A   D6             MOVW      HL,AX
   \   007B   AE04           MOV       A,[HL+0x04]
   \   007D   70             MOV       X,A
   \   007E   AE05           MOV       A,[HL+0x05]
   \   0080   D6             MOVW      HL,AX
   \   0081   86             INCW      HL
   \   0082   891C           MOVW      AX,SP
   \   0084   E6             XCHW      AX,HL
   \   0085   BE05           MOV       [HL+0x05],A
   \   0087   60             MOV       A,X
   \   0088   BE04           MOV       [HL+0x04],A
   \   008A   AE06           MOV       A,[HL+0x06]
   \   008C   70             MOV       X,A
   \   008D   AE07           MOV       A,[HL+0x07]
   \   008F   D6             MOVW      HL,AX
   \   0090   86             INCW      HL
   \   0091   891C           MOVW      AX,SP
   \   0093   E6             XCHW      AX,HL
   \   0094   BE07           MOV       [HL+0x07],A
   \   0096   60             MOV       A,X
   \   0097   BE06           MOV       [HL+0x06],A
   \   0099   84             INCW      DE
   \   009A   AE02           MOV       A,[HL+0x02]
   \   009C   70             MOV       X,A
   \   009D   AE03           MOV       A,[HL+0x03]
   \   009F   D6             MOVW      HL,AX
   \   00A0   86             INCW      HL
   \   00A1   891C           MOVW      AX,SP
   \   00A3   E6             XCHW      AX,HL
   \   00A4   BE03           MOV       [HL+0x03],A
   \   00A6   60             MOV       A,X
   \   00A7   BE02           MOV       [HL+0x02],A
   \   00A9   87             MOV       A,[HL]
   \   00AA   51             DEC       A
   \   00AB   97             MOV       [HL],A
   \   00AC   BD90           BNZ       ??LRNWriteInEepromTransponderCodes_Static_0
   1556                  mDATWrite(U16Bit, EEP_VerlogSKey, u16SKey, Default);
   \   00AE   02....         MOVW      AX,DATDbkMirrors+136
   \   00B1   30             XCH       A,X
   \   00B2   18....         SUB       A,u16SKey
   \   00B5   30             XCH       A,X
   \   00B6   38....         SUBC      A,u16SKey+1
   \   00B9   6168           OR        A,X
   \   00BB   AD0B           BZ        ??LRNFactoryModeInProgress_40
   \   00BD   02....         MOVW      AX,u16SKey
   \   00C0   03....         MOVW      DATDbkMirrors+136,AX
   \   00C3   A103           MOV       A,#3
   \   00C5   9A....         CALL      DATDbkStartUpdate
   1557          
   1558                  mDATControl(Apr, cDATAprWriteAfterSaleCode);
   \                     ??LRNFactoryModeInProgress_40:
   \   00C8   A107           MOV       A,#7
   \   00CA   16....         MOVW      HL,#LWRD(DATAprControl)
   \   00CD   A4..           MOV       E,#BYTE3(DATAprControl)
   \   00CF   ..             CALLT     [__T_?FAR_CALL_L07]
   1559              }
   1560          
   1561              // Store the Identifier and Password received after the Authentication sequence
   1562              mDATWriteTable(U32Bit, EEP_KeyIdentifier, KeyNumberL, u32TrpIdentifierReceived, Default);
   \                     ??LRNFactoryModeInProgress_38:
   \   00D0   891C           MOVW      AX,SP
   \   00D2   D6             MOVW      HL,AX
   \   00D3   AE01           MOV       A,[HL+0x01]
   \   00D5   A004           MOV       X,#4
   \   00D7   3188           MULU      X
   \   00D9   CA....         ADDW      AX,#DATDbkMirrors
   \   00DC   D4             MOVW      DE,AX
   \   00DD   D6             MOVW      HL,AX
   \   00DE   AE46           MOV       A,[HL+0x46]
   \   00E0   70             MOV       X,A
   \   00E1   AE47           MOV       A,[HL+0x47]
   \   00E3   D2             MOVW      BC,AX
   \   00E4   100000         MOVW      AX,#0
   \   00E7   B3             PUSH      BC
   \   00E8   B1             PUSH      AX
   \   00E9   AE44           MOV       A,[HL+0x44]
   \   00EB   70             MOV       X,A
   \   00EC   AE45           MOV       A,[HL+0x45]
   \   00EE   120000         MOVW      BC,#0
   \   00F1   D6             MOVW      HL,AX
   \   00F2   891C           MOVW      AX,SP
   \   00F4   E6             XCHW      AX,HL
   \   00F5   E2             XCHW      AX,BC
   \   00F6   0902           ADD       A,[HL+0x02]
   \   00F8   30             XCH       A,X
   \   00F9   0903           ADD       A,[HL+0x03]
   \   00FB   E2             XCHW      AX,BC
   \   00FC   B6             POP       HL
   \   00FD   B6             POP       HL
   \   00FE   B5             PUSH      DE
   \   00FF   D4             MOVW      DE,AX
   \   0100   64             MOV       A,E
   \   0101   18....         SUB       A,u32TrpIdentifierReceived
   \   0104   70             MOV       X,A
   \   0105   65             MOV       A,D
   \   0106   38....         SUBC      A,u32TrpIdentifierReceived+1
   \   0109   6160           OR        X,A
   \   010B   62             MOV       A,C
   \   010C   38....         SUBC      A,u32TrpIdentifierReceived+2
   \   010F   6160           OR        X,A
   \   0111   63             MOV       A,B
   \   0112   38....         SUBC      A,u32TrpIdentifierReceived+3
   \   0115   6160           OR        X,A
   \   0117   B4             POP       DE
   \   0118   AD19           BZ        ??LRNFactoryModeInProgress_41
   \   011A   02....         MOVW      AX,u32TrpIdentifierReceived
   \   011D   D2             MOVW      BC,AX
   \   011E   C4             MOVW      AX,DE
   \   011F   D6             MOVW      HL,AX
   \   0120   C2             MOVW      AX,BC
   \   0121   BE45           MOV       [HL+0x45],A
   \   0123   60             MOV       A,X
   \   0124   BE44           MOV       [HL+0x44],A
   \   0126   02....         MOVW      AX,u32TrpIdentifierReceived+2
   \   0129   BE47           MOV       [HL+0x47],A
   \   012B   60             MOV       A,X
   \   012C   BE46           MOV       [HL+0x46],A
   \   012E   A103           MOV       A,#3
   \   0130   9A....         CALL      DATDbkStartUpdate
   1563              mDATWriteTable(U32Bit, EEP_PwdTag, KeyNumberL, (u32TrpConfigAndPassWordTag & cMaskKeep24Bits), Default);
   \                     ??LRNFactoryModeInProgress_41:
   \   0133   10FF00         MOVW      AX,#255
   \   0136   B1             PUSH      AX
   \   0137   A1FF           MOV       A,#255
   \   0139   B1             PUSH      AX
   \   013A   02....         MOVW      AX,u32TrpConfigAndPassWordTag+2
   \   013D   D2             MOVW      BC,AX
   \   013E   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   0141   9A....         CALL      ?L_AND_L03
   \   0144   B3             PUSH      BC
   \   0145   B1             PUSH      AX
   \   0146   C4             MOVW      AX,DE
   \   0147   D6             MOVW      HL,AX
   \   0148   AE56           MOV       A,[HL+0x56]
   \   014A   70             MOV       X,A
   \   014B   AE57           MOV       A,[HL+0x57]
   \   014D   D2             MOVW      BC,AX
   \   014E   100000         MOVW      AX,#0
   \   0151   B3             PUSH      BC
   \   0152   B1             PUSH      AX
   \   0153   AE54           MOV       A,[HL+0x54]
   \   0155   70             MOV       X,A
   \   0156   AE55           MOV       A,[HL+0x55]
   \   0158   120000         MOVW      BC,#0
   \   015B   D6             MOVW      HL,AX
   \   015C   891C           MOVW      AX,SP
   \   015E   E6             XCHW      AX,HL
   \   015F   E2             XCHW      AX,BC
   \   0160   0902           ADD       A,[HL+0x02]
   \   0162   30             XCH       A,X
   \   0163   0903           ADD       A,[HL+0x03]
   \   0165   E2             XCHW      AX,BC
   \   0166   B6             POP       HL
   \   0167   B6             POP       HL
   \   0168   D6             MOVW      HL,AX
   \   0169   891C           MOVW      AX,SP
   \   016B   E6             XCHW      AX,HL
   \   016C   B5             PUSH      DE
   \   016D   D4             MOVW      DE,AX
   \   016E   64             MOV       A,E
   \   016F   1F             SUB       A,[HL]
   \   0170   70             MOV       X,A
   \   0171   65             MOV       A,D
   \   0172   3901           SUBC      A,[HL+0x01]
   \   0174   6160           OR        X,A
   \   0176   62             MOV       A,C
   \   0177   3902           SUBC      A,[HL+0x02]
   \   0179   6160           OR        X,A
   \   017B   63             MOV       A,B
   \   017C   3903           SUBC      A,[HL+0x03]
   \   017E   6160           OR        X,A
   \   0180   B4             POP       DE
   \   0181   B6             POP       HL
   \   0182   B6             POP       HL
   \   0183   AD28           BZ        ??LRNFactoryModeInProgress_42
   \   0185   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   0188   D2             MOVW      BC,AX
   \   0189   C4             MOVW      AX,DE
   \   018A   D6             MOVW      HL,AX
   \   018B   C2             MOVW      AX,BC
   \   018C   BE55           MOV       [HL+0x55],A
   \   018E   60             MOV       A,X
   \   018F   BE54           MOV       [HL+0x54],A
   \   0191   10FF00         MOVW      AX,#255
   \   0194   B1             PUSH      AX
   \   0195   A1FF           MOV       A,#255
   \   0197   B1             PUSH      AX
   \   0198   02....         MOVW      AX,u32TrpConfigAndPassWordTag+2
   \   019B   D2             MOVW      BC,AX
   \   019C   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   019F   9A....         CALL      ?L_AND_L03
   \   01A2   C2             MOVW      AX,BC
   \   01A3   BE57           MOV       [HL+0x57],A
   \   01A5   60             MOV       A,X
   \   01A6   BE56           MOV       [HL+0x56],A
   \   01A8   A103           MOV       A,#3
   \   01AA   9A....         CALL      DATDbkStartUpdate
   1564          
   1565              // If transponder has the RF function
   1566              if (mDATRead(U1Bit, DATTrpKeyWithRF, Default) != 0)
   \                     ??LRNFactoryModeInProgress_42:
   \   01AD   16....         MOVW      HL,#DatTrpExportData+51
   \   01B0   31A603         BT        [HL].2, $+6
   \   01B3   9B....         BR        N:??LRNFactoryModeInProgress_43
   1567              {
   1568                  // Store into Eeprom the random number of Resynchro
   1569                  mDATWriteTable(U32Bit, EEP_InitialResynchroValue, KeyNumberL, mDATRead(U32Bit, DATTrpResynchronizationValue, Default), Default);
   \   01B6   C4             MOVW      AX,DE
   \   01B7   D6             MOVW      HL,AX
   \   01B8   AEA2           MOV       A,[HL+0xA2]
   \   01BA   70             MOV       X,A
   \   01BB   AEA3           MOV       A,[HL+0xA3]
   \   01BD   D2             MOVW      BC,AX
   \   01BE   100000         MOVW      AX,#0
   \   01C1   B3             PUSH      BC
   \   01C2   B1             PUSH      AX
   \   01C3   AEA0           MOV       A,[HL+0xA0]
   \   01C5   70             MOV       X,A
   \   01C6   AEA1           MOV       A,[HL+0xA1]
   \   01C8   120000         MOVW      BC,#0
   \   01CB   D6             MOVW      HL,AX
   \   01CC   891C           MOVW      AX,SP
   \   01CE   E6             XCHW      AX,HL
   \   01CF   E2             XCHW      AX,BC
   \   01D0   0902           ADD       A,[HL+0x02]
   \   01D2   30             XCH       A,X
   \   01D3   0903           ADD       A,[HL+0x03]
   \   01D5   E2             XCHW      AX,BC
   \   01D6   B6             POP       HL
   \   01D7   B6             POP       HL
   \   01D8   B5             PUSH      DE
   \   01D9   D4             MOVW      DE,AX
   \   01DA   64             MOV       A,E
   \   01DB   18....         SUB       A,DatTrpExportData+20
   \   01DE   70             MOV       X,A
   \   01DF   65             MOV       A,D
   \   01E0   38....         SUBC      A,DatTrpExportData+21
   \   01E3   6160           OR        X,A
   \   01E5   62             MOV       A,C
   \   01E6   38....         SUBC      A,DatTrpExportData+22
   \   01E9   6160           OR        X,A
   \   01EB   63             MOV       A,B
   \   01EC   38....         SUBC      A,DatTrpExportData+23
   \   01EF   6160           OR        X,A
   \   01F1   B4             POP       DE
   \   01F2   AD19           BZ        ??LRNFactoryModeInProgress_44
   \   01F4   02....         MOVW      AX,DatTrpExportData+20
   \   01F7   D2             MOVW      BC,AX
   \   01F8   C4             MOVW      AX,DE
   \   01F9   D6             MOVW      HL,AX
   \   01FA   C2             MOVW      AX,BC
   \   01FB   BEA1           MOV       [HL+0xA1],A
   \   01FD   60             MOV       A,X
   \   01FE   BEA0           MOV       [HL+0xA0],A
   \   0200   02....         MOVW      AX,DatTrpExportData+22
   \   0203   BEA3           MOV       [HL+0xA3],A
   \   0205   60             MOV       A,X
   \   0206   BEA2           MOV       [HL+0xA2],A
   \   0208   A104           MOV       A,#4
   \   020A   9A....         CALL      DATDbkStartUpdate
   1570                  mDATWriteTable(U32Bit, EEP_SI28Bits, KeyNumberL, mDATRead(U32Bit, DATTrpResynchronizationValue, Default), Default);
   \                     ??LRNFactoryModeInProgress_44:
   \   020D   C4             MOVW      AX,DE
   \   020E   D6             MOVW      HL,AX
   \   020F   AE92           MOV       A,[HL+0x92]
   \   0211   70             MOV       X,A
   \   0212   AE93           MOV       A,[HL+0x93]
   \   0214   D2             MOVW      BC,AX
   \   0215   100000         MOVW      AX,#0
   \   0218   B3             PUSH      BC
   \   0219   B1             PUSH      AX
   \   021A   AE90           MOV       A,[HL+0x90]
   \   021C   70             MOV       X,A
   \   021D   AE91           MOV       A,[HL+0x91]
   \   021F   120000         MOVW      BC,#0
   \   0222   D6             MOVW      HL,AX
   \   0223   891C           MOVW      AX,SP
   \   0225   E6             XCHW      AX,HL
   \   0226   E2             XCHW      AX,BC
   \   0227   0902           ADD       A,[HL+0x02]
   \   0229   30             XCH       A,X
   \   022A   0903           ADD       A,[HL+0x03]
   \   022C   E2             XCHW      AX,BC
   \   022D   B6             POP       HL
   \   022E   B6             POP       HL
   \   022F   B5             PUSH      DE
   \   0230   D4             MOVW      DE,AX
   \   0231   64             MOV       A,E
   \   0232   18....         SUB       A,DatTrpExportData+20
   \   0235   70             MOV       X,A
   \   0236   65             MOV       A,D
   \   0237   38....         SUBC      A,DatTrpExportData+21
   \   023A   6160           OR        X,A
   \   023C   62             MOV       A,C
   \   023D   38....         SUBC      A,DatTrpExportData+22
   \   0240   6160           OR        X,A
   \   0242   63             MOV       A,B
   \   0243   38....         SUBC      A,DatTrpExportData+23
   \   0246   6160           OR        X,A
   \   0248   B4             POP       DE
   \   0249   AD19           BZ        ??LRNFactoryModeInProgress_45
   \   024B   02....         MOVW      AX,DatTrpExportData+20
   \   024E   D2             MOVW      BC,AX
   \   024F   C4             MOVW      AX,DE
   \   0250   D6             MOVW      HL,AX
   \   0251   C2             MOVW      AX,BC
   \   0252   BE91           MOV       [HL+0x91],A
   \   0254   60             MOV       A,X
   \   0255   BE90           MOV       [HL+0x90],A
   \   0257   02....         MOVW      AX,DatTrpExportData+22
   \   025A   BE93           MOV       [HL+0x93],A
   \   025C   60             MOV       A,X
   \   025D   BE92           MOV       [HL+0x92],A
   \   025F   A104           MOV       A,#4
   \   0261   9A....         CALL      DATDbkStartUpdate
   1571          
   1572                  // Store into Eeprom RSK
   1573                  WriteRSKInEeprom(KeyNumberL, RemoteSecretKey);
   \                     ??LRNFactoryModeInProgress_45:
   \   0264   12....         MOVW      BC,#RemoteSecretKey
   \   0267   891C           MOVW      AX,SP
   \   0269   D6             MOVW      HL,AX
   \   026A   AE01           MOV       A,[HL+0x01]
   \   026C   16....         MOVW      HL,#LWRD(WriteRSKInEeprom)
   \   026F   A4..           MOV       E,#BYTE3(WriteRSKInEeprom)
   \   0271   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1574          
   1575                  MemorizeKeyFrequencyCounter();
   \   0272   16....         MOVW      HL,#LWRD(MemorizeKeyFrequencyCounter)
   \   0275   A4..           MOV       E,#BYTE3(MemorizeKeyFrequencyCounter)
   \   0277   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1576              }
   1577          
   1578              // Fill unused key passwords with random values
   1579              for (u8IndexL = KeyNumberL+1; u8IndexL < cDATTrpMaxNumberOfKey; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_43:
   \   0278   891C           MOVW      AX,SP
   \   027A   D6             MOVW      HL,AX
   \   027B   86             INCW      HL
   \   027C   87             MOV       A,[HL]
   \   027D   41             INC       A
   \   027E   96             DECW      HL
   \   027F   97             MOV       [HL],A
   \   0280   AE01           MOV       A,[HL+0x01]
   \   0282   41             INC       A
   \   0283   4D04           CMP       A,#4
   \   0285   8D03           BC        $+5
   \   0287   9B....         BR        N:??LRNFactoryModeInProgress_46
   1580              {
   1581                  u32RandomValue = LIBCalculateRandomNb(TOSClock);
   \                     ??LRNWriteInEepromTransponderCodes_Static_1:
   \   028A   02....         MOVW      AX,TOSClock
   \   028D   120000         MOVW      BC,#0
   \   0290   9A....         CALL      LIBCalculateRandomNb
   \   0293   D6             MOVW      HL,AX
   \   0294   891C           MOVW      AX,SP
   \   0296   CA0800         ADDW      AX,#8
   \   0299   E6             XCHW      AX,HL
   \   029A   BE01           MOV       [HL+0x01],A
   \   029C   60             MOV       A,X
   \   029D   97             MOV       [HL],A
   \   029E   C2             MOVW      AX,BC
   \   029F   BE03           MOV       [HL+0x03],A
   \   02A1   60             MOV       A,X
   \   02A2   BE02           MOV       [HL+0x02],A
   1582                  mDATWriteTable(U32Bit, EEP_PwdTag, u8IndexL, u32RandomValue, Default);
   \   02A4   891C           MOVW      AX,SP
   \   02A6   D6             MOVW      HL,AX
   \   02A7   87             MOV       A,[HL]
   \   02A8   A004           MOV       X,#4
   \   02AA   3188           MULU      X
   \   02AC   CA....         ADDW      AX,#DATDbkMirrors
   \   02AF   D4             MOVW      DE,AX
   \   02B0   891C           MOVW      AX,SP
   \   02B2   CA0800         ADDW      AX,#8
   \   02B5   D6             MOVW      HL,AX
   \   02B6   C4             MOVW      AX,DE
   \   02B7   B7             PUSH      HL
   \   02B8   D6             MOVW      HL,AX
   \   02B9   AE56           MOV       A,[HL+0x56]
   \   02BB   70             MOV       X,A
   \   02BC   AE57           MOV       A,[HL+0x57]
   \   02BE   D2             MOVW      BC,AX
   \   02BF   100000         MOVW      AX,#0
   \   02C2   B3             PUSH      BC
   \   02C3   B1             PUSH      AX
   \   02C4   AE54           MOV       A,[HL+0x54]
   \   02C6   70             MOV       X,A
   \   02C7   AE55           MOV       A,[HL+0x55]
   \   02C9   120000         MOVW      BC,#0
   \   02CC   D6             MOVW      HL,AX
   \   02CD   891C           MOVW      AX,SP
   \   02CF   E6             XCHW      AX,HL
   \   02D0   E2             XCHW      AX,BC
   \   02D1   0902           ADD       A,[HL+0x02]
   \   02D3   30             XCH       A,X
   \   02D4   0903           ADD       A,[HL+0x03]
   \   02D6   E2             XCHW      AX,BC
   \   02D7   B6             POP       HL
   \   02D8   B6             POP       HL
   \   02D9   B6             POP       HL
   \   02DA   B5             PUSH      DE
   \   02DB   D4             MOVW      DE,AX
   \   02DC   64             MOV       A,E
   \   02DD   1F             SUB       A,[HL]
   \   02DE   70             MOV       X,A
   \   02DF   65             MOV       A,D
   \   02E0   3901           SUBC      A,[HL+0x01]
   \   02E2   6160           OR        X,A
   \   02E4   62             MOV       A,C
   \   02E5   3902           SUBC      A,[HL+0x02]
   \   02E7   6160           OR        X,A
   \   02E9   63             MOV       A,B
   \   02EA   3903           SUBC      A,[HL+0x03]
   \   02EC   6160           OR        X,A
   \   02EE   B4             POP       DE
   \   02EF   AD2A           BZ        ??LRNFactoryModeInProgress_47
   \   02F1   891C           MOVW      AX,SP
   \   02F3   D6             MOVW      HL,AX
   \   02F4   AE08           MOV       A,[HL+0x08]
   \   02F6   70             MOV       X,A
   \   02F7   AE09           MOV       A,[HL+0x09]
   \   02F9   D2             MOVW      BC,AX
   \   02FA   C4             MOVW      AX,DE
   \   02FB   D6             MOVW      HL,AX
   \   02FC   C2             MOVW      AX,BC
   \   02FD   BE55           MOV       [HL+0x55],A
   \   02FF   60             MOV       A,X
   \   0300   BE54           MOV       [HL+0x54],A
   \   0302   891C           MOVW      AX,SP
   \   0304   CA0800         ADDW      AX,#8
   \   0307   D6             MOVW      HL,AX
   \   0308   AE02           MOV       A,[HL+0x02]
   \   030A   72             MOV       C,A
   \   030B   AE03           MOV       A,[HL+0x03]
   \   030D   73             MOV       B,A
   \   030E   C4             MOVW      AX,DE
   \   030F   D6             MOVW      HL,AX
   \   0310   C2             MOVW      AX,BC
   \   0311   BE57           MOV       [HL+0x57],A
   \   0313   60             MOV       A,X
   \   0314   BE56           MOV       [HL+0x56],A
   \   0316   A103           MOV       A,#3
   \   0318   9A....         CALL      DATDbkStartUpdate
   1583              }
   \                     ??LRNFactoryModeInProgress_47:
   \   031B   891C           MOVW      AX,SP
   \   031D   D6             MOVW      HL,AX
   \   031E   87             MOV       A,[HL]
   \   031F   41             INC       A
   \   0320   97             MOV       [HL],A
   \   0321   4D04           CMP       A,#4
   \   0323   9D03           BNC       $+5
   \   0325   9B....         BR        N:??LRNWriteInEepromTransponderCodes_Static_1
   1584          }
   \                     ??LRNFactoryModeInProgress_46:
   \   0328                  REQUIRE ?CL78K_V4_6_L00
   \   0328                  REQUIRE ?Subroutine1
   \   0328                  ; // Fall through to label ?Subroutine1

   \                                 In  segment BCODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   0000   ..             CALLT     [__T_?FUNC_DEALL_L06]
   \   0001   0C00           DW        0xC
   \   0003   B2             POP       BC
   \   0004   AF             RET       
   \   0005                  REQUIRE ?CL78K_V4_6_L00
   1585          
   1586          //*****************************************************************************
   1587          //  DESCRIPTION : Eeprom Writing Error.
   1588          //  
   1589          //  PARAMETERS (Type,Name,Min,Max) :  none
   1590          //
   1591          //  RETURN VALUE :  none
   1592          // 
   1593          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1594          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1595          void LRNEepromWritingError(void)
   \                     LRNEepromWritingError:
   1596          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1597              mDATWrite(U8Bit, COD_ERR_APP, cCodeError19h, Default);
   \   0000   A119           MOV       A,#25
   \   0002   9B....         BR        N:?Subroutine3
   \   0005                  REQUIRE ?CL78K_V4_6_L00
   1598          }
   1599          
   1600          //*****************************************************************************
   1601          //  DESCRIPTION : Test if writing in EEPROM is finished not successfully.
   1602          //  
   1603          //  PARAMETERS (Type,Name,Min,Max) :  none
   1604          //
   1605          //  RETURN VALUE :  cFalse or cTrue
   1606          // 
   1607          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1608          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1609          BOOL LRNWritingInEepromFinishedNOK(void)
   \                     LRNWritingInEepromFinishedNOK:
   1610          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1611          #ifdef X90_PROJECT
   1612              return LRNWritingInEepromFinishedNOK_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNWritingInEepromFinishedNOK_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNWritingInEepromFinishedNOK_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1613          }
   1614          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1615          static MEM_TYPE BOOL LRNWritingInEepromFinishedNOK_Static(void)
   \                     LRNWritingInEepromFinishedNOK_Static:
   1616          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   A103           MOV       A,#3
   \   0002   B3             PUSH      BC
   \   0003                  ; Total Auto size: 0
   1617          #endif
   1618          
   1619              BOOL bResultL = cFalse;
   \   0003   A200           MOV       C,#0
   1620          
   1621              if (   (mDATRead(U1Bit, IsEepGroupStaticImmoBankProcessing, Default) == 0)
   1622              && (mDATRead(U1Bit, IsEepGroupDynamicImmoDataBankProcessing, Default) == 0) )      
   \   0005   9A....         CALL      DATDbkIsBankProcessing
   \   0008   4D00           CMP       A,#0
   \   000A   BD31           BNZ       ??LRNFactoryModeInProgress_48
   \   000C   A104           MOV       A,#4
   \   000E   9A....         CALL      DATDbkIsBankProcessing
   \   0011   4D00           CMP       A,#0
   \   0013   BD28           BNZ       ??LRNFactoryModeInProgress_48
   1623              {
   1624                  //-----------------------------------------------------------------//
   1625                  // Set Eeprom writing error flag according to the mode in progress
   1626                  //-----------------------------------------------------------------//
   1627          
   1628                  if (u8LearningMode == cFactoryMode)
   \   0015   8E....         MOV       A,u8LearningMode
   \   0018   51             DEC       A
   \   0019   BD1A           BNZ       ??LRNFactoryModeInProgress_49
   1629                  {
   1630                      switch ((tKeyType)mDATRead(U8Bit, NumberOfKeysLearnt, Default))
   \   001B   8E....         MOV       A,DATCmnImmoData+13
   \   001E   4D00           CMP       A,#0
   \   0020   AD05           BZ        ??LRNFactoryModeInProgress_50
   \   0022   51             DEC       A
   \   0023   AD09           BZ        ??LRNFactoryModeInProgress_51
   \   0025   FA14           BR        ??LRNFactoryModeInProgress_52
   1631                      {
   1632                          case cKeyNumber1:
   1633                          mDATWrite(U1Bit, WritingErrorInEepForKey1InFactoryMode, 1, Default);
   \                     ??LRNFactoryModeInProgress_50:
   \   0027   A101           MOV       A,#1
   \   0029   16....         MOVW      HL,#DATCmnImmoData+6
   \   002C   FA0C           BR        ??LRNFactoryModeInProgress_53
   1634                          break;
   1635          
   1636                          case cKeyNumber2:
   1637                          mDATWrite(U1Bit, WritingErrorInEepForKey2InFactoryMode, 1, Default);
   \                     ??LRNFactoryModeInProgress_51:
   \   002E   A101           MOV       A,#1
   \   0030   16....         MOVW      HL,#DATCmnImmoData+7
   \   0033   FA05           BR        ??LRNFactoryModeInProgress_53
   1638                          break;
   1639          
   1640                          //CCOV: amanevd: Cannot be covered because this default case rises explicit assert
   1641                          default:
   1642                          mLIBassert(cFalse);
   1643                          break;
   1644                      }
   1645                  }
   1646                  else
   1647                  {
   1648                      mDATWrite(U1Bit, WritingErrorInEepInBcmReplacement, 1, Default);
   \                     ??LRNFactoryModeInProgress_49:
   \   0035   A101           MOV       A,#1
   \   0037   16....         MOVW      HL,#DATCmnImmoData+8
   \                     ??LRNFactoryModeInProgress_53:
   \   003A   97             MOV       [HL],A
   1649                  }
   1650                  bResultL = cTrue;
   \                     ??LRNFactoryModeInProgress_52:
   \   003B   A201           MOV       C,#1
   1651              }
   1652              return bResultL;
   \                     ??LRNFactoryModeInProgress_48:
   \   003D   62             MOV       A,C
   \   003E   B2             POP       BC
   \   003F   AF             RET       
   \   0040                  REQUIRE ?CL78K_V4_6_L00
   1653          }
   1654          //*****************************************************************************
   1655          //  DESCRIPTION : Test if writing in EEPROM is finished successfully.
   1656          //  
   1657          //  PARAMETERS (Type,Name,Min,Max) :  none
   1658          //
   1659          //  RETURN VALUE :  cFalse or cTrue
   1660          // 
   1661          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1662          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1663          BOOL LRNWritingInEepromFinishedOK(void)
   \                     LRNWritingInEepromFinishedOK:
   1664          { 
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1665              return (   (mDATRead(U1Bit, IsEepGroupStaticImmoBankProcessing, Default) == 0)
   1666              && (mDATRead(U1Bit, IsEepGroupDynamicImmoDataBankProcessing, Default) == 0)
   1667              && (mDATRead(U1Bit, IsEepGroupStaticImmoBankWriteOk, Default) != 0)
   1668              && (mDATRead(U1Bit, IsEepGroupDynamicImmoDataBankWriteOk, Default) != 0) );
   \   0000   A103           MOV       A,#3
   \   0002   9A....         CALL      DATDbkIsBankProcessing
   \   0005   4D00           CMP       A,#0
   \   0007   BD1E           BNZ       ??LRNFactoryModeInProgress_158
   \   0009   A104           MOV       A,#4
   \   000B   9A....         CALL      DATDbkIsBankProcessing
   \   000E   4D00           CMP       A,#0
   \   0010   BD15           BNZ       ??LRNFactoryModeInProgress_158
   \   0012   A103           MOV       A,#3
   \   0014   9A....         CALL      DATDbkIsWriteOk
   \   0017   4D00           CMP       A,#0
   \   0019   AD0C           BZ        ??LRNFactoryModeInProgress_158
   \   001B   A104           MOV       A,#4
   \   001D   9A....         CALL      DATDbkIsWriteOk
   \   0020   4D00           CMP       A,#0
   \   0022   AD03           BZ        ??LRNFactoryModeInProgress_158
   \   0024   A101           MOV       A,#1
   \   0026   AF             RET       
   \                     ??LRNFactoryModeInProgress_158:
   \   0027   A100           MOV       A,#0
   \   0029   AF             RET       
   \   002A                  REQUIRE ?CL78K_V4_6_L00
   1669          }
   1670          //*****************************************************************************
   1671          //  DESCRIPTION : Test if base-station sleep control is finished successfully.
   1672          //  
   1673          //  PARAMETERS (Type,Name,Min,Max) :  none
   1674          //
   1675          //  RETURN VALUE :  cFalse or cTrue
   1676          // 
   1677          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1678          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1679          BOOL LRNSleepModeFinished(void)
   \                     LRNSleepModeFinished:
   1680          { 
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1681              return mDATRead(U8Bit, DATTrpSleepControlState, Default) != cDATTrpServiceInProgress;
   \   0000   8E....         MOV       A,DatTrpExportData+46
   \   0003   51             DEC       A
   \   0004   AD03           BZ        ??LRNFactoryModeInProgress_159
   \   0006   A101           MOV       A,#1
   \   0008   AF             RET       
   \                     ??LRNFactoryModeInProgress_159:
   \   0009   A100           MOV       A,#0
   \   000B   AF             RET       
   \   000C                  REQUIRE ?CL78K_V4_6_L00
   1682          }
   1683          //*****************************************************************************
   1684          //  DESCRIPTION : Compute ISK from the After Sale code and start authentication
   1685          //                service with the calculate ISK.
   1686          //  
   1687          //  PARAMETERS (Type,Name,Min,Max) :  none
   1688          //
   1689          //  RETURN VALUE :  none
   1690          // 
   1691          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1692          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1693          void LRNCalculateISKandAuthenticate(void)
   \                     LRNCalculateISKandAuthenticate:
   1694          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1695          #ifdef X90_PROJECT
   1696              LRNCalculateISKandAuthenticate_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNCalculateISKandAuthenticate_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNCalculateISKandAuthenticate_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1697          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1698          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1699          static MEM_TYPE void LRNCalculateISKandAuthenticate_Static(void)
   \                     LRNCalculateISKandAuthenticate_Static:
   1700          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   A104           MOV       A,#4
   \   0002   B3             PUSH      BC
   \   0003                  ; Total Auto size: 4
   \   0003   B7             PUSH      HL
   \   0004   B7             PUSH      HL
   1701          #endif
   1702          
   1703              U8 u8IndexL;
   1704          
   1705              mDATControl(Apr, cDATAprComputeISKFromDiagAfterSaleCode);
   \   0005   16....         MOVW      HL,#LWRD(DATAprControl)
   \   0008   A4..           MOV       E,#BYTE3(DATAprControl)
   \   000A   ..             CALLT     [__T_?FAR_CALL_L07]
   1706          
   1707              for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   000B   10....         MOVW      AX,#DatAprExportData
   \   000E   14....         MOVW      DE,#ImmobilizerSecretKey
   \   0011   B6             POP       HL
   \   0012   B1             PUSH      AX
   \   0013   12....         MOVW      BC,#DatTrpExportData
   \   0016   891C           MOVW      AX,SP
   \   0018   80             INCW      AX
   \   0019   80             INCW      AX
   \   001A   D6             MOVW      HL,AX
   \   001B   A106           MOV       A,#6
   \   001D   97             MOV       [HL],A
   1708              {
   1709                  ImmobilizerSecretKey[u8IndexL] = mDATReadTable(U8Bit, DATAprImmobilizerSecretKey, u8IndexL, Default);
   \                     ??LRNCalculateISKandAuthenticate_Static_0:
   \   001E   891C           MOVW      AX,SP
   \   0020   D6             MOVW      HL,AX
   \   0021   87             MOV       A,[HL]
   \   0022   70             MOV       X,A
   \   0023   AE01           MOV       A,[HL+0x01]
   \   0025   D6             MOVW      HL,AX
   \   0026   CA0800         ADDW      AX,#8
   \   0029   E6             XCHW      AX,HL
   \   002A   87             MOV       A,[HL]
   \   002B   95             MOV       [DE],A
   1710                  mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, ImmobilizerSecretKey[u8IndexL], Default);
   \   002C   B3             PUSH      BC
   \   002D   B6             POP       HL
   \   002E   E6             XCHW      AX,HL
   \   002F   CA2000         ADDW      AX,#32
   \   0032   E6             XCHW      AX,HL
   \   0033   97             MOV       [HL],A
   1711              }
   \   0034   B3             PUSH      BC
   \   0035   B6             POP       HL
   \   0036   86             INCW      HL
   \   0037   B7             PUSH      HL
   \   0038   B2             POP       BC
   \   0039   891C           MOVW      AX,SP
   \   003B   D6             MOVW      HL,AX
   \   003C   87             MOV       A,[HL]
   \   003D   70             MOV       X,A
   \   003E   AE01           MOV       A,[HL+0x01]
   \   0040   D6             MOVW      HL,AX
   \   0041   86             INCW      HL
   \   0042   C6             MOVW      AX,HL
   \   0043   B6             POP       HL
   \   0044   B1             PUSH      AX
   \   0045   84             INCW      DE
   \   0046   891C           MOVW      AX,SP
   \   0048   D6             MOVW      HL,AX
   \   0049   AE02           MOV       A,[HL+0x02]
   \   004B   51             DEC       A
   \   004C   BE02           MOV       [HL+0x02],A
   \   004E   BDCE           BNZ       ??LRNCalculateISKandAuthenticate_Static_0
   1712          
   1713              mDATWrite(U1Bit, DATTrpAuthentInLearningMode, 1, Default);
   \   0050   A103           MOV       A,#3
   \   0052   16....         MOVW      HL,#DatTrpExportData+50
   \   0055   7182           SET1      [HL].0
   1714              mDATControl(Trp, cDATTrpAuthenticate);
   \   0057   ..             CALLT     [__T_DATTrpControl]
   1715          }
   \   0058   B0             POP       AX
   \   0059   B0             POP       AX
   \   005A   B2             POP       BC
   \   005B   AF             RET       
   \   005C                  REQUIRE ?CL78K_V4_6_L00
   1716          //*****************************************************************************
   1717          //  DESCRIPTION : Authentication with calculated ISK in BCM Replacement mode failed.
   1718          //  
   1719          //  PARAMETERS (Type,Name,Min,Max) :  none
   1720          //
   1721          //  RETURN VALUE :  none
   1722          // 
   1723          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1724          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1725          void LRNBCMReplacementAuthentError(void)
   \                     LRNBCMReplacementAuthentError:
   1726          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1727              mDATWrite(U8Bit, COD_ERR_APP, cCodeErrorA1h, Default);
   \   0000   A1A1           MOV       A,#161
   \   0002   9B....         BR        N:?Subroutine3
   \   0005                  REQUIRE ?CL78K_V4_6_L00
   1728          }
   1729          
   1730          //*****************************************************************************
   1731          //  DESCRIPTION : Calculate transponder codes from the After Sale code
   1732          //  
   1733          //  PARAMETERS (Type,Name,Min,Max) :  none
   1734          //
   1735          //  RETURN VALUE :  none
   1736          // 
   1737          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1738          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1739          void LRNCalculateCodesInAfterSaleMode(void)
   \                     LRNCalculateCodesInAfterSaleMode:
   1740          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1741          #ifdef X90_PROJECT
   1742              LRNCalculateCodesInAfterSaleMode_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNCalculateCodesInAfterSaleMode_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNCalculateCodesInAfterSaleMode_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1743          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1744          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1745          static MEM_TYPE void LRNCalculateCodesInAfterSaleMode_Static(void)
   \                     LRNCalculateCodesInAfterSaleMode_Static:
   1746          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   A101           MOV       A,#1
   \   0002   B3             PUSH      BC
   \   0003                  ; Total Auto size: 0
   1747          #endif
   1748          
   1749              U8  u8IndexL;
   1750          
   1751              // Diag AFS code is ok
   1752              mDATWrite(U1Bit,AFSCodeIsOk,1,Default);
   \   0003   16....         MOVW      HL,#DATCmnImmoData+5
   \   0006   97             MOV       [HL],A
   1753          
   1754              // Generate new VERLOG code
   1755              for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0007   14....         MOVW      DE,#DatAprExportData
   \   000A   12....         MOVW      BC,#ImmobilizerSecretKey
   \   000D   A006           MOV       X,#6
   1756              {
   1757                  mDATWriteTable(U8Bit, DATAprImmobilizerSecretKey, u8IndexL, ImmobilizerSecretKey[u8IndexL], Default);
   \                     ??LRNCalculateCodesInAfterSaleMode_Static_0:
   \   000F   B3             PUSH      BC
   \   0010   B6             POP       HL
   \   0011   87             MOV       A,[HL]
   \   0012   B5             PUSH      DE
   \   0013   B6             POP       HL
   \   0014   E6             XCHW      AX,HL
   \   0015   CA0800         ADDW      AX,#8
   \   0018   E6             XCHW      AX,HL
   \   0019   97             MOV       [HL],A
   1758              }
   \   001A   B3             PUSH      BC
   \   001B   B6             POP       HL
   \   001C   86             INCW      HL
   \   001D   B7             PUSH      HL
   \   001E   B2             POP       BC
   \   001F   84             INCW      DE
   \   0020   50             DEC       X
   \   0021   BDEC           BNZ       ??LRNCalculateCodesInAfterSaleMode_Static_0
   1759              mDATControl(Apr, cDATAprComputeSKey);
   \   0023   A102           MOV       A,#2
   \   0025   16....         MOVW      HL,#LWRD(DATAprControl)
   \   0028   A4..           MOV       E,#BYTE3(DATAprControl)
   \   002A   ..             CALLT     [__T_?FAR_CALL_L07]
   1760          
   1761              u16SKey = mDATRead(U16Bit, DATAprSKey, Default);
   \   002B   02....         MOVW      AX,DatAprExportData+32
   \   002E   03....         MOVW      u16SKey,AX
   1762          
   1763              // Compute the RSK of the current key
   1764              mDATWrite(U32Bit, DATAprIdentifier, u32TrpIdentifierReceived, Default);
   \   0031   02....         MOVW      AX,u32TrpIdentifierReceived+2
   \   0034   03....         MOVW      DatAprExportData+2,AX
   \   0037   02....         MOVW      AX,u32TrpIdentifierReceived
   \   003A   03....         MOVW      DatAprExportData,AX
   1765          
   1766              // If transponder has the RF function
   1767              if (mDATRead(U1Bit, DATTrpKeyWithRF, Default) != 0)
   \   003D   16....         MOVW      HL,#DatTrpExportData+51
   \   0040   31A725         BF        [HL].2, ??LRNFactoryModeInProgress_54
   1768              {
   1769                  mDATControl(Apr, cDATAprComputeRSK);
   \   0043   A101           MOV       A,#1
   \   0045   16....         MOVW      HL,#LWRD(DATAprControl)
   \   0048   A4..           MOV       E,#BYTE3(DATAprControl)
   \   004A   ..             CALLT     [__T_?FAR_CALL_L07]
   1770          
   1771                  // Store RSK
   1772                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   004B   12....         MOVW      BC,#RemoteSecretKey
   \   004E   14....         MOVW      DE,#DatAprExportData
   \   0051   A006           MOV       X,#6
   1773                  {
   1774                      RemoteSecretKey[u8IndexL] = mDATReadTable(U8Bit, DATAprRemoteSecretKey, u8IndexL, Default);
   \                     ??LRNCalculateCodesInAfterSaleMode_Static_1:
   \   0053   B5             PUSH      DE
   \   0054   B6             POP       HL
   \   0055   E6             XCHW      AX,HL
   \   0056   CA0E00         ADDW      AX,#14
   \   0059   E6             XCHW      AX,HL
   \   005A   87             MOV       A,[HL]
   \   005B   B3             PUSH      BC
   \   005C   B6             POP       HL
   \   005D   97             MOV       [HL],A
   1775                  }
   \   005E   84             INCW      DE
   \   005F   B3             PUSH      BC
   \   0060   B6             POP       HL
   \   0061   86             INCW      HL
   \   0062   B7             PUSH      HL
   \   0063   B2             POP       BC
   \   0064   50             DEC       X
   \   0065   60             MOV       A,X
   \   0066   BDEB           BNZ       ??LRNCalculateCodesInAfterSaleMode_Static_1
   1776              }
   1777          }
   \                     ??LRNFactoryModeInProgress_54:
   \   0068   B2             POP       BC
   \   0069   AF             RET       
   \   006A                  REQUIRE ?CL78K_V4_6_L00
   1778          
   1779          //*****************************************************************************
   1780          //  DESCRIPTION : Authentication with calculated ISK in BCM Replacement mode.
   1781          //                In order to prepare for resync.
   1782          //  PARAMETERS (Type,Name,Min,Max) :  none
   1783          //
   1784          //  RETURN VALUE :  none
   1785          // 
   1786          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1787          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1788          void LRNAuthentWithCorrectISK(void)
   \                     LRNAuthentWithCorrectISK:
   1789          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1790              mDATControl(Trp, cDATTrpAuthenticate);
   \   0000   A103           MOV       A,#3
   \   0002   ..             CALLT     [__T_DATTrpControl]
   1791          }
   \   0003   AF             RET       
   \   0004                  REQUIRE ?CL78K_V4_6_L00
   1792          
   1793          //*****************************************************************************
   1794          //  DESCRIPTION : Store in EEPROM the transponder codes of a the key used for 
   1795          //                a BCM replacement.
   1796          //  
   1797          //  PARAMETERS (Type,Name,Min,Max) :  none
   1798          //
   1799          //  RETURN VALUE :  none
   1800          // 
   1801          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1802          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1803          void LRNWriteInEepromFirstTransponderCodes(void)
   \                     LRNWriteInEepromFirstTransponderCodes:
   1804          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1805          #ifdef X90_PROJECT
   1806              LRNWriteInEepromFirstTransponderCodes_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNWriteInEepromFirstTransponderCodes_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNWriteInEepromFirstTransponderCodes_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1807          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1808          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1809          static MEM_TYPE void LRNWriteInEepromFirstTransponderCodes_Static( void )
   \                     LRNWriteInEepromFirstTransponderCodes_Static:
   1810          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 6
   \   0001   B7             PUSH      HL
   \   0002   B7             PUSH      HL
   \   0003   B7             PUSH      HL
   1811          #endif
   1812          
   1813              U8  u8IndexL;
   1814              U32 u32RandomValue;
   1815          
   1816              // Store in Eeprom the ISK calculated and the VERLOG code calculated
   1817              for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0004   14....         MOVW      DE,#DATDbkMirrors
   \   0007   12....         MOVW      BC,#ImmobilizerSecretKey
   \   000A   891C           MOVW      AX,SP
   \   000C   D6             MOVW      HL,AX
   \   000D   A106           MOV       A,#6
   \   000F   97             MOV       [HL],A
   1818              {
   1819                  mDATWriteTable(U8Bit, EEP_ImmoSecretKey, u8IndexL, ImmobilizerSecretKey[u8IndexL], Default);
   \                     ??LRNWriteInEepromFirstTransponderCodes_Static_0:
   \   0010   B3             PUSH      BC
   \   0011   B6             POP       HL
   \   0012   87             MOV       A,[HL]
   \   0013   70             MOV       X,A
   \   0014   B5             PUSH      DE
   \   0015   B6             POP       HL
   \   0016   E6             XCHW      AX,HL
   \   0017   CA6A00         ADDW      AX,#106
   \   001A   E6             XCHW      AX,HL
   \   001B   87             MOV       A,[HL]
   \   001C   6148           CMP       A,X
   \   001E   AD10           BZ        ??LRNFactoryModeInProgress_55
   \   0020   B3             PUSH      BC
   \   0021   B6             POP       HL
   \   0022   87             MOV       A,[HL]
   \   0023   B5             PUSH      DE
   \   0024   B6             POP       HL
   \   0025   E6             XCHW      AX,HL
   \   0026   CA6A00         ADDW      AX,#106
   \   0029   E6             XCHW      AX,HL
   \   002A   97             MOV       [HL],A
   \   002B   A103           MOV       A,#3
   \   002D   9A....         CALL      DATDbkStartUpdate
   1820                  mDATWriteTable(U8Bit, EEP_AfterSalesCode, u8IndexL, 0, Default);
   \                     ??LRNFactoryModeInProgress_55:
   \   0030   C4             MOVW      AX,DE
   \   0031   CA6400         ADDW      AX,#100
   \   0034   D6             MOVW      HL,AX
   \   0035   87             MOV       A,[HL]
   \   0036   4D00           CMP       A,#0
   \   0038   AD08           BZ        ??LRNFactoryModeInProgress_56
   \   003A   A100           MOV       A,#0
   \   003C   97             MOV       [HL],A
   \   003D   A103           MOV       A,#3
   \   003F   9A....         CALL      DATDbkStartUpdate
   1821              }
   \                     ??LRNFactoryModeInProgress_56:
   \   0042   B3             PUSH      BC
   \   0043   B6             POP       HL
   \   0044   86             INCW      HL
   \   0045   B7             PUSH      HL
   \   0046   B2             POP       BC
   \   0047   84             INCW      DE
   \   0048   891C           MOVW      AX,SP
   \   004A   D6             MOVW      HL,AX
   \   004B   87             MOV       A,[HL]
   \   004C   51             DEC       A
   \   004D   97             MOV       [HL],A
   \   004E   BDC0           BNZ       ??LRNWriteInEepromFirstTransponderCodes_Static_0
   1822              mDATWrite(U16Bit, EEP_VerlogSKey, u16SKey, Default);
   \   0050   02....         MOVW      AX,DATDbkMirrors+136
   \   0053   30             XCH       A,X
   \   0054   18....         SUB       A,u16SKey
   \   0057   30             XCH       A,X
   \   0058   38....         SUBC      A,u16SKey+1
   \   005B   6168           OR        A,X
   \   005D   AD0B           BZ        ??LRNFactoryModeInProgress_57
   \   005F   02....         MOVW      AX,u16SKey
   \   0062   03....         MOVW      DATDbkMirrors+136,AX
   \   0065   A103           MOV       A,#3
   \   0067   9A....         CALL      DATDbkStartUpdate
   1823          
   1824              // Store the Identifier and Password received after the Authentication sequence
   1825              mDATWriteTable(U32Bit, EEP_KeyIdentifier, 0, u32TrpIdentifierReceived, Default);
   \                     ??LRNFactoryModeInProgress_57:
   \   006A   02....         MOVW      AX,DATDbkMirrors+70
   \   006D   D2             MOVW      BC,AX
   \   006E   100000         MOVW      AX,#0
   \   0071   B3             PUSH      BC
   \   0072   B1             PUSH      AX
   \   0073   02....         MOVW      AX,DATDbkMirrors+68
   \   0076   120000         MOVW      BC,#0
   \   0079   D6             MOVW      HL,AX
   \   007A   891C           MOVW      AX,SP
   \   007C   E6             XCHW      AX,HL
   \   007D   E2             XCHW      AX,BC
   \   007E   0902           ADD       A,[HL+0x02]
   \   0080   30             XCH       A,X
   \   0081   0903           ADD       A,[HL+0x03]
   \   0083   E2             XCHW      AX,BC
   \   0084   B6             POP       HL
   \   0085   B6             POP       HL
   \   0086   B5             PUSH      DE
   \   0087   D4             MOVW      DE,AX
   \   0088   64             MOV       A,E
   \   0089   18....         SUB       A,u32TrpIdentifierReceived
   \   008C   70             MOV       X,A
   \   008D   65             MOV       A,D
   \   008E   38....         SUBC      A,u32TrpIdentifierReceived+1
   \   0091   6160           OR        X,A
   \   0093   62             MOV       A,C
   \   0094   38....         SUBC      A,u32TrpIdentifierReceived+2
   \   0097   6160           OR        X,A
   \   0099   63             MOV       A,B
   \   009A   38....         SUBC      A,u32TrpIdentifierReceived+3
   \   009D   6160           OR        X,A
   \   009F   B4             POP       DE
   \   00A0   AD11           BZ        ??LRNFactoryModeInProgress_58
   \   00A2   02....         MOVW      AX,u32TrpIdentifierReceived
   \   00A5   03....         MOVW      DATDbkMirrors+68,AX
   \   00A8   02....         MOVW      AX,u32TrpIdentifierReceived+2
   \   00AB   03....         MOVW      DATDbkMirrors+70,AX
   \   00AE   A103           MOV       A,#3
   \   00B0   9A....         CALL      DATDbkStartUpdate
   1826              mDATWriteTable(U32Bit, EEP_PwdTag, 0, (u32TrpConfigAndPassWordTag & cMaskKeep24Bits), Default);
   \                     ??LRNFactoryModeInProgress_58:
   \   00B3   10FF00         MOVW      AX,#255
   \   00B6   B1             PUSH      AX
   \   00B7   A1FF           MOV       A,#255
   \   00B9   B1             PUSH      AX
   \   00BA   02....         MOVW      AX,u32TrpConfigAndPassWordTag+2
   \   00BD   D2             MOVW      BC,AX
   \   00BE   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   00C1   9A....         CALL      ?L_AND_L03
   \   00C4   B3             PUSH      BC
   \   00C5   B1             PUSH      AX
   \   00C6   02....         MOVW      AX,DATDbkMirrors+86
   \   00C9   D2             MOVW      BC,AX
   \   00CA   100000         MOVW      AX,#0
   \   00CD   B3             PUSH      BC
   \   00CE   B1             PUSH      AX
   \   00CF   02....         MOVW      AX,DATDbkMirrors+84
   \   00D2   120000         MOVW      BC,#0
   \   00D5   D6             MOVW      HL,AX
   \   00D6   891C           MOVW      AX,SP
   \   00D8   E6             XCHW      AX,HL
   \   00D9   E2             XCHW      AX,BC
   \   00DA   0902           ADD       A,[HL+0x02]
   \   00DC   30             XCH       A,X
   \   00DD   0903           ADD       A,[HL+0x03]
   \   00DF   E2             XCHW      AX,BC
   \   00E0   B6             POP       HL
   \   00E1   B6             POP       HL
   \   00E2   D6             MOVW      HL,AX
   \   00E3   891C           MOVW      AX,SP
   \   00E5   E6             XCHW      AX,HL
   \   00E6   B5             PUSH      DE
   \   00E7   D4             MOVW      DE,AX
   \   00E8   64             MOV       A,E
   \   00E9   1F             SUB       A,[HL]
   \   00EA   70             MOV       X,A
   \   00EB   65             MOV       A,D
   \   00EC   3901           SUBC      A,[HL+0x01]
   \   00EE   6160           OR        X,A
   \   00F0   62             MOV       A,C
   \   00F1   3902           SUBC      A,[HL+0x02]
   \   00F3   6160           OR        X,A
   \   00F5   63             MOV       A,B
   \   00F6   3903           SUBC      A,[HL+0x03]
   \   00F8   6160           OR        X,A
   \   00FA   B4             POP       DE
   \   00FB   B6             POP       HL
   \   00FC   B6             POP       HL
   \   00FD   AD20           BZ        ??LRNFactoryModeInProgress_59
   \   00FF   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   0102   03....         MOVW      DATDbkMirrors+84,AX
   \   0105   10FF00         MOVW      AX,#255
   \   0108   B1             PUSH      AX
   \   0109   A1FF           MOV       A,#255
   \   010B   B1             PUSH      AX
   \   010C   02....         MOVW      AX,u32TrpConfigAndPassWordTag+2
   \   010F   D2             MOVW      BC,AX
   \   0110   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   0113   9A....         CALL      ?L_AND_L03
   \   0116   C2             MOVW      AX,BC
   \   0117   03....         MOVW      DATDbkMirrors+86,AX
   \   011A   A103           MOV       A,#3
   \   011C   9A....         CALL      DATDbkStartUpdate
   1827          
   1828              // If transponder has the RF function
   1829              if (mDATRead(U1Bit, DATTrpKeyWithRF, Default) != 0)
   \                     ??LRNFactoryModeInProgress_59:
   \   011F   16....         MOVW      HL,#DatTrpExportData+51
   \   0122   31A603         BT        [HL].2, $+6
   \   0125   9B....         BR        N:??LRNFactoryModeInProgress_60
   1830              {
   1831                  // Store the random number of Resynchro in Eeprom 
   1832                  mDATWriteTable(U32Bit, EEP_InitialResynchroValue, 0, mDATRead(U32Bit, DATTrpResynchronizationValue, Default), Default);
   \   0128   02....         MOVW      AX,DATDbkMirrors+162
   \   012B   D2             MOVW      BC,AX
   \   012C   100000         MOVW      AX,#0
   \   012F   B3             PUSH      BC
   \   0130   B1             PUSH      AX
   \   0131   02....         MOVW      AX,DATDbkMirrors+160
   \   0134   120000         MOVW      BC,#0
   \   0137   D6             MOVW      HL,AX
   \   0138   891C           MOVW      AX,SP
   \   013A   E6             XCHW      AX,HL
   \   013B   E2             XCHW      AX,BC
   \   013C   0902           ADD       A,[HL+0x02]
   \   013E   30             XCH       A,X
   \   013F   0903           ADD       A,[HL+0x03]
   \   0141   E2             XCHW      AX,BC
   \   0142   B6             POP       HL
   \   0143   B6             POP       HL
   \   0144   B5             PUSH      DE
   \   0145   D4             MOVW      DE,AX
   \   0146   64             MOV       A,E
   \   0147   18....         SUB       A,DatTrpExportData+20
   \   014A   70             MOV       X,A
   \   014B   65             MOV       A,D
   \   014C   38....         SUBC      A,DatTrpExportData+21
   \   014F   6160           OR        X,A
   \   0151   62             MOV       A,C
   \   0152   38....         SUBC      A,DatTrpExportData+22
   \   0155   6160           OR        X,A
   \   0157   63             MOV       A,B
   \   0158   38....         SUBC      A,DatTrpExportData+23
   \   015B   6160           OR        X,A
   \   015D   B4             POP       DE
   \   015E   AD11           BZ        ??LRNFactoryModeInProgress_61
   \   0160   02....         MOVW      AX,DatTrpExportData+20
   \   0163   03....         MOVW      DATDbkMirrors+160,AX
   \   0166   02....         MOVW      AX,DatTrpExportData+22
   \   0169   03....         MOVW      DATDbkMirrors+162,AX
   \   016C   A104           MOV       A,#4
   \   016E   9A....         CALL      DATDbkStartUpdate
   1833                  mDATWriteTable(U32Bit, EEP_SI28Bits, 0, mDATRead(U32Bit, DATTrpResynchronizationValue, Default), Default);
   \                     ??LRNFactoryModeInProgress_61:
   \   0171   02....         MOVW      AX,DATDbkMirrors+146
   \   0174   D2             MOVW      BC,AX
   \   0175   100000         MOVW      AX,#0
   \   0178   B3             PUSH      BC
   \   0179   B1             PUSH      AX
   \   017A   02....         MOVW      AX,DATDbkMirrors+144
   \   017D   120000         MOVW      BC,#0
   \   0180   D6             MOVW      HL,AX
   \   0181   891C           MOVW      AX,SP
   \   0183   E6             XCHW      AX,HL
   \   0184   E2             XCHW      AX,BC
   \   0185   0902           ADD       A,[HL+0x02]
   \   0187   30             XCH       A,X
   \   0188   0903           ADD       A,[HL+0x03]
   \   018A   E2             XCHW      AX,BC
   \   018B   B6             POP       HL
   \   018C   B6             POP       HL
   \   018D   B5             PUSH      DE
   \   018E   D4             MOVW      DE,AX
   \   018F   64             MOV       A,E
   \   0190   18....         SUB       A,DatTrpExportData+20
   \   0193   70             MOV       X,A
   \   0194   65             MOV       A,D
   \   0195   38....         SUBC      A,DatTrpExportData+21
   \   0198   6160           OR        X,A
   \   019A   62             MOV       A,C
   \   019B   38....         SUBC      A,DatTrpExportData+22
   \   019E   6160           OR        X,A
   \   01A0   63             MOV       A,B
   \   01A1   38....         SUBC      A,DatTrpExportData+23
   \   01A4   6160           OR        X,A
   \   01A6   B4             POP       DE
   \   01A7   AD11           BZ        ??LRNFactoryModeInProgress_62
   \   01A9   02....         MOVW      AX,DatTrpExportData+20
   \   01AC   03....         MOVW      DATDbkMirrors+144,AX
   \   01AF   02....         MOVW      AX,DatTrpExportData+22
   \   01B2   03....         MOVW      DATDbkMirrors+146,AX
   \   01B5   A104           MOV       A,#4
   \   01B7   9A....         CALL      DATDbkStartUpdate
   1834          
   1835                  // Store RSK in Eeprom 
   1836                  WriteRSKInEeprom(cKeyNumber1, RemoteSecretKey);
   \                     ??LRNFactoryModeInProgress_62:
   \   01BA   A100           MOV       A,#0
   \   01BC   12....         MOVW      BC,#RemoteSecretKey
   \   01BF   16....         MOVW      HL,#LWRD(WriteRSKInEeprom)
   \   01C2   A4..           MOV       E,#BYTE3(WriteRSKInEeprom)
   \   01C4   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1837          
   1838                  MemorizeKeyFrequencyCounter();
   \   01C5   16....         MOVW      HL,#LWRD(MemorizeKeyFrequencyCounter)
   \   01C8   A4..           MOV       E,#BYTE3(MemorizeKeyFrequencyCounter)
   \   01CA   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1839              }
   1840          
   1841              // Fill unused key passwords with random values
   1842              for (u8IndexL = 1; u8IndexL < cDATTrpMaxNumberOfKey; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_60:
   \   01CB   14....         MOVW      DE,#DATDbkMirrors+4
   \   01CE   891C           MOVW      AX,SP
   \   01D0   D6             MOVW      HL,AX
   \   01D1   A103           MOV       A,#3
   \   01D3   97             MOV       [HL],A
   1843              {
   1844                  u32RandomValue = LIBCalculateRandomNb(TOSClock);
   \                     ??LRNWriteInEepromFirstTransponderCodes_Static_1:
   \   01D4   02....         MOVW      AX,TOSClock
   \   01D7   120000         MOVW      BC,#0
   \   01DA   9A....         CALL      LIBCalculateRandomNb
   \   01DD   D6             MOVW      HL,AX
   \   01DE   891C           MOVW      AX,SP
   \   01E0   80             INCW      AX
   \   01E1   80             INCW      AX
   \   01E2   E6             XCHW      AX,HL
   \   01E3   BE01           MOV       [HL+0x01],A
   \   01E5   60             MOV       A,X
   \   01E6   97             MOV       [HL],A
   \   01E7   C2             MOVW      AX,BC
   \   01E8   BE03           MOV       [HL+0x03],A
   \   01EA   60             MOV       A,X
   \   01EB   BE02           MOV       [HL+0x02],A
   1845                  mDATWriteTable(U32Bit, EEP_PwdTag, u8IndexL, u32RandomValue, Default);
   \   01ED   C4             MOVW      AX,DE
   \   01EE   B7             PUSH      HL
   \   01EF   D6             MOVW      HL,AX
   \   01F0   AE56           MOV       A,[HL+0x56]
   \   01F2   70             MOV       X,A
   \   01F3   AE57           MOV       A,[HL+0x57]
   \   01F5   D2             MOVW      BC,AX
   \   01F6   100000         MOVW      AX,#0
   \   01F9   B3             PUSH      BC
   \   01FA   B1             PUSH      AX
   \   01FB   AE54           MOV       A,[HL+0x54]
   \   01FD   70             MOV       X,A
   \   01FE   AE55           MOV       A,[HL+0x55]
   \   0200   120000         MOVW      BC,#0
   \   0203   D6             MOVW      HL,AX
   \   0204   891C           MOVW      AX,SP
   \   0206   E6             XCHW      AX,HL
   \   0207   E2             XCHW      AX,BC
   \   0208   0902           ADD       A,[HL+0x02]
   \   020A   30             XCH       A,X
   \   020B   0903           ADD       A,[HL+0x03]
   \   020D   E2             XCHW      AX,BC
   \   020E   B6             POP       HL
   \   020F   B6             POP       HL
   \   0210   B6             POP       HL
   \   0211   B5             PUSH      DE
   \   0212   D4             MOVW      DE,AX
   \   0213   64             MOV       A,E
   \   0214   1F             SUB       A,[HL]
   \   0215   70             MOV       X,A
   \   0216   65             MOV       A,D
   \   0217   3901           SUBC      A,[HL+0x01]
   \   0219   6160           OR        X,A
   \   021B   62             MOV       A,C
   \   021C   3902           SUBC      A,[HL+0x02]
   \   021E   6160           OR        X,A
   \   0220   63             MOV       A,B
   \   0221   3903           SUBC      A,[HL+0x03]
   \   0223   6160           OR        X,A
   \   0225   B4             POP       DE
   \   0226   AD29           BZ        ??LRNFactoryModeInProgress_63
   \   0228   891C           MOVW      AX,SP
   \   022A   D6             MOVW      HL,AX
   \   022B   AE02           MOV       A,[HL+0x02]
   \   022D   70             MOV       X,A
   \   022E   AE03           MOV       A,[HL+0x03]
   \   0230   D2             MOVW      BC,AX
   \   0231   C4             MOVW      AX,DE
   \   0232   D6             MOVW      HL,AX
   \   0233   C2             MOVW      AX,BC
   \   0234   BE55           MOV       [HL+0x55],A
   \   0236   60             MOV       A,X
   \   0237   BE54           MOV       [HL+0x54],A
   \   0239   891C           MOVW      AX,SP
   \   023B   80             INCW      AX
   \   023C   80             INCW      AX
   \   023D   D6             MOVW      HL,AX
   \   023E   AE02           MOV       A,[HL+0x02]
   \   0240   72             MOV       C,A
   \   0241   AE03           MOV       A,[HL+0x03]
   \   0243   73             MOV       B,A
   \   0244   C4             MOVW      AX,DE
   \   0245   D6             MOVW      HL,AX
   \   0246   C2             MOVW      AX,BC
   \   0247   BE57           MOV       [HL+0x57],A
   \   0249   60             MOV       A,X
   \   024A   BE56           MOV       [HL+0x56],A
   \   024C   A103           MOV       A,#3
   \   024E   9A....         CALL      DATDbkStartUpdate
   1846              }
   \                     ??LRNFactoryModeInProgress_63:
   \   0251   84             INCW      DE
   \   0252   84             INCW      DE
   \   0253   84             INCW      DE
   \   0254   84             INCW      DE
   \   0255   891C           MOVW      AX,SP
   \   0257   D6             MOVW      HL,AX
   \   0258   87             MOV       A,[HL]
   \   0259   51             DEC       A
   \   025A   97             MOV       [HL],A
   \   025B   AD03           BZ        $+5
   \   025D   9B....         BR        N:??LRNWriteInEepromFirstTransponderCodes_Static_1
   1847          }
   \   0260   9B....         BR        N:?Subroutine0
   \   0263                  REQUIRE ?CL78K_V4_6_L00
   1848          //*****************************************************************************
   1849          //  DESCRIPTION : Start Authentication service with ISK from BCM EEPROM
   1850          //  
   1851          //  PARAMETERS (Type,Name,Min,Max) :  none
   1852          //
   1853          //  RETURN VALUE :  none
   1854          // 
   1855          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1856          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1857          void LRNAuthenticationWithCarISK(void)
   \                     LRNAuthenticationWithCarISK:
   1858          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1859          #ifdef X90_PROJECT
   1860              LRNAuthenticationWithCarISK_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNAuthenticationWithCarISK_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNAuthenticationWithCarISK_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1861          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1862          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1863          static MEM_TYPE void LRNAuthenticationWithCarISK_Static(void)
   \                     LRNAuthenticationWithCarISK_Static:
   1864          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1865          #endif
   1866          
   1867              U8 u8IndexL;
   1868          
   1869              for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0001   12....         MOVW      BC,#DatTrpExportData
   \   0004   16....         MOVW      HL,#DATDbkMirrors
   \   0007   A006           MOV       X,#6
   1870              {
   1871                  mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, mDATReadTable(U8Bit, EEP_ImmoSecretKey, u8IndexL, Default), Default);
   \                     ??LRNAuthenticationWithCarISK_Static_0:
   \   0009   B7             PUSH      HL
   \   000A   B4             POP       DE
   \   000B   E4             XCHW      AX,DE
   \   000C   CA6A00         ADDW      AX,#106
   \   000F   E4             XCHW      AX,DE
   \   0010   85             MOV       A,[DE]
   \   0011   B3             PUSH      BC
   \   0012   B4             POP       DE
   \   0013   E4             XCHW      AX,DE
   \   0014   CA2000         ADDW      AX,#32
   \   0017   E4             XCHW      AX,DE
   \   0018   95             MOV       [DE],A
   1872              }
   \   0019   86             INCW      HL
   \   001A   B3             PUSH      BC
   \   001B   B4             POP       DE
   \   001C   84             INCW      DE
   \   001D   B5             PUSH      DE
   \   001E   B2             POP       BC
   \   001F   50             DEC       X
   \   0020   60             MOV       A,X
   \   0021   BDE6           BNZ       ??LRNAuthenticationWithCarISK_Static_0
   1873          
   1874              mDATWrite(U1Bit, DATTrpAuthentInLearningMode, 1, Default);
   \   0023   A103           MOV       A,#3
   \   0025   16....         MOVW      HL,#DatTrpExportData+50
   \   0028   7182           SET1      [HL].0
   1875              mDATControl(Trp, cDATTrpAuthenticate);
   \   002A   ..             CALLT     [__T_DATTrpControl]
   1876          }
   \   002B   B2             POP       BC
   \   002C   AF             RET       
   \   002D                  REQUIRE ?CL78K_V4_6_L00
   1877          //*****************************************************************************
   1878          //  DESCRIPTION : Test if the current transponder is not already learnt
   1879          //  
   1880          //  PARAMETERS (Type,Name,Min,Max) :  none
   1881          //
   1882          //  RETURN VALUE :  cFalse or cTrue
   1883          // 
   1884          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1885          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1886          BOOL LRNKeyNotAlreadyRelearnt(void)
   \                     LRNKeyNotAlreadyRelearnt:
   1887          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1888          #ifdef X90_PROJECT
   1889              return LRNKeyNotAlreadyRelearnt_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNKeyNotAlreadyRelearnt_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNKeyNotAlreadyRelearnt_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1890          }
   1891          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1892          static MEM_TYPE BOOL LRNKeyNotAlreadyRelearnt_Static(void)
   \                     LRNKeyNotAlreadyRelearnt_Static:
   1893          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 2
   \   0001   B7             PUSH      HL
   1894          #endif
   1895          
   1896              U8   u8IndexL;
   1897              BOOL bKeyUnknownL = cTrue;
   \   0002   A401           MOV       E,#1
   1898          
   1899              for (u8IndexL = 0; (u8IndexL < mDATRead(U8Bit, NumberOfKeysLearnt, Default)) && (bKeyUnknownL != cFalse); u8IndexL++)
   \   0004   A500           MOV       D,#0
   \   0006   8E....         MOV       A,DATCmnImmoData+13
   \   0009   4D00           CMP       A,#0
   \   000B   AD50           BZ        ??LRNFactoryModeInProgress_64
   \   000D   10....         MOVW      AX,#TableOfKeyIdentifierReassigned
   \   0010   B6             POP       HL
   \   0011   B1             PUSH      AX
   1900              {
   1901                  if (TableOfKeyIdentifierReassigned[u8IndexL] == mDATRead(U32Bit, DATTrpIdentifierOfPresentKey, Default))
   \                     ??LRNKeyNotAlreadyRelearnt_Static_0:
   \   0012   891C           MOVW      AX,SP
   \   0014   D6             MOVW      HL,AX
   \   0015   87             MOV       A,[HL]
   \   0016   70             MOV       X,A
   \   0017   AE01           MOV       A,[HL+0x01]
   \   0019   D6             MOVW      HL,AX
   \   001A   AE02           MOV       A,[HL+0x02]
   \   001C   72             MOV       C,A
   \   001D   AE03           MOV       A,[HL+0x03]
   \   001F   73             MOV       B,A
   \   0020   87             MOV       A,[HL]
   \   0021   70             MOV       X,A
   \   0022   AE01           MOV       A,[HL+0x01]
   \   0024   B5             PUSH      DE
   \   0025   D4             MOVW      DE,AX
   \   0026   64             MOV       A,E
   \   0027   18....         SUB       A,DatTrpExportData+12
   \   002A   70             MOV       X,A
   \   002B   65             MOV       A,D
   \   002C   38....         SUBC      A,DatTrpExportData+13
   \   002F   6160           OR        X,A
   \   0031   62             MOV       A,C
   \   0032   38....         SUBC      A,DatTrpExportData+14
   \   0035   6160           OR        X,A
   \   0037   63             MOV       A,B
   \   0038   38....         SUBC      A,DatTrpExportData+15
   \   003B   6160           OR        X,A
   \   003D   B4             POP       DE
   \   003E   BD02           BNZ       ??LRNFactoryModeInProgress_65
   1902                  {
   1903                      bKeyUnknownL = cFalse;
   \   0040   A400           MOV       E,#0
   1904                  }
   1905              }
   \                     ??LRNFactoryModeInProgress_65:
   \   0042   45             INC       D
   \   0043   891C           MOVW      AX,SP
   \   0045   D6             MOVW      HL,AX
   \   0046   87             MOV       A,[HL]
   \   0047   70             MOV       X,A
   \   0048   AE01           MOV       A,[HL+0x01]
   \   004A   D6             MOVW      HL,AX
   \   004B   86             INCW      HL
   \   004C   86             INCW      HL
   \   004D   86             INCW      HL
   \   004E   86             INCW      HL
   \   004F   C6             MOVW      AX,HL
   \   0050   B6             POP       HL
   \   0051   B1             PUSH      AX
   \   0052   65             MOV       A,D
   \   0053   48....         CMP       A,DATCmnImmoData+13
   \   0056   9D05           BNC       ??LRNFactoryModeInProgress_64
   \   0058   64             MOV       A,E
   \   0059   4D00           CMP       A,#0
   \   005B   BDB5           BNZ       ??LRNKeyNotAlreadyRelearnt_Static_0
   1906              return (bKeyUnknownL);
   \                     ??LRNFactoryModeInProgress_64:
   \   005D   64             MOV       A,E
   \   005E   B2             POP       BC
   \   005F   B2             POP       BC
   \   0060   AF             RET       
   \   0061                  REQUIRE ?CL78K_V4_6_L00
   1907          }
   1908          //*****************************************************************************
   1909          //  DESCRIPTION : Test if the current transponder is known by the BCM
   1910          //  
   1911          //  PARAMETERS (Type,Name,Min,Max) :  none
   1912          //
   1913          //  RETURN VALUE :  cFalse or cTrue
   1914          // 
   1915          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1916          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1917          BOOL LRNKeyKnownByBCM(void)
   \                     LRNKeyKnownByBCM:
   1918          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1919              return (mDATRead(U8Bit, DATTrpIndexOfKeyRecognized, Default) != cDATTrpInvalidKeyIndex);
   \   0000   8E....         MOV       A,DatTrpExportData+41
   \   0003   4D04           CMP       A,#4
   \   0005   AD03           BZ        ??LRNFactoryModeInProgress_160
   \   0007   A101           MOV       A,#1
   \   0009   AF             RET       
   \                     ??LRNFactoryModeInProgress_160:
   \   000A   A100           MOV       A,#0
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
   1920          }
   1921          //*****************************************************************************
   1922          //  DESCRIPTION : Store codes of a already known transponder
   1923          //  
   1924          //  PARAMETERS (Type,Name,Min,Max) :  none
   1925          //
   1926          //  RETURN VALUE :  none
   1927          // 
   1928          //  DESIGN INFORMATION :  refer to Detailed Design Document
   1929          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   1930          void LRNMemorizeTranspAlreadyKnown(void)
   \                     LRNMemorizeTranspAlreadyKnown:
   1931          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1932          #ifdef X90_PROJECT
   1933              LRNMemorizeTranspAlreadyKnown_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNMemorizeTranspAlreadyKnown_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNMemorizeTranspAlreadyKnown_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1934          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1935          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1936          static MEM_TYPE void LRNMemorizeTranspAlreadyKnown_Static( void )
   \                     LRNMemorizeTranspAlreadyKnown_Static:
   1937          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 4
   \   0001   B7             PUSH      HL
   \   0002   B7             PUSH      HL
   1938          #endif
   1939          
   1940              U8 u8IndexL;
   1941              U8 u8IndexOfKeyRecognizedL;
   1942              U8 u8KeyNumberL;  
   1943          
   1944              u8IndexOfKeyRecognizedL = mDATRead(U8Bit, DATTrpIndexOfKeyRecognized, Default);
   \   0003   8E....         MOV       A,DatTrpExportData+41
   \   0006   D6             MOVW      HL,AX
   \   0007   891C           MOVW      AX,SP
   \   0009   80             INCW      AX
   \   000A   80             INCW      AX
   \   000B   E6             XCHW      AX,HL
   \   000C   97             MOV       [HL],A
   1945              u8KeyNumberL            = mDATRead(U8Bit, NumberOfKeysLearnt, Default);
   \   000D   8E....         MOV       A,DATCmnImmoData+13
   \   0010   72             MOV       C,A
   1946          
   1947              // Store identifier and pwdtag
   1948              TableOfKeyIdentifierReassigned[u8KeyNumberL] = mDATReadTable(U32Bit, EEP_KeyIdentifier, u8IndexOfKeyRecognizedL, Default);
   \   0011   87             MOV       A,[HL]
   \   0012   A004           MOV       X,#4
   \   0014   3188           MULU      X
   \   0016   CA....         ADDW      AX,#DATDbkMirrors
   \   0019   D4             MOVW      DE,AX
   \   001A   62             MOV       A,C
   \   001B   70             MOV       X,A
   \   001C   A100           MOV       A,#0
   \   001E   B6             POP       HL
   \   001F   B1             PUSH      AX
   \   0020   C4             MOVW      AX,DE
   \   0021   D6             MOVW      HL,AX
   \   0022   AE46           MOV       A,[HL+0x46]
   \   0024   70             MOV       X,A
   \   0025   AE47           MOV       A,[HL+0x47]
   \   0027   D2             MOVW      BC,AX
   \   0028   100000         MOVW      AX,#0
   \   002B   B3             PUSH      BC
   \   002C   B1             PUSH      AX
   \   002D   AE44           MOV       A,[HL+0x44]
   \   002F   70             MOV       X,A
   \   0030   AE45           MOV       A,[HL+0x45]
   \   0032   120000         MOVW      BC,#0
   \   0035   D6             MOVW      HL,AX
   \   0036   891C           MOVW      AX,SP
   \   0038   E6             XCHW      AX,HL
   \   0039   E2             XCHW      AX,BC
   \   003A   0902           ADD       A,[HL+0x02]
   \   003C   30             XCH       A,X
   \   003D   0903           ADD       A,[HL+0x03]
   \   003F   E2             XCHW      AX,BC
   \   0040   B6             POP       HL
   \   0041   B6             POP       HL
   \   0042   B3             PUSH      BC
   \   0043   B1             PUSH      AX
   \   0044   891C           MOVW      AX,SP
   \   0046   D6             MOVW      HL,AX
   \   0047   AE04           MOV       A,[HL+0x04]
   \   0049   70             MOV       X,A
   \   004A   AE05           MOV       A,[HL+0x05]
   \   004C   30             XCH       A,X
   \   004D   27             ROLC      A,0x1
   \   004E   30             XCH       A,X
   \   004F   27             ROLC      A,0x1
   \   0050   30             XCH       A,X
   \   0051   27             ROLC      A,0x1
   \   0052   30             XCH       A,X
   \   0053   27             ROLC      A,0x1
   \   0054   CA....         ADDW      AX,#TableOfKeyIdentifierReassigned
   \   0057   D6             MOVW      HL,AX
   \   0058   B0             POP       AX
   \   0059   B2             POP       BC
   \   005A   BE01           MOV       [HL+0x01],A
   \   005C   60             MOV       A,X
   \   005D   97             MOV       [HL],A
   \   005E   C2             MOVW      AX,BC
   \   005F   BE03           MOV       [HL+0x03],A
   \   0061   60             MOV       A,X
   \   0062   BE02           MOV       [HL+0x02],A
   1949              TableOfPassWordTagReassigned[u8KeyNumberL]   = mDATReadTable(U32Bit, EEP_PwdTag, u8IndexOfKeyRecognizedL, Default);
   \   0064   C4             MOVW      AX,DE
   \   0065   D6             MOVW      HL,AX
   \   0066   AE56           MOV       A,[HL+0x56]
   \   0068   70             MOV       X,A
   \   0069   AE57           MOV       A,[HL+0x57]
   \   006B   D2             MOVW      BC,AX
   \   006C   100000         MOVW      AX,#0
   \   006F   B3             PUSH      BC
   \   0070   B1             PUSH      AX
   \   0071   AE54           MOV       A,[HL+0x54]
   \   0073   70             MOV       X,A
   \   0074   AE55           MOV       A,[HL+0x55]
   \   0076   120000         MOVW      BC,#0
   \   0079   D6             MOVW      HL,AX
   \   007A   891C           MOVW      AX,SP
   \   007C   E6             XCHW      AX,HL
   \   007D   E2             XCHW      AX,BC
   \   007E   0902           ADD       A,[HL+0x02]
   \   0080   30             XCH       A,X
   \   0081   0903           ADD       A,[HL+0x03]
   \   0083   E2             XCHW      AX,BC
   \   0084   B6             POP       HL
   \   0085   B6             POP       HL
   \   0086   B3             PUSH      BC
   \   0087   B1             PUSH      AX
   \   0088   891C           MOVW      AX,SP
   \   008A   D6             MOVW      HL,AX
   \   008B   AE04           MOV       A,[HL+0x04]
   \   008D   70             MOV       X,A
   \   008E   AE05           MOV       A,[HL+0x05]
   \   0090   30             XCH       A,X
   \   0091   27             ROLC      A,0x1
   \   0092   30             XCH       A,X
   \   0093   27             ROLC      A,0x1
   \   0094   30             XCH       A,X
   \   0095   27             ROLC      A,0x1
   \   0096   30             XCH       A,X
   \   0097   27             ROLC      A,0x1
   \   0098   CA....         ADDW      AX,#TableOfPassWordTagReassigned
   \   009B   D6             MOVW      HL,AX
   \   009C   B0             POP       AX
   \   009D   B2             POP       BC
   \   009E   BE01           MOV       [HL+0x01],A
   \   00A0   60             MOV       A,X
   \   00A1   97             MOV       [HL],A
   \   00A2   C2             MOVW      AX,BC
   \   00A3   BE03           MOV       [HL+0x03],A
   \   00A5   60             MOV       A,X
   \   00A6   BE02           MOV       [HL+0x02],A
   1950          
   1951              if (mDATRead(U1Bit, DATTrpKeyWithRF, Default) != 0)
   \   00A8   16....         MOVW      HL,#DatTrpExportData+51
   \   00AB   31A603         BT        [HL].2, $+6
   \   00AE   9B....         BR        N:??LRNFactoryModeInProgress_66
   1952              {
   1953                  MemorizeKeyFrequencyCounter();
   \   00B1   16....         MOVW      HL,#LWRD(MemorizeKeyFrequencyCounter)
   \   00B4   A4..           MOV       E,#BYTE3(MemorizeKeyFrequencyCounter)
   \   00B6   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1954          
   1955                  switch ((tKeyType)u8IndexOfKeyRecognizedL)
   \   00B7   891C           MOVW      AX,SP
   \   00B9   D6             MOVW      HL,AX
   \   00BA   AE02           MOV       A,[HL+0x02]
   \   00BC   4D00           CMP       A,#0
   \   00BE   AD0F           BZ        ??LRNFactoryModeInProgress_67
   \   00C0   4D01           CMP       A,#1
   \   00C2   AD32           BZ        ??LRNFactoryModeInProgress_68
   \   00C4   4D02           CMP       A,#2
   \   00C6   AD55           BZ        ??LRNFactoryModeInProgress_69
   \   00C8   4D03           CMP       A,#3
   \   00CA   AD78           BZ        ??LRNFactoryModeInProgress_70
   \   00CC   9B....         BR        N:??LRNFactoryModeInProgress_71
   1956                  {
   1957                      case cKeyNumber1:
   1958                      for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_67:
   \   00CF   A206           MOV       C,#6
   \   00D1   87             MOV       A,[HL]
   \   00D2   70             MOV       X,A
   \   00D3   62             MOV       A,C
   \   00D4   3188           MULU      X
   \   00D6   CA....         ADDW      AX,#TableOfRemoteSecretKeyReassigned
   \   00D9   D2             MOVW      BC,AX
   \   00DA   14....         MOVW      DE,#DATDbkMirrors
   \   00DD   A006           MOV       X,#6
   1959                      {
   1960                          TableOfRemoteSecretKeyReassigned[u8KeyNumberL].SecretKey[u8IndexL] = mDATReadTable(U8Bit, EEP_RemoteSecretKey1, u8IndexL, Default);
   \                     ??LRNMemorizeTranspAlreadyKnown_Static_0:
   \   00DF   B5             PUSH      DE
   \   00E0   B6             POP       HL
   \   00E1   E6             XCHW      AX,HL
   \   00E2   CA7000         ADDW      AX,#112
   \   00E5   E6             XCHW      AX,HL
   \   00E6   87             MOV       A,[HL]
   \   00E7   B3             PUSH      BC
   \   00E8   B6             POP       HL
   \   00E9   97             MOV       [HL],A
   1961                      }
   \   00EA   84             INCW      DE
   \   00EB   B3             PUSH      BC
   \   00EC   B6             POP       HL
   \   00ED   86             INCW      HL
   \   00EE   B7             PUSH      HL
   \   00EF   B2             POP       BC
   \   00F0   50             DEC       X
   \   00F1   60             MOV       A,X
   \   00F2   AD75           BZ        ??LRNFactoryModeInProgress_71
   \   00F4   FAE9           BR        ??LRNMemorizeTranspAlreadyKnown_Static_0
   1962                      break;
   1963          
   1964                      case cKeyNumber2:
   1965                      for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_68:
   \   00F6   A206           MOV       C,#6
   \   00F8   87             MOV       A,[HL]
   \   00F9   70             MOV       X,A
   \   00FA   62             MOV       A,C
   \   00FB   3188           MULU      X
   \   00FD   CA....         ADDW      AX,#TableOfRemoteSecretKeyReassigned
   \   0100   D2             MOVW      BC,AX
   \   0101   14....         MOVW      DE,#DATDbkMirrors
   \   0104   A006           MOV       X,#6
   1966                      {
   1967                          TableOfRemoteSecretKeyReassigned[u8KeyNumberL].SecretKey[u8IndexL] = mDATReadTable(U8Bit, EEP_RemoteSecretKey2, u8IndexL, Default);
   \                     ??LRNMemorizeTranspAlreadyKnown_Static_1:
   \   0106   B5             PUSH      DE
   \   0107   B6             POP       HL
   \   0108   E6             XCHW      AX,HL
   \   0109   CA7600         ADDW      AX,#118
   \   010C   E6             XCHW      AX,HL
   \   010D   87             MOV       A,[HL]
   \   010E   B3             PUSH      BC
   \   010F   B6             POP       HL
   \   0110   97             MOV       [HL],A
   1968                      }
   \   0111   84             INCW      DE
   \   0112   B3             PUSH      BC
   \   0113   B6             POP       HL
   \   0114   86             INCW      HL
   \   0115   B7             PUSH      HL
   \   0116   B2             POP       BC
   \   0117   50             DEC       X
   \   0118   60             MOV       A,X
   \   0119   AD4E           BZ        ??LRNFactoryModeInProgress_71
   \   011B   FAE9           BR        ??LRNMemorizeTranspAlreadyKnown_Static_1
   1969                      break;
   1970          
   1971                      case cKeyNumber3:
   1972                      for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_69:
   \   011D   A206           MOV       C,#6
   \   011F   87             MOV       A,[HL]
   \   0120   70             MOV       X,A
   \   0121   62             MOV       A,C
   \   0122   3188           MULU      X
   \   0124   CA....         ADDW      AX,#TableOfRemoteSecretKeyReassigned
   \   0127   D2             MOVW      BC,AX
   \   0128   14....         MOVW      DE,#DATDbkMirrors
   \   012B   A006           MOV       X,#6
   1973                      {
   1974                          TableOfRemoteSecretKeyReassigned[u8KeyNumberL].SecretKey[u8IndexL] = mDATReadTable(U8Bit, EEP_RemoteSecretKey3, u8IndexL, Default);
   \                     ??LRNMemorizeTranspAlreadyKnown_Static_2:
   \   012D   B5             PUSH      DE
   \   012E   B6             POP       HL
   \   012F   E6             XCHW      AX,HL
   \   0130   CA7C00         ADDW      AX,#124
   \   0133   E6             XCHW      AX,HL
   \   0134   87             MOV       A,[HL]
   \   0135   B3             PUSH      BC
   \   0136   B6             POP       HL
   \   0137   97             MOV       [HL],A
   1975                      }
   \   0138   84             INCW      DE
   \   0139   B3             PUSH      BC
   \   013A   B6             POP       HL
   \   013B   86             INCW      HL
   \   013C   B7             PUSH      HL
   \   013D   B2             POP       BC
   \   013E   50             DEC       X
   \   013F   60             MOV       A,X
   \   0140   AD27           BZ        ??LRNFactoryModeInProgress_71
   \   0142   FAE9           BR        ??LRNMemorizeTranspAlreadyKnown_Static_2
   1976                      break;
   1977          
   1978                      case cKeyNumber4:
   1979                      for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_70:
   \   0144   A206           MOV       C,#6
   \   0146   87             MOV       A,[HL]
   \   0147   70             MOV       X,A
   \   0148   62             MOV       A,C
   \   0149   3188           MULU      X
   \   014B   CA....         ADDW      AX,#TableOfRemoteSecretKeyReassigned
   \   014E   D2             MOVW      BC,AX
   \   014F   14....         MOVW      DE,#DATDbkMirrors
   \   0152   A006           MOV       X,#6
   1980                      {
   1981                          TableOfRemoteSecretKeyReassigned[u8KeyNumberL].SecretKey[u8IndexL] = mDATReadTable(U8Bit, EEP_RemoteSecretKey4, u8IndexL, Default);
   \                     ??LRNMemorizeTranspAlreadyKnown_Static_3:
   \   0154   B5             PUSH      DE
   \   0155   B6             POP       HL
   \   0156   E6             XCHW      AX,HL
   \   0157   CA8200         ADDW      AX,#130
   \   015A   E6             XCHW      AX,HL
   \   015B   87             MOV       A,[HL]
   \   015C   B3             PUSH      BC
   \   015D   B6             POP       HL
   \   015E   97             MOV       [HL],A
   1982                      }
   \   015F   84             INCW      DE
   \   0160   B3             PUSH      BC
   \   0161   B6             POP       HL
   \   0162   86             INCW      HL
   \   0163   B7             PUSH      HL
   \   0164   B2             POP       BC
   \   0165   50             DEC       X
   \   0166   60             MOV       A,X
   \   0167   BDEB           BNZ       ??LRNMemorizeTranspAlreadyKnown_Static_3
   1983                      break;
   1984          
   1985                      //CCOV: amanevd: Cannot be covered because this default case rises explicit assert
   1986                      default:
   1987                      mLIBassert(cFalse);
   1988                      break;
   1989                  }
   1990          
   1991                  TableOfResynchroValueReassigned[u8KeyNumberL] = mDATRead(U32Bit, DATTrpResynchronizationValue, Default);
   \                     ??LRNFactoryModeInProgress_71:
   \   0169   02....         MOVW      AX,DatTrpExportData+22
   \   016C   D2             MOVW      BC,AX
   \   016D   02....         MOVW      AX,DatTrpExportData+20
   \   0170   B3             PUSH      BC
   \   0171   B1             PUSH      AX
   \   0172   891C           MOVW      AX,SP
   \   0174   D6             MOVW      HL,AX
   \   0175   AE04           MOV       A,[HL+0x04]
   \   0177   70             MOV       X,A
   \   0178   AE05           MOV       A,[HL+0x05]
   \   017A   21             CLR1      CY
   \   017B   30             XCH       A,X
   \   017C   27             ROLC      A,0x1
   \   017D   30             XCH       A,X
   \   017E   27             ROLC      A,0x1
   \   017F   30             XCH       A,X
   \   0180   27             ROLC      A,0x1
   \   0181   30             XCH       A,X
   \   0182   27             ROLC      A,0x1
   \   0183   CA....         ADDW      AX,#TableOfResynchroValueReassigned
   \   0186   D6             MOVW      HL,AX
   \   0187   B0             POP       AX
   \   0188   B2             POP       BC
   \   0189   BE01           MOV       [HL+0x01],A
   \   018B   60             MOV       A,X
   \   018C   97             MOV       [HL],A
   \   018D   C2             MOVW      AX,BC
   \   018E   BE03           MOV       [HL+0x03],A
   \   0190   60             MOV       A,X
   \   0191   BE02           MOV       [HL+0x02],A
   1992              }
   1993          }  
   \                     ??LRNFactoryModeInProgress_66:
   \   0193   B0             POP       AX
   \   0194   B0             POP       AX
   \   0195   B2             POP       BC
   \   0196   AF             RET       
   \   0197                  REQUIRE ?CL78K_V4_6_L00
   1994          //*****************************************************************************
   1995          //  DESCRIPTION : Store codes of a new transponder
   1996          //  
   1997          //  PARAMETERS (Type,Name,Min,Max) :  none
   1998          //
   1999          //  RETURN VALUE :  none
   2000          // 
   2001          //  DESIGN INFORMATION :  refer to Detailed Design Document
   2002          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2003          void LRNMemoriseNewTransp(void)
   \                     LRNMemoriseNewTransp:
   2004          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2005          #ifdef X90_PROJECT
   2006              LRNMemoriseNewTransp_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNMemoriseNewTransp_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNMemoriseNewTransp_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2007          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2008          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2009          static MEM_TYPE void LRNMemoriseNewTransp_Static(void)
   \                     LRNMemoriseNewTransp_Static:
   2010          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 2
   \   0001   B7             PUSH      HL
   2011          #endif
   2012          
   2013              U8 u8IndexL;
   2014              U8 u8KeyNumberL;  
   2015          
   2016              u8KeyNumberL = mDATRead(U8Bit, NumberOfKeysLearnt, Default);
   \   0002   8E....         MOV       A,DATCmnImmoData+13
   \   0005   D6             MOVW      HL,AX
   \   0006   891C           MOVW      AX,SP
   \   0008   E6             XCHW      AX,HL
   \   0009   97             MOV       [HL],A
   \   000A   02....         MOVW      AX,u32TrpIdentifierReceived+2
   \   000D   D2             MOVW      BC,AX
   \   000E   02....         MOVW      AX,u32TrpIdentifierReceived
   \   0011   B3             PUSH      BC
   \   0012   B1             PUSH      AX
   \   0013   87             MOV       A,[HL]
   \   0014   A004           MOV       X,#4
   \   0016   3188           MULU      X
   \   0018   CA....         ADDW      AX,#TableOfKeyIdentifierReassigned
   \   001B   D6             MOVW      HL,AX
   \   001C   B0             POP       AX
   \   001D   B2             POP       BC
   \   001E   BE01           MOV       [HL+0x01],A
   \   0020   60             MOV       A,X
   \   0021   97             MOV       [HL],A
   \   0022   C2             MOVW      AX,BC
   \   0023   BE03           MOV       [HL+0x03],A
   \   0025   60             MOV       A,X
   \   0026   BE02           MOV       [HL+0x02],A
   2017          
   2018              TableOfKeyIdentifierReassigned[u8KeyNumberL] = u32TrpIdentifierReceived;
   2019              TableOfPassWordTagReassigned[u8KeyNumberL]   = (u32TrpConfigAndPassWordTag & cMaskKeep24Bits);  
   \   0028   10FF00         MOVW      AX,#255
   \   002B   B1             PUSH      AX
   \   002C   A1FF           MOV       A,#255
   \   002E   B1             PUSH      AX
   \   002F   02....         MOVW      AX,u32TrpConfigAndPassWordTag+2
   \   0032   D2             MOVW      BC,AX
   \   0033   02....         MOVW      AX,u32TrpConfigAndPassWordTag
   \   0036   9A....         CALL      ?L_AND_L03
   \   0039   B3             PUSH      BC
   \   003A   B1             PUSH      AX
   \   003B   891C           MOVW      AX,SP
   \   003D   D6             MOVW      HL,AX
   \   003E   AE04           MOV       A,[HL+0x04]
   \   0040   A004           MOV       X,#4
   \   0042   3188           MULU      X
   \   0044   CA....         ADDW      AX,#TableOfPassWordTagReassigned
   \   0047   D6             MOVW      HL,AX
   \   0048   B0             POP       AX
   \   0049   B2             POP       BC
   \   004A   BE01           MOV       [HL+0x01],A
   \   004C   60             MOV       A,X
   \   004D   97             MOV       [HL],A
   \   004E   C2             MOVW      AX,BC
   \   004F   BE03           MOV       [HL+0x03],A
   \   0051   60             MOV       A,X
   \   0052   BE02           MOV       [HL+0x02],A
   2020          
   2021              if (mDATRead(U1Bit, DATTrpKeyWithRF, Default) != 0)
   \   0054   16....         MOVW      HL,#DatTrpExportData+51
   \   0057   31A740         BF        [HL].2, ??LRNFactoryModeInProgress_72
   2022              {
   2023                  MemorizeKeyFrequencyCounter();
   \   005A   16....         MOVW      HL,#LWRD(MemorizeKeyFrequencyCounter)
   \   005D   A4..           MOV       E,#BYTE3(MemorizeKeyFrequencyCounter)
   \   005F   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   2024          
   2025                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0060   891C           MOVW      AX,SP
   \   0062   D6             MOVW      HL,AX
   \   0063   87             MOV       A,[HL]
   \   0064   A006           MOV       X,#6
   \   0066   3188           MULU      X
   \   0068   CA....         ADDW      AX,#TableOfRemoteSecretKeyReassigned
   \   006B   D6             MOVW      HL,AX
   \   006C   14....         MOVW      DE,#RemoteSecretKey
   \   006F   A006           MOV       X,#6
   2026                  {
   2027                      TableOfRemoteSecretKeyReassigned[u8KeyNumberL].SecretKey[u8IndexL] = RemoteSecretKey[u8IndexL];
   \                     ??LRNMemoriseNewTransp_Static_0:
   \   0071   85             MOV       A,[DE]
   \   0072   97             MOV       [HL],A
   2028                  }
   \   0073   84             INCW      DE
   \   0074   86             INCW      HL
   \   0075   50             DEC       X
   \   0076   BDF9           BNZ       ??LRNMemoriseNewTransp_Static_0
   2029          
   2030                  TableOfResynchroValueReassigned[u8KeyNumberL] = mDATRead(U32Bit, DATTrpResynchronizationValue, Default);
   \   0078   02....         MOVW      AX,DatTrpExportData+22
   \   007B   D2             MOVW      BC,AX
   \   007C   02....         MOVW      AX,DatTrpExportData+20
   \   007F   B3             PUSH      BC
   \   0080   B1             PUSH      AX
   \   0081   891C           MOVW      AX,SP
   \   0083   D6             MOVW      HL,AX
   \   0084   AE04           MOV       A,[HL+0x04]
   \   0086   A004           MOV       X,#4
   \   0088   3188           MULU      X
   \   008A   CA....         ADDW      AX,#TableOfResynchroValueReassigned
   \   008D   D6             MOVW      HL,AX
   \   008E   B0             POP       AX
   \   008F   B2             POP       BC
   \   0090   BE01           MOV       [HL+0x01],A
   \   0092   60             MOV       A,X
   \   0093   97             MOV       [HL],A
   \   0094   C2             MOVW      AX,BC
   \   0095   BE03           MOV       [HL+0x03],A
   \   0097   60             MOV       A,X
   \   0098   BE02           MOV       [HL+0x02],A
   2031              }
   2032          }
   \                     ??LRNFactoryModeInProgress_72:
   \   009A   B0             POP       AX
   \   009B   B2             POP       BC
   \   009C   AF             RET       
   \   009D                  REQUIRE ?CL78K_V4_6_L00
   2033          //*****************************************************************************
   2034          //  DESCRIPTION         : Test if a BCM replacement is requested
   2035          //
   2036          //  PARAMETERS          : None
   2037          //  (Type,Name,Min,Max) 
   2038          //
   2039          //  RETURN VALUE        : cFalse or cTrue
   2040          //
   2041          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2042          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2043          BOOL LRNEnterAfterSaleBCMReplacementMode(void)
   \                     LRNEnterAfterSaleBCMReplacementMode:
   2044          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2045          #ifdef X90_PROJECT
   2046              return LRNEnterAfterSaleBCMReplacementMode_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNEnterAfterSaleBCMReplacementMode_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNEnterAfterSaleBCMReplacementMode_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2047          }
   2048          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2049          static MEM_TYPE BOOL LRNEnterAfterSaleBCMReplacementMode_Static(void)
   \                     LRNEnterAfterSaleBCMReplacementMode_Static:
   2050          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2051          #endif
   2052          
   2053              BOOL bResultL = cFalse;
   \   0000   A000           MOV       X,#0
   2054          
   2055              if (u8LearningMode == cBcmReplacement)
   \   0002   8E....         MOV       A,u8LearningMode
   \   0005   4D02           CMP       A,#2
   \   0007   BD11           BNZ       ??LRNFactoryModeInProgress_73
   2056              {
   2057                  // Start after sale timer
   2058                  TOSStartTimer(&AfterSaleTimer);
   \   0009   10....         MOVW      AX,#AfterSaleTimer
   \   000C   ..             CALLT     [__T_TOSStartTimer]
   2059                  mDATWrite(U1Bit, DATTrpKeyLearningElapsed, 0, Default);
   \   000D   A105           MOV       A,#5
   \   000F   16....         MOVW      HL,#DatTrpExportData+51
   \   0012   71C3           CLR1      [HL].4
   2060                  mDATWrite(U8Bit, LedVerlogPattern, cDATLearningVerlogPattern, Default);
   \   0014   16....         MOVW      HL,#DATCmnImmoData+18
   \   0017   97             MOV       [HL],A
   2061                  
   2062                  bResultL = cTrue;
   \   0018   A001           MOV       X,#1
   2063              }
   2064              return bResultL;
   \                     ??LRNFactoryModeInProgress_73:
   \   001A   60             MOV       A,X
   \   001B   AF             RET       
   \   001C                  REQUIRE ?CL78K_V4_6_L00
   2065          }
   2066          //*****************************************************************************
   2067          //  DESCRIPTION         : Test if key reassignment is requested
   2068          //
   2069          //  PARAMETERS          : None
   2070          //  (Type,Name,Min,Max) 
   2071          //
   2072          //  RETURN VALUE        : cFalse or cTrue
   2073          //
   2074          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2075          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2076          BOOL LRNEnterAfterSaleKeyReassigmentMode(void)
   \                     LRNEnterAfterSaleKeyReassigmentMode:
   2077          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2078          #ifdef X90_PROJECT
   2079              return LRNEnterAfterSaleKeyReassigmentMode_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNEnterAfterSaleKeyReassigmentMode_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNEnterAfterSaleKeyReassigmentMode_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2080          }
   2081          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2082          static MEM_TYPE BOOL LRNEnterAfterSaleKeyReassigmentMode_Static(void)
   \                     LRNEnterAfterSaleKeyReassigmentMode_Static:
   2083          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2084          #endif
   2085          
   2086              BOOL bResultL = cFalse;
   \   0000   A000           MOV       X,#0
   2087          
   2088              if (u8LearningMode == cKeyReassignment)
   \   0002   8E....         MOV       A,u8LearningMode
   \   0005   4D03           CMP       A,#3
   \   0007   BD08           BNZ       ??LRNFactoryModeInProgress_74
   2089              {
   2090                  mDATWrite(U8Bit, LedVerlogPattern, cDATLearningVerlogPattern, Default);
   \   0009   A105           MOV       A,#5
   \   000B   16....         MOVW      HL,#DATCmnImmoData+18
   \   000E   97             MOV       [HL],A
   2091                  bResultL = cTrue;
   \   000F   A001           MOV       X,#1
   2092              }
   2093              return bResultL;
   \                     ??LRNFactoryModeInProgress_74:
   \   0011   60             MOV       A,X
   \   0012   AF             RET       
   \   0013                  REQUIRE ?CL78K_V4_6_L00
   2094          }
   2095          //*****************************************************************************
   2096          //  DESCRIPTION         : Test if factory mode is requested
   2097          //
   2098          //  PARAMETERS          : None
   2099          //  (Type,Name,Min,Max) 
   2100          //
   2101          //  RETURN VALUE        : cFalse or cTrue
   2102          //
   2103          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2104          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2105          BOOL LRNEnterFactoryMode(void)
   \                     LRNEnterFactoryMode:
   2106          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2107          #ifdef X90_PROJECT
   2108              return LRNEnterFactoryMode_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNEnterFactoryMode_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNEnterFactoryMode_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2109          }
   2110          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2111          static MEM_TYPE BOOL LRNEnterFactoryMode_Static(void)
   \                     LRNEnterFactoryMode_Static:
   2112          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2113          #endif
   2114          
   2115              BOOL bResultL = cFalse;
   \   0000   A000           MOV       X,#0
   2116          
   2117              if (u8LearningMode == cFactoryMode)
   \   0002   8E....         MOV       A,u8LearningMode
   \   0005   51             DEC       A
   \   0006   BD3F           BNZ       ??LRNFactoryModeInProgress_75
   2118              {
   2119                  mDATWrite(U1Bit, WritingErrorInEepForKey1InFactoryMode, 0, Default);
   \   0008   A100           MOV       A,#0
   \   000A   16....         MOVW      HL,#DATCmnImmoData+6
   \   000D   97             MOV       [HL],A
   2120                  mDATWrite(U1Bit, WritingErrorInEepForKey2InFactoryMode, 0, Default);
   \   000E   86             INCW      HL
   \   000F   97             MOV       [HL],A
   2121                  mDATWrite(U1Bit, ISKSuccessfullyWritten, 0, Default);
   \   0010   9E....         MOV       DATCmnImmoData+2,A
   2122                  mDATWrite(U1Bit, RSKSuccessfullyWritten, 0, Default);
   \   0013   16....         MOVW      HL,#DATCmnImmoData+3
   \   0016   97             MOV       [HL],A
   2123                  mDATWrite(U1Bit, SynchroSuccessfullyWritten, 0, Default);
   \   0017   86             INCW      HL
   \   0018   97             MOV       [HL],A
   2124                  TOSStartTimer(&PlantModeTimer);
   \   0019   10....         MOVW      AX,#PlantModeTimer
   \   001C   ..             CALLT     [__T_TOSStartTimer]
   2125                  mDATWrite(U1Bit, DATTrpKeyLearningElapsed, 0, Default);
   \   001D   16....         MOVW      HL,#DatTrpExportData+51
   \   0020   71C3           CLR1      [HL].4
   2126          
   2127                  mDATWrite(U8Bit, NumberOfKeysLearnt, mDATRead(U8Bit, EEP_NbKeysLearnt, Default), Default);
   \   0022   8E....         MOV       A,DATDbkMirrors+141
   \   0025   9E....         MOV       DATCmnImmoData+13,A
   2128                  mDATWrite(U8Bit, NumberOfKeys315MHzLearnt, mDATRead(U8Bit, EEP_NbKeysStd315MhzLearnt, Default), Default);
   \   0028   8E....         MOV       A,DATDbkMirrors+139
   \   002B   9E....         MOV       DATCmnImmoData+14,A
   2129                  mDATWrite(U8Bit, NumberOfKeys315MHzSmallLearnt, mDATRead(U8Bit, EEP_NbKeysStd315MhzLowPowerLearnt, Default), Default);
   \   002E   8E....         MOV       A,DATDbkMirrors+140
   \   0031   9E....         MOV       DATCmnImmoData+15,A
   2130                  mDATWrite(U8Bit, NumberOfKeys433MHzLearnt, mDATRead(U8Bit, EEP_NbKeysStd433MhzLearnt, Default), Default);
   \   0034   8E....         MOV       A,DATDbkMirrors+138
   \   0037   9E....         MOV       DATCmnImmoData+16,A
   2131          
   2132                  mDATWrite(U8Bit, LedVerlogPattern, cDATLearningVerlogPattern, Default);
   \   003A   A105           MOV       A,#5
   \   003C   16....         MOVW      HL,#DATCmnImmoData+18
   \   003F   97             MOV       [HL],A
   2133                  bKeyAlreadyLearned = cFalse;
   \   0040   A100           MOV       A,#0
   \   0042   9E....         MOV       bKeyAlreadyLearned,A
   2134                  bResultL = cTrue;
   \   0045   A001           MOV       X,#1
   2135              }
   2136              return bResultL;
   \                     ??LRNFactoryModeInProgress_75:
   \   0047   60             MOV       A,X
   \   0048   AF             RET       
   \   0049                  REQUIRE ?CL78K_V4_6_L00
   2137          }
   2138          //*****************************************************************************
   2139          //  DESCRIPTION         : Test if ignition state is OFF
   2140          //
   2141          //  PARAMETERS          : None
   2142          //  (Type,Name,Min,Max) 
   2143          //
   2144          //  RETURN VALUE        : cFalse or cTrue
   2145          //
   2146          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2147          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2148          BOOL LRNIgnitionOFF(void)
   \                     LRNIgnitionOFF:
   2149          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2150              BOOL bApcOffL;
   2151          
   2152              CheckExitConditions();
   \   0001   16....         MOVW      HL,#LWRD(CheckExitConditions)
   \   0004   A4..           MOV       E,#BYTE3(CheckExitConditions)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2153          
   2154              if (u8LearningMode == cNoLearning)
   \   0007   8E....         MOV       A,u8LearningMode
   \   000A   4D00           CMP       A,#0
   \   000C   BD0E           BNZ       ??LRNFactoryModeInProgress_161
   2155              {
   2156                  mDATWrite(U8Bit, LearningModeInProgress, cDATNoLearningMode, Default);
   \   000E   A100           MOV       A,#0
   \   0010   16....         MOVW      HL,#DATCmnImmoData+17
   \   0013   97             MOV       [HL],A
   2157                  mDATWrite(U1Bit, AFSCodeIsOk,0,Default);
   \   0014   16....         MOVW      HL,#DATCmnImmoData+5
   \   0017   97             MOV       [HL],A
   2158                  TOSStopTimer(&AfterSaleTimer);
   \   0018   10....         MOVW      AX,#AfterSaleTimer
   \   001B   ..             CALLT     [__T_TOSStopTimer]
   2159              }
   2160          
   2161              if (mDATRead(U1Bit, PWR_IGN, Default) == 0)
   \                     ??LRNFactoryModeInProgress_161:
   \   001C   8C..07         BT        S:DATDinInputBuffers+6.0, ??LRNFactoryModeInProgress_162
   2162              {
   2163                  // Activate RF
   2164                  TOSSendControl(cTOSControlReleaseAprTrpResource);
   \   001F   A128           MOV       A,#40
   \   0021   ..             CALLT     [__T_TOSSendControl]
   2165                  bApcOffL = cTrue;
   \   0022   A101           MOV       A,#1
   \   0024   FA02           BR        ??LRNFactoryModeInProgress_163
   2166              }
   2167              else
   2168              {
   2169                  bApcOffL = cFalse;
   \                     ??LRNFactoryModeInProgress_162:
   \   0026   A100           MOV       A,#0
   2170              }
   2171              return bApcOffL;
   \                     ??LRNFactoryModeInProgress_163:
   \   0028   B4             POP       DE
   \   0029   AF             RET       
   \   002A                  REQUIRE ?CL78K_V4_6_L00
   2172          }
   2173          
   2174          //*****************************************************************************
   2175          //  DESCRIPTION         : Test if ignition state is ON
   2176          //                        Manage the erasing of the after sale code when it is 
   2177          //                        enabled.
   2178          //
   2179          //  PARAMETERS          : None
   2180          //  (Type,Name,Min,Max) 
   2181          //
   2182          //  RETURN VALUE        : cFalse or cTrue
   2183          //
   2184          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2185          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2186          BOOL LRNIgnitionON(void)
   \                     LRNIgnitionON:
   2187          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2188          #ifdef X90_PROJECT
   2189              return LRNIgnitionON_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNIgnitionON_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNIgnitionON_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2190          }
   2191          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2192          static MEM_TYPE BOOL LRNIgnitionON_Static(void)
   \                     LRNIgnitionON_Static:
   2193          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   2194          #endif
   2195          
   2196              BOOL bResultL = cFalse;
   \   0001   A200           MOV       C,#0
   2197              U8   u8CounterL;
   2198              U8   u8IndexL;
   2199          
   2200              if (mDATRead(U1Bit, PWR_IGN, Default) != 0)
   \   0003   3103..6F       BF        S:DATDinInputBuffers+6.0, ??LRNFactoryModeInProgress_76
   2201              {
   2202                  // Deactivate RF
   2203                  TOSSendControl(cTOSControlGetAprTrpResource);
   \   0007   A127           MOV       A,#39
   \   0009   ..             CALLT     [__T_TOSSendControl]
   2204          
   2205                  ///////////////////////////////////
   2206                  // Manage After sale code erasing
   2207                  ///////////////////////////////////
   2208                  if(     (cTrue == mDATRead(U1Bit, EEP_CodeAFSAvailable, Default))
   2209                      &&  (cTrue == mDATRead(U1Bit, EEP_EraseAFSCodeRequest, Default))
   2210                    )
   \   000A   8E....         MOV       A,DATDbkMirrors+143
   \   000D   5D0A           AND       A,#10
   \   000F   4D0A           CMP       A,#10
   \   0011   BD5F           BNZ       ??LRNFactoryModeInProgress_77
   2211                  {
   2212                      u8CounterL = mDATRead(U8Bit, EEP_AfsEraseIgnitionCnt, Default);
   \   0013   8E....         MOV       A,DATDbkMirrors+142
   \   0016   72             MOV       C,A
   2213                      if(u8CounterL < cU8Max)
   \   0017   41             INC       A
   \   0018   AD13           BZ        ??LRNFactoryModeInProgress_78
   2214                      {
   2215                          mDATWrite(U8Bit, EEP_AfsEraseIgnitionCnt, (u8CounterL + 1), Default);
   \   001A   62             MOV       A,C
   \   001B   70             MOV       X,A
   \   001C   A100           MOV       A,#0
   \   001E   80             INCW      AX
   \   001F   5DFF           AND       A,#255
   \   0021   BD05           BNZ       ??LRNFactoryModeInProgress_79
   \   0023   42             INC       C
   \   0024   62             MOV       A,C
   \   0025   9E....         MOV       DATDbkMirrors+142,A
   \                     ??LRNFactoryModeInProgress_79:
   \   0028   A103           MOV       A,#3
   \   002A   9A....         CALL      DATDbkStartUpdate
   2216                      }
   2217          
   2218                      if (    mDATRead(U8Bit, EEP_AfsEraseIgnitionCnt, Default) 
   2219                             >= mDATRead(U8Bit, NEEP_N_MISE_APC, Default))
   \                     ??LRNFactoryModeInProgress_78:
   \   002D   8E....         MOV       A,DATDbkMirrors+142
   \   0030   48....         CMP       A,DATPeeCalibrationData+17
   \   0033   8D3D           BC        ??LRNFactoryModeInProgress_77
   2220                      {
   2221                          mDATWrite(U1Bit, EEP_CodeAFSAvailable, 0, Default);
   \   0035   16....         MOVW      HL,#DATDbkMirrors+143
   \   0038   319707         BF        [HL].1, ??LRNFactoryModeInProgress_80
   \   003B   A103           MOV       A,#3
   \   003D   7193           CLR1      [HL].1
   \   003F   9A....         CALL      DATDbkStartUpdate
   2222                          mDATWrite(U8Bit, EEP_AfsEraseIgnitionCnt, 0, Default);
   \                     ??LRNFactoryModeInProgress_80:
   \   0042   8E....         MOV       A,DATDbkMirrors+142
   \   0045   4D00           CMP       A,#0
   \   0047   AD0B           BZ        ??LRNFactoryModeInProgress_81
   \   0049   A100           MOV       A,#0
   \   004B   16....         MOVW      HL,#DATDbkMirrors+142
   \   004E   97             MOV       [HL],A
   \   004F   A103           MOV       A,#3
   \   0051   9A....         CALL      DATDbkStartUpdate
   2223          
   2224                          for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_81:
   \   0054   14....         MOVW      DE,#DATDbkMirrors
   \   0057   A206           MOV       C,#6
   2225                          {
   2226                              mDATWriteTable(U8Bit, EEP_AfterSalesCode, u8IndexL, 0, Default);
   \                     ??LRNIgnitionON_Static_0:
   \   0059   B5             PUSH      DE
   \   005A   B6             POP       HL
   \   005B   E6             XCHW      AX,HL
   \   005C   CA6400         ADDW      AX,#100
   \   005F   E6             XCHW      AX,HL
   \   0060   87             MOV       A,[HL]
   \   0061   4D00           CMP       A,#0
   \   0063   AD08           BZ        ??LRNFactoryModeInProgress_82
   \   0065   A100           MOV       A,#0
   \   0067   97             MOV       [HL],A
   \   0068   A103           MOV       A,#3
   \   006A   9A....         CALL      DATDbkStartUpdate
   2227                          }
   \                     ??LRNFactoryModeInProgress_82:
   \   006D   84             INCW      DE
   \   006E   52             DEC       C
   \   006F   62             MOV       A,C
   \   0070   BDE7           BNZ       ??LRNIgnitionON_Static_0
   2228                      }
   2229                      else
   2230                      {
   2231                          //Nothing to do
   2232                      }
   2233                  }
   2234                  bResultL = cTrue;
   \                     ??LRNFactoryModeInProgress_77:
   \   0072   A201           MOV       C,#1
   \   0074   FA06           BR        ??LRNFactoryModeInProgress_83
   2235              }
   2236              else
   2237              {
   2238                  CheckExitConditions();
   \                     ??LRNFactoryModeInProgress_76:
   \   0076   16....         MOVW      HL,#LWRD(CheckExitConditions)
   \   0079   A4..           MOV       E,#BYTE3(CheckExitConditions)
   \   007B   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   2239              }
   2240              return bResultL;
   \                     ??LRNFactoryModeInProgress_83:
   \   007C   62             MOV       A,C
   \   007D   B2             POP       BC
   \   007E   AF             RET       
   \   007F                  REQUIRE ?CL78K_V4_6_L00
   2241          }
   2242          //*****************************************************************************
   2243          //  DESCRIPTION         : The learning of the current key is not successful
   2244          //
   2245          //  PARAMETERS          : None
   2246          //  (Type,Name,Min,Max) 
   2247          //
   2248          //  RETURN VALUE        : None
   2249          //
   2250          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2251          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2252          void LRNLearningModeNotSuccess(void)
   \                     LRNLearningModeNotSuccess:
   2253          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2254          #ifdef X90_PROJECT
   2255              LRNLearningModeNotSuccess_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNLearningModeNotSuccess_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNLearningModeNotSuccess_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2256          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2257          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2258          static MEM_TYPE void LRNLearningModeNotSuccess_Static(void)
   \                     LRNLearningModeNotSuccess_Static:
   2259          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2260          #endif
   2261          
   2262              if (u8LearningMode == cFactoryMode)
   \   0000   8E....         MOV       A,u8LearningMode
   \   0003   51             DEC       A
   \   0004   BD1D           BNZ       ??LRNFactoryModeInProgress_84
   2263              {
   2264          
   2265                  //------------------------------------------------
   2266                  // Key learning in Factory mode is not successful
   2267                  //------------------------------------------------
   2268                  if (mExitFactoryModeRequestedIsOn())
   \   0006   16....         MOVW      HL,#u8AprFlag
   \   0009   318707         BF        [HL].0, ??LRNFactoryModeInProgress_85
   2269                  {
   2270                      mClearExitFactoryModeRequested();
   \   000C   A100           MOV       A,#0
   \   000E   7183           CLR1      [HL].0
   2271                      u8LearningMode = cNoLearning;
   \   0010   9E....         MOV       u8LearningMode,A
   2272                  }
   2273          
   2274                  if(cFalse == bKeyAlreadyLearned)
   \                     ??LRNFactoryModeInProgress_85:
   \   0013   8E....         MOV       A,bKeyAlreadyLearned
   \   0016   4D00           CMP       A,#0
   \   0018   BD05           BNZ       ??LRNFactoryModeInProgress_86
   2275                  {
   2276                      mDATWrite(U8Bit, LedVerlogPattern, cDATSwitchOnVerlogPattern, Default);
   \                     ??LRNLearningModeNotSuccess_Static_0:
   \   001A   A101           MOV       A,#1
   2277                  }
   \                     ??LRNLearningModeNotSuccess_Static_1:
   \   001C   9B....         BR        N:?Subroutine2
   2278                  else
   2279                  {
   2280                      mDATWrite(U8Bit, LedVerlogPattern, cDATLearningVerlogPattern, Default);
   \                     ??LRNFactoryModeInProgress_86:
   \   001F   A105           MOV       A,#5
   \   0021   FAF9           BR        ??LRNLearningModeNotSuccess_Static_1
   2281                  }
   2282              }
   2283              else if (u8LearningMode == cBcmReplacement)
   \                     ??LRNFactoryModeInProgress_84:
   \   0023   8E....         MOV       A,u8LearningMode
   \   0026   4D02           CMP       A,#2
   \   0028   ADF0           BZ        ??LRNLearningModeNotSuccess_Static_0
   2284              {
   2285                  //--------------------------------------------
   2286                  // Key learning in After Sale mode with BCM
   2287                  // replacement is not successful
   2288                  //--------------------------------------------
   2289                  mDATWrite(U8Bit, LedVerlogPattern, cDATSwitchOnVerlogPattern, Default);
   2290              }
   2291              else
   2292              {
   2293                  //--------------------------------------------
   2294                  // Key learning in After Sale mode with key
   2295                  // reassignment is not successful
   2296                  //--------------------------------------------
   2297                  if (mGiveUpAfterSaleModeRequestedIsOff())
   \   002A   16....         MOVW      HL,#u8AprFlag
   \   002D   319606         BT        [HL].1, ??LRNFactoryModeInProgress_87
   2298                  {      
   2299                      TOSStartTimer(&AfterSaleTimer);
   \   0030   10....         MOVW      AX,#AfterSaleTimer
   \   0033   ..             CALLT     [__T_TOSStartTimer]
   \   0034   FAE4           BR        ??LRNLearningModeNotSuccess_Static_0
   2300                  }
   2301                  else
   2302                  {
   2303                      u8LearningMode = cNoLearning;    
   \                     ??LRNFactoryModeInProgress_87:
   \   0036   A100           MOV       A,#0
   \   0038   9E....         MOV       u8LearningMode,A
   \   003B   FADD           BR        ??LRNLearningModeNotSuccess_Static_0
   \   003D                  REQUIRE ?CL78K_V4_6_L00
   2304                  }    
   2305                  mDATWrite(U8Bit, LedVerlogPattern, cDATSwitchOnVerlogPattern, Default);
   2306              }
   2307          }

   \                                 In  segment BCODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   0000   16....         MOVW      HL,#DATCmnImmoData+18
   \   0003   97             MOV       [HL],A
   \   0004   AF             RET       
   \   0005                  REQUIRE ?CL78K_V4_6_L00
   2308          //*****************************************************************************
   2309          //  DESCRIPTION         : The learning of the current key is successful
   2310          //
   2311          //  PARAMETERS          : None
   2312          //  (Type,Name,Min,Max) 
   2313          //
   2314          //  RETURN VALUE        : None
   2315          //
   2316          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2317          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2318          void LRNLearningModeSuccess(void)
   \                     LRNLearningModeSuccess:
   2319          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2320          #ifdef X90_PROJECT
   2321              LRNLearningModeSuccess_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNLearningModeSuccess_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNLearningModeSuccess_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2322          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2323          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2324          static MEM_TYPE void LRNLearningModeSuccess_Static(void)
   \                     LRNLearningModeSuccess_Static:
   2325          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2326          #endif
   2327              U8 u8NumberOfKeyL;
   2328          
   2329              if (u8LearningMode == cFactoryMode)
   \   0000   8E....         MOV       A,u8LearningMode
   \   0003   51             DEC       A
   \   0004   AD03           BZ        $+5
   \   0006   9B....         BR        N:??LRNFactoryModeInProgress_88
   2330              {
   2331                  //--------------------------------------------
   2332                  // Key learning in Factory mode is successful
   2333                  //--------------------------------------------    
   2334                  if (mDATRead(U1Bit, EEP_BCMBlank, Default) != 0)
   \   0009   16....         MOVW      HL,#DATDbkMirrors+143
   \   000C   318733         BF        [HL].0, ??LRNFactoryModeInProgress_89
   2335                  {
   2336                      mDATWrite(U1Bit, EEP_BCMBlank, 0, Default);
   \   000F   A103           MOV       A,#3
   \   0011   7183           CLR1      [HL].0
   \   0013   9A....         CALL      DATDbkStartUpdate
   2337          
   2338                      // Inform the learning Tool that the After Sale code is now available
   2339                      // and initialize after sale code erasing counter
   2340                      mDATWrite(U1Bit, EEP_CodeAFSAvailable, 1, Default);
   \   0016   16....         MOVW      HL,#DATDbkMirrors+143
   \   0019   319607         BT        [HL].1, ??LRNFactoryModeInProgress_90
   \   001C   A103           MOV       A,#3
   \   001E   7192           SET1      [HL].1
   \   0020   9A....         CALL      DATDbkStartUpdate
   2341                      mDATWrite(U1Bit, EEP_EraseAFSCodeRequest, 0, Default);
   \                     ??LRNFactoryModeInProgress_90:
   \   0023   16....         MOVW      HL,#DATDbkMirrors+143
   \   0026   31B707         BF        [HL].3, ??LRNFactoryModeInProgress_91
   \   0029   A103           MOV       A,#3
   \   002B   71B3           CLR1      [HL].3
   \   002D   9A....         CALL      DATDbkStartUpdate
   2342                      mDATWrite(U8Bit, EEP_AfsEraseIgnitionCnt, 0, Default);
   \                     ??LRNFactoryModeInProgress_91:
   \   0030   8E....         MOV       A,DATDbkMirrors+142
   \   0033   4D00           CMP       A,#0
   \   0035   AD0B           BZ        ??LRNFactoryModeInProgress_89
   \   0037   A100           MOV       A,#0
   \   0039   16....         MOVW      HL,#DATDbkMirrors+142
   \   003C   97             MOV       [HL],A
   \   003D   A103           MOV       A,#3
   \   003F   9A....         CALL      DATDbkStartUpdate
   2343                  }
   2344          
   2345                  if(cKeyNumber1 == mDATRead(U8Bit, NumberOfKeysLearnt, Default))
   \                     ??LRNFactoryModeInProgress_89:
   \   0042   8E....         MOV       A,DATCmnImmoData+13
   \   0045   4D00           CMP       A,#0
   \   0047   BD06           BNZ       ??LRNFactoryModeInProgress_92
   2346                  {
   2347                      mDATWrite(U8Bit, COD_ERR_APP, cCodeError1h, Default);
   \   0049   A101           MOV       A,#1
   \   004B   16....         MOVW      HL,#DATCmnImmoData+22
   \   004E   97             MOV       [HL],A
   2348                  }
   2349          
   2350                  // Store the number of keys learnt
   2351                  u8NumberOfKeyL = (mDATRead(U8Bit, NumberOfKeysLearnt, Default) + 1);
   \                     ??LRNFactoryModeInProgress_92:
   \   004F   A101           MOV       A,#1
   \   0051   08....         ADD       A,DATCmnImmoData+13
   \   0054   70             MOV       X,A
   2352                  mDATWrite(U8Bit, NumberOfKeysLearnt, u8NumberOfKeyL, Default);
   \   0055   9E....         MOV       DATCmnImmoData+13,A
   2353                  mDATWrite(U8Bit, EEP_NbKeysLearnt, u8NumberOfKeyL, Default);
   \   0058   8E....         MOV       A,DATDbkMirrors+141
   \   005B   6148           CMP       A,X
   \   005D   AD09           BZ        ??LRNFactoryModeInProgress_93
   \   005F   60             MOV       A,X
   \   0060   9E....         MOV       DATDbkMirrors+141,A
   \   0063   A103           MOV       A,#3
   \   0065   9A....         CALL      DATDbkStartUpdate
   2354                  mDATWrite(U8Bit, EEP_NbKeysStd433MhzLearnt, mDATRead(U8Bit, NumberOfKeys433MHzLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_93:
   \   0068   8E....         MOV       A,DATDbkMirrors+138
   \   006B   48....         CMP       A,DATCmnImmoData+16
   \   006E   AD0B           BZ        ??LRNFactoryModeInProgress_94
   \   0070   8E....         MOV       A,DATCmnImmoData+16
   \   0073   9E....         MOV       DATDbkMirrors+138,A
   \   0076   A103           MOV       A,#3
   \   0078   9A....         CALL      DATDbkStartUpdate
   2355                  mDATWrite(U8Bit, EEP_NbKeysStd315MhzLearnt, mDATRead(U8Bit, NumberOfKeys315MHzLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_94:
   \   007B   8E....         MOV       A,DATDbkMirrors+139
   \   007E   48....         CMP       A,DATCmnImmoData+14
   \   0081   AD0B           BZ        ??LRNFactoryModeInProgress_95
   \   0083   8E....         MOV       A,DATCmnImmoData+14
   \   0086   9E....         MOV       DATDbkMirrors+139,A
   \   0089   A103           MOV       A,#3
   \   008B   9A....         CALL      DATDbkStartUpdate
   2356                  mDATWrite(U8Bit, EEP_NbKeysStd315MhzLowPowerLearnt, mDATRead(U8Bit, NumberOfKeys315MHzSmallLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_95:
   \   008E   8E....         MOV       A,DATDbkMirrors+140
   \   0091   48....         CMP       A,DATCmnImmoData+15
   \   0094   AD0B           BZ        ??LRNFactoryModeInProgress_96
   \   0096   8E....         MOV       A,DATCmnImmoData+15
   \   0099   9E....         MOV       DATDbkMirrors+140,A
   \   009C   A103           MOV       A,#3
   \   009E   9A....         CALL      DATDbkStartUpdate
   2357                  TOSStopTimer(&PlantModeTimer);
   \                     ??LRNFactoryModeInProgress_96:
   \   00A1   10....         MOVW      AX,#PlantModeTimer
   \   00A4   ..             CALLT     [__T_TOSStopTimer]
   2358                  mDATWrite(U1Bit, DATTrpKeyLearningElapsed, 0, Default);
   \   00A5   16....         MOVW      HL,#DatTrpExportData+51
   \   00A8   71C3           CLR1      [HL].4
   2359          
   2360                  if(mDATRead(U8Bit, NumberOfKeysLearnt, Default) >= cFactoryModeMaxKeysToLearn)
   \   00AA   8E....         MOV       A,DATCmnImmoData+13
   \   00AD   4D02           CMP       A,#2
   \   00AF   8D12           BC        ??LRNFactoryModeInProgress_97
   2361                  {
   2362                      mDATWrite(U1Bit, EEP_AppCleNonEffect, 0, Default);
   \   00B1   16....         MOVW      HL,#DATDbkMirrors+143
   \   00B4   31C707         BF        [HL].4, ??LRNFactoryModeInProgress_98
   \   00B7   A103           MOV       A,#3
   \   00B9   71C3           CLR1      [HL].4
   \   00BB   9A....         CALL      DATDbkStartUpdate
   2363                      mSetExitFactoryModeRequested();
   \                     ??LRNFactoryModeInProgress_98:
   \   00BE   16....         MOVW      HL,#u8AprFlag
   \   00C1   7182           SET1      [HL].0
   2364                  }
   2365          
   2366                  if (mExitFactoryModeRequestedIsOn())
   \                     ??LRNFactoryModeInProgress_97:
   \   00C3   16....         MOVW      HL,#u8AprFlag
   \   00C6   318603         BT        [HL].0, $+6
   \   00C9   9B....         BR        N:??LRNFactoryModeInProgress_99
   2367                  {
   2368                      mDATWrite(U8Bit, COD_ERR_APP, cCodeError2h, Default);
   \   00CC   A102           MOV       A,#2
   \   00CE   16....         MOVW      HL,#DATCmnImmoData+22
   \   00D1   97             MOV       [HL],A
   2369                      mClearExitFactoryModeRequested();
   \   00D2   A100           MOV       A,#0
   \   00D4   16....         MOVW      HL,#u8AprFlag
   \   00D7   7183           CLR1      [HL].0
   2370                      u8LearningMode = cNoLearning;
   \                     ??LRNLearningModeSuccess_Static_0:
   \   00D9   9E....         MOV       u8LearningMode,A
   \   00DC   9B....         BR        N:??LRNFactoryModeInProgress_99
   2371                  }
   2372              }
   2373              else if (u8LearningMode == cBcmReplacement)
   \                     ??LRNFactoryModeInProgress_88:
   \   00DF   8E....         MOV       A,u8LearningMode
   \   00E2   4D02           CMP       A,#2
   \   00E4   BD77           BNZ       ??LRNFactoryModeInProgress_100
   2374              {
   2375                  //--------------------------------------------
   2376                  // Key learning in After Sale mode with BCM
   2377                  // replacement is successful
   2378                  //--------------------------------------------
   2379                  mDATControl(Apr,cDATAprTestDiagAfterSaleCode);  // Update AFS with new Key
   \   00E6   A105           MOV       A,#5
   \   00E8   16....         MOVW      HL,#LWRD(DATAprControl)
   \   00EB   A4..           MOV       E,#BYTE3(DATAprControl)
   \   00ED   ..             CALLT     [__T_?FAR_CALL_L07]
   2380          
   2381                  mDATWrite(U1Bit, EEP_BCMBlank, 0, Default);
   \   00EE   16....         MOVW      HL,#DATDbkMirrors+143
   \   00F1   318707         BF        [HL].0, ??LRNFactoryModeInProgress_101
   \   00F4   A103           MOV       A,#3
   \   00F6   7183           CLR1      [HL].0
   \   00F8   9A....         CALL      DATDbkStartUpdate
   2382                  mDATWrite(U8Bit, COD_ERR_APP, cCodeError1h, Default);
   \                     ??LRNFactoryModeInProgress_101:
   \   00FB   A101           MOV       A,#1
   \   00FD   16....         MOVW      HL,#DATCmnImmoData+22
   \   0100   97             MOV       [HL],A
   2383                  mDATWrite(U1Bit, EEP_EraseAFSCodeRequest, 1, Default); // cde_eff_code_recu
   \   0101   16....         MOVW      HL,#DATDbkMirrors+143
   \   0104   31B607         BT        [HL].3, ??LRNFactoryModeInProgress_102
   \   0107   A103           MOV       A,#3
   \   0109   71B2           SET1      [HL].3
   \   010B   9A....         CALL      DATDbkStartUpdate
   2384          
   2385                  mDATWrite(U8Bit, EEP_NbKeysLearnt, 1, Default);
   \                     ??LRNFactoryModeInProgress_102:
   \   010E   8E....         MOV       A,DATDbkMirrors+141
   \   0111   51             DEC       A
   \   0112   AD0B           BZ        ??LRNFactoryModeInProgress_103
   \   0114   A101           MOV       A,#1
   \   0116   16....         MOVW      HL,#DATDbkMirrors+141
   \   0119   97             MOV       [HL],A
   \   011A   A103           MOV       A,#3
   \   011C   9A....         CALL      DATDbkStartUpdate
   2386                  mDATWrite(U8Bit, EEP_NbKeysStd433MhzLearnt, mDATRead(U8Bit, NumberOfKeys433MHzLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_103:
   \   011F   8E....         MOV       A,DATDbkMirrors+138
   \   0122   48....         CMP       A,DATCmnImmoData+16
   \   0125   AD0B           BZ        ??LRNFactoryModeInProgress_104
   \   0127   8E....         MOV       A,DATCmnImmoData+16
   \   012A   9E....         MOV       DATDbkMirrors+138,A
   \   012D   A103           MOV       A,#3
   \   012F   9A....         CALL      DATDbkStartUpdate
   2387                  mDATWrite(U8Bit, EEP_NbKeysStd315MhzLearnt, mDATRead(U8Bit, NumberOfKeys315MHzLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_104:
   \   0132   8E....         MOV       A,DATDbkMirrors+139
   \   0135   48....         CMP       A,DATCmnImmoData+14
   \   0138   AD0B           BZ        ??LRNFactoryModeInProgress_105
   \   013A   8E....         MOV       A,DATCmnImmoData+14
   \   013D   9E....         MOV       DATDbkMirrors+139,A
   \   0140   A103           MOV       A,#3
   \   0142   9A....         CALL      DATDbkStartUpdate
   2388                  mDATWrite(U8Bit, EEP_NbKeysStd315MhzLowPowerLearnt, mDATRead(U8Bit, NumberOfKeys315MHzSmallLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_105:
   \   0145   8E....         MOV       A,DATDbkMirrors+140
   \   0148   48....         CMP       A,DATCmnImmoData+15
   \   014B   AD0B           BZ        ??LRNFactoryModeInProgress_106
   \   014D   8E....         MOV       A,DATCmnImmoData+15
   \   0150   9E....         MOV       DATDbkMirrors+140,A
   \   0153   A103           MOV       A,#3
   \   0155   9A....         CALL      DATDbkStartUpdate
   2389          
   2390                  u8LearningMode = cNoLearning;
   \                     ??LRNFactoryModeInProgress_106:
   \   0158   A100           MOV       A,#0
   \   015A   9B....         BR        N:??LRNLearningModeSuccess_Static_0
   2391              }
   2392              else
   2393              {
   2394                  //--------------------------------------------
   2395                  // Key learning in After Sale mode with key
   2396                  // reassignment is successful
   2397                  //--------------------------------------------
   2398                  if (mGiveUpAfterSaleModeRequestedIsOff())
   \                     ??LRNFactoryModeInProgress_100:
   \   015D   16....         MOVW      HL,#u8AprFlag
   \   0160   319613         BT        [HL].1, ??LRNFactoryModeInProgress_107
   2399                  {
   2400                      mDATWrite(U1Bit, AfterSaleModeValidationAuthorized, 1, Default);
   \   0163   A101           MOV       A,#1
   \   0165   16....         MOVW      HL,#DATCmnImmoData+9
   \   0168   97             MOV       [HL],A
   2401                      u8NumberOfKeyL = mDATRead(U8Bit, NumberOfKeysLearnt, Default);
   2402                      mDATWrite(U8Bit, NumberOfKeysLearnt, (u8NumberOfKeyL + 1), Default);
   \   0169   8E....         MOV       A,DATCmnImmoData+13
   \   016C   41             INC       A
   \   016D   9E....         MOV       DATCmnImmoData+13,A
   2403                      TOSStartTimer(&AfterSaleTimer);
   \   0170   10....         MOVW      AX,#AfterSaleTimer
   \   0173   ..             CALLT     [__T_TOSStartTimer]
   \   0174   FA07           BR        ??LRNFactoryModeInProgress_108
   2404                  }
   2405                  else
   2406                  {
   2407                      mClearGiveUpAfterSaleModeRequested();
   \                     ??LRNFactoryModeInProgress_107:
   \   0176   A100           MOV       A,#0
   \   0178   7193           CLR1      [HL].1
   2408                      u8LearningMode = cNoLearning;
   \   017A   9E....         MOV       u8LearningMode,A
   2409                  }
   2410                  mDATWrite(U8Bit, COD_ERR_APP, cCodeError1h, Default);
   \                     ??LRNFactoryModeInProgress_108:
   \   017D   A101           MOV       A,#1
   \   017F   16....         MOVW      HL,#DATCmnImmoData+22
   \   0182   97             MOV       [HL],A
   2411              }
   2412              mDATWrite(U8Bit, LedVerlogPattern, cDATSwitchOffVerlogPattern, Default);
   \                     ??LRNFactoryModeInProgress_99:
   \   0183   A103           MOV       A,#3
   \   0185                  REQUIRE ?CL78K_V4_6_L00
   \   0185                  REQUIRE ?Subroutine2
   \   0185                  ; // Fall through to label ?Subroutine2
   2413          }
   2414          
   2415          //*****************************************************************************
   2416          //  DESCRIPTION         : Update diagnostic data
   2417          //
   2418          //  PARAMETERS          : None
   2419          //  (Type,Name,Min,Max) 
   2420          //
   2421          //  RETURN VALUE        : None
   2422          //
   2423          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2424          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2425          void LRNUpdateDiagData(void)
   \                     LRNUpdateDiagData:
   2426          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2427          #ifdef X90_PROJECT
   2428              LRNUpdateDiagData_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNUpdateDiagData_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNUpdateDiagData_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2429          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2430          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2431          static MEM_TYPE void LRNUpdateDiagData_Static(void)
   \                     LRNUpdateDiagData_Static:
   2432          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2433          #endif
   2434          
   2435              mDATWrite(U1Bit, ISKSuccessfullyWritten,      0, Default);
   \   0000   A100           MOV       A,#0
   \   0002   9E....         MOV       DATCmnImmoData+2,A
   2436              mDATWrite(U1Bit, RSKSuccessfullyWritten,      0, Default);
   \   0005   16....         MOVW      HL,#DATCmnImmoData+3
   \   0008   97             MOV       [HL],A
   2437              mDATWrite(U1Bit, SynchroSuccessfullyWritten,  0, Default);
   \   0009   86             INCW      HL
   \   000A   97             MOV       [HL],A
   2438              if (u8LearningMode != cNoLearning)
   \   000B   8E....         MOV       A,u8LearningMode
   \   000E   4D00           CMP       A,#0
   \   0010   AD03           BZ        ??LRNFactoryModeInProgress_109
   2439              {
   2440                  mDATControl(Trp,cDATTrpInitDiagInfo);
   \   0012   A107           MOV       A,#7
   \   0014   ..             CALLT     [__T_DATTrpControl]
   2441              }
   2442          }
   \                     ??LRNFactoryModeInProgress_109:
   \   0015   AF             RET       
   \   0016                  REQUIRE ?CL78K_V4_6_L00
   2443          
   2444          //*****************************************************************************
   2445          //  DESCRIPTION         : Control used to start learning in after sale mode
   2446          //
   2447          //  PARAMETERS          : None
   2448          //  (Type,Name,Min,Max) 
   2449          //
   2450          //  RETURN VALUE        : None
   2451          //
   2452          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2453          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2454          void LRNStartLearningInAfterSaleMode(void)
   \                     LRNStartLearningInAfterSaleMode:
   2455          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2456          #ifdef X90_PROJECT
   2457              LRNStartLearningInAfterSaleMode_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNStartLearningInAfterSaleMode_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNStartLearningInAfterSaleMode_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2458          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2459          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2460          static MEM_TYPE void LRNStartLearningInAfterSaleMode_Static(void)
   \                     LRNStartLearningInAfterSaleMode_Static:
   2461          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   10....         MOVW      AX,#TableOfKeyIdentifierReassigned
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 8
   \   0004   ..             CALLT     [__T_?FUNC_ENTER_L06]
   \   0005   0800           DW        0x8
   2462          #endif
   2463          
   2464              U8 u8IndexL;
   2465          
   2466              for (u8IndexL = 0; u8IndexL < cDATTrpMaxNumberOfKey; u8IndexL++)
   \   0007   D6             MOVW      HL,AX
   \   0008   891C           MOVW      AX,SP
   \   000A   E6             XCHW      AX,HL
   \   000B   BE05           MOV       [HL+0x05],A
   \   000D   60             MOV       A,X
   \   000E   BE04           MOV       [HL+0x04],A
   \   0010   10....         MOVW      AX,#TableOfPassWordTagReassigned
   \   0013   D6             MOVW      HL,AX
   \   0014   891C           MOVW      AX,SP
   \   0016   E6             XCHW      AX,HL
   \   0017   BE03           MOV       [HL+0x03],A
   \   0019   60             MOV       A,X
   \   001A   BE02           MOV       [HL+0x02],A
   \   001C   10....         MOVW      AX,#TableOfResynchroValueReassigned
   \   001F   B6             POP       HL
   \   0020   B1             PUSH      AX
   \   0021   14....         MOVW      DE,#TableOfRemoteSecretKeyReassigned
   \   0024   891C           MOVW      AX,SP
   \   0026   CA0600         ADDW      AX,#6
   \   0029   D6             MOVW      HL,AX
   \   002A   A104           MOV       A,#4
   \   002C   97             MOV       [HL],A
   2467              {
   2468                  TableOfKeyIdentifierReassigned[u8IndexL]             = 0;
   \                     ??LRNStartLearningInAfterSaleMode_Static_0:
   \   002D   891C           MOVW      AX,SP
   \   002F   D6             MOVW      HL,AX
   \   0030   AE04           MOV       A,[HL+0x04]
   \   0032   70             MOV       X,A
   \   0033   AE05           MOV       A,[HL+0x05]
   \   0035   D6             MOVW      HL,AX
   \   0036   100000         MOVW      AX,#0
   \   0039   D2             MOVW      BC,AX
   \   003A   BE01           MOV       [HL+0x01],A
   \   003C   97             MOV       [HL],A
   \   003D   BE03           MOV       [HL+0x03],A
   \   003F   BE02           MOV       [HL+0x02],A
   2469                  TableOfPassWordTagReassigned[u8IndexL]               = LIBCalculateRandomNb(TOSClock);
   \   0041   891C           MOVW      AX,SP
   \   0043   D6             MOVW      HL,AX
   \   0044   AE02           MOV       A,[HL+0x02]
   \   0046   70             MOV       X,A
   \   0047   AE03           MOV       A,[HL+0x03]
   \   0049   D6             MOVW      HL,AX
   \   004A   B7             PUSH      HL
   \   004B   02....         MOVW      AX,TOSClock
   \   004E   9A....         CALL      LIBCalculateRandomNb
   \   0051   B6             POP       HL
   \   0052   BE01           MOV       [HL+0x01],A
   \   0054   60             MOV       A,X
   \   0055   97             MOV       [HL],A
   \   0056   C2             MOVW      AX,BC
   \   0057   BE03           MOV       [HL+0x03],A
   \   0059   60             MOV       A,X
   \   005A   BE02           MOV       [HL+0x02],A
   2470                  TableOfRemoteSecretKeyReassigned[u8IndexL].SK.SKLow  = 0;
   \   005C   C4             MOVW      AX,DE
   \   005D   D6             MOVW      HL,AX
   \   005E   100000         MOVW      AX,#0
   \   0061   D2             MOVW      BC,AX
   \   0062   BE01           MOV       [HL+0x01],A
   \   0064   97             MOV       [HL],A
   \   0065   BE03           MOV       [HL+0x03],A
   \   0067   BE02           MOV       [HL+0x02],A
   2471                  TableOfRemoteSecretKeyReassigned[u8IndexL].SK.SKHigh = 0;
   \   0069   BE05           MOV       [HL+0x05],A
   \   006B   BE04           MOV       [HL+0x04],A
   2472                  TableOfResynchroValueReassigned[u8IndexL]            = 0;
   \   006D   891C           MOVW      AX,SP
   \   006F   D6             MOVW      HL,AX
   \   0070   87             MOV       A,[HL]
   \   0071   70             MOV       X,A
   \   0072   AE01           MOV       A,[HL+0x01]
   \   0074   D6             MOVW      HL,AX
   \   0075   C2             MOVW      AX,BC
   \   0076   BE01           MOV       [HL+0x01],A
   \   0078   97             MOV       [HL],A
   \   0079   BE03           MOV       [HL+0x03],A
   \   007B   BE02           MOV       [HL+0x02],A
   2473              }    
   \   007D   C4             MOVW      AX,DE
   \   007E   CA0600         ADDW      AX,#6
   \   0081   D4             MOVW      DE,AX
   \   0082   891C           MOVW      AX,SP
   \   0084   D6             MOVW      HL,AX
   \   0085   87             MOV       A,[HL]
   \   0086   70             MOV       X,A
   \   0087   AE01           MOV       A,[HL+0x01]
   \   0089   D6             MOVW      HL,AX
   \   008A   86             INCW      HL
   \   008B   86             INCW      HL
   \   008C   86             INCW      HL
   \   008D   86             INCW      HL
   \   008E   C6             MOVW      AX,HL
   \   008F   B6             POP       HL
   \   0090   B1             PUSH      AX
   \   0091   891C           MOVW      AX,SP
   \   0093   D6             MOVW      HL,AX
   \   0094   AE02           MOV       A,[HL+0x02]
   \   0096   70             MOV       X,A
   \   0097   AE03           MOV       A,[HL+0x03]
   \   0099   D6             MOVW      HL,AX
   \   009A   86             INCW      HL
   \   009B   86             INCW      HL
   \   009C   86             INCW      HL
   \   009D   86             INCW      HL
   \   009E   891C           MOVW      AX,SP
   \   00A0   E6             XCHW      AX,HL
   \   00A1   BE03           MOV       [HL+0x03],A
   \   00A3   60             MOV       A,X
   \   00A4   BE02           MOV       [HL+0x02],A
   \   00A6   AE04           MOV       A,[HL+0x04]
   \   00A8   70             MOV       X,A
   \   00A9   AE05           MOV       A,[HL+0x05]
   \   00AB   D6             MOVW      HL,AX
   \   00AC   86             INCW      HL
   \   00AD   86             INCW      HL
   \   00AE   86             INCW      HL
   \   00AF   86             INCW      HL
   \   00B0   891C           MOVW      AX,SP
   \   00B2   E6             XCHW      AX,HL
   \   00B3   BE05           MOV       [HL+0x05],A
   \   00B5   60             MOV       A,X
   \   00B6   BE04           MOV       [HL+0x04],A
   \   00B8   AE06           MOV       A,[HL+0x06]
   \   00BA   51             DEC       A
   \   00BB   BE06           MOV       [HL+0x06],A
   \   00BD   AD03           BZ        $+5
   \   00BF   9B....         BR        N:??LRNStartLearningInAfterSaleMode_Static_0
   2474          
   2475              mDATWrite(U8Bit, NumberOfKeysLearnt, 0, Default);
   \   00C2   A100           MOV       A,#0
   \   00C4   16....         MOVW      HL,#DATCmnImmoData+13
   \   00C7   97             MOV       [HL],A
   2476              mDATWrite(U8Bit, NumberOfKeys315MHzLearnt, 0, Default);
   \   00C8   86             INCW      HL
   \   00C9   97             MOV       [HL],A
   2477              mDATWrite(U8Bit, NumberOfKeys315MHzSmallLearnt, 0, Default);
   \   00CA   86             INCW      HL
   \   00CB   97             MOV       [HL],A
   2478              mDATWrite(U8Bit, NumberOfKeys433MHzLearnt, 0, Default);
   \   00CC   86             INCW      HL
   \   00CD   97             MOV       [HL],A
   2479          
   2480              mDATWrite(U1Bit, ISKSuccessfullyWritten, 0, Default);
   \   00CE   9E....         MOV       DATCmnImmoData+2,A
   2481              mDATWrite(U1Bit, RSKSuccessfullyWritten, 0, Default);
   \   00D1   16....         MOVW      HL,#DATCmnImmoData+3
   \   00D4   97             MOV       [HL],A
   2482              mDATWrite(U1Bit, SynchroSuccessfullyWritten, 0, Default);
   \   00D5   86             INCW      HL
   \   00D6   97             MOV       [HL],A
   2483          
   2484              // Start after sale timer
   2485              TOSStartTimer(&AfterSaleTimer);
   \   00D7   10....         MOVW      AX,#AfterSaleTimer
   \   00DA   ..             CALLT     [__T_TOSStartTimer]
   2486          
   2487              if (mDATRead(U1Bit, EEP_BCMBlank, Default) == 0)
   \   00DB   A100           MOV       A,#0
   \   00DD   16....         MOVW      HL,#DATDbkMirrors+143
   \   00E0   31860D         BT        [HL].0, ??LRNFactoryModeInProgress_110
   2488              {
   2489                  mDATWrite(U1Bit, WritingErrorInEepInReassignment, 0, Default);
   \   00E3   16....         MOVW      HL,#DATCmnImmoData+10
   \   00E6   97             MOV       [HL],A
   2490                  u8LearningMode = cKeyReassignment;
   \   00E7   A103           MOV       A,#3
   \   00E9   9E....         MOV       u8LearningMode,A
   2491                  mDATWrite(U8Bit, LearningModeInProgress, cDATKeyReassignment, Default);
   \   00EC   A104           MOV       A,#4
   \   00EE   FA09           BR        ??LRNFactoryModeInProgress_111
   2492                  mDATWrite(U1Bit, AfterSaleModeValidationAuthorized, 1, Default);
   2493              }
   2494              else
   2495              {
   2496                  mDATWrite(U1Bit, WritingErrorInEepInBcmReplacement, 0, Default);
   \                     ??LRNFactoryModeInProgress_110:
   \   00F0   16....         MOVW      HL,#DATCmnImmoData+8
   \   00F3   97             MOV       [HL],A
   2497                  u8LearningMode = cBcmReplacement;
   \   00F4   A102           MOV       A,#2
   \   00F6   9E....         MOV       u8LearningMode,A
   2498                  mDATWrite(U8Bit, LearningModeInProgress, cDATBcmReplacement, Default);
   \                     ??LRNFactoryModeInProgress_111:
   \   00F9   16....         MOVW      HL,#DATCmnImmoData+17
   \   00FC   97             MOV       [HL],A
   2499                  mDATWrite(U1Bit, AfterSaleModeValidationAuthorized, 1, Default);
   \   00FD   A101           MOV       A,#1
   \   00FF   16....         MOVW      HL,#DATCmnImmoData+9
   \   0102   97             MOV       [HL],A
   2500              }
   2501          
   2502              mClearGiveUpAfterSaleModeRequested();
   \   0103   A100           MOV       A,#0
   \   0105   16....         MOVW      HL,#u8AprFlag
   \   0108   7193           CLR1      [HL].1
   2503          
   2504              mDATWrite(U8Bit, COD_ERR_APP, cCodeError0h, Default);
   \   010A   16....         MOVW      HL,#DATCmnImmoData+22
   \   010D   97             MOV       [HL],A
   2505              mDATWrite(U1Bit, FactoryModeAuthorized, 0, Default);
   \   010E   9E....         MOV       DATCmnImmoData,A
   2506              mDATWrite(U1Bit, AfterSaleModeAuthorized, 0, Default);
   \   0111   9E....         MOV       DATCmnImmoData+1,A
   2507          }
   \   0114   ..             CALLT     [__T_?FUNC_DEALL_L06]
   \   0115   0800           DW        0x8
   \   0117   B2             POP       BC
   \   0118   AF             RET       
   \   0119                  REQUIRE ?CL78K_V4_6_L00
   2508          //*****************************************************************************
   2509          //  DESCRIPTION         : Control used to validate the keys learnt in after sale
   2510          //                        mode.
   2511          //
   2512          //  PARAMETERS          : None
   2513          //  (Type,Name,Min,Max) 
   2514          //
   2515          //  RETURN VALUE        : None
   2516          //
   2517          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2518          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2519          void LRNValidateLearningInAfterSaleMode(void)
   \                     LRNValidateLearningInAfterSaleMode:
   2520          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2521          #ifdef X90_PROJECT
   2522              LRNValidateLearningInAfterSaleMode_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNValidateLearningInAfterSaleMode_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNValidateLearningInAfterSaleMode_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2523          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2524          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2525          static MEM_TYPE void LRNValidateLearningInAfterSaleMode_Static(void)
   \                     LRNValidateLearningInAfterSaleMode_Static:
   2526          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 12
   \   0001   ..             CALLT     [__T_?FUNC_ENTER_L06]
   \   0002   0C00           DW        0xC
   2527          #endif
   2528          
   2529              tKeyType u8IndexL;
   2530          
   2531              if(cKeyReassignment == u8LearningMode)
   \   0004   8E....         MOV       A,u8LearningMode
   \   0007   4D03           CMP       A,#3
   \   0009   AD03           BZ        $+5
   \   000B   9B....         BR        N:??LRNFactoryModeInProgress_112
   2532              {
   2533                  for (u8IndexL = cKeyNumber1; u8IndexL < cDATTrpMaxNumberOfKey; u8IndexL++)
   \   000E   891C           MOVW      AX,SP
   \   0010   CA0A00         ADDW      AX,#10
   \   0013   D6             MOVW      HL,AX
   \   0014   A100           MOV       A,#0
   \   0016   97             MOV       [HL],A
   \   0017   10....         MOVW      AX,#DATDbkMirrors
   \   001A   B6             POP       HL
   \   001B   B1             PUSH      AX
   \   001C   10....         MOVW      AX,#TableOfKeyIdentifierReassigned
   \   001F   D6             MOVW      HL,AX
   \   0020   891C           MOVW      AX,SP
   \   0022   E6             XCHW      AX,HL
   \   0023   BE07           MOV       [HL+0x07],A
   \   0025   60             MOV       A,X
   \   0026   BE06           MOV       [HL+0x06],A
   \   0028   10....         MOVW      AX,#TableOfPassWordTagReassigned
   \   002B   D6             MOVW      HL,AX
   \   002C   891C           MOVW      AX,SP
   \   002E   E6             XCHW      AX,HL
   \   002F   BE05           MOV       [HL+0x05],A
   \   0031   60             MOV       A,X
   \   0032   BE04           MOV       [HL+0x04],A
   \   0034   10....         MOVW      AX,#TableOfResynchroValueReassigned
   \   0037   D6             MOVW      HL,AX
   \   0038   891C           MOVW      AX,SP
   \   003A   E6             XCHW      AX,HL
   \   003B   BE03           MOV       [HL+0x03],A
   \   003D   60             MOV       A,X
   \   003E   BE02           MOV       [HL+0x02],A
   \   0040   10....         MOVW      AX,#TableOfRemoteSecretKeyReassigned
   \   0043   D6             MOVW      HL,AX
   \   0044   891C           MOVW      AX,SP
   \   0046   E6             XCHW      AX,HL
   \   0047   BE09           MOV       [HL+0x09],A
   \   0049   60             MOV       A,X
   \   004A   BE08           MOV       [HL+0x08],A
   2534                  {
   2535                      // Store the Identifier and Password received after the Authentication sequence
   2536                      mDATWriteTable(U32Bit, EEP_KeyIdentifier, u8IndexL, 
   2537                          TableOfKeyIdentifierReassigned[u8IndexL], Default);
   \                     ??LRNValidateLearningInAfterSaleMode_Static_0:
   \   004C   AE06           MOV       A,[HL+0x06]
   \   004E   70             MOV       X,A
   \   004F   AE07           MOV       A,[HL+0x07]
   \   0051   D6             MOVW      HL,AX
   \   0052   B7             PUSH      HL
   \   0053   B4             POP       DE
   \   0054   891C           MOVW      AX,SP
   \   0056   D6             MOVW      HL,AX
   \   0057   87             MOV       A,[HL]
   \   0058   70             MOV       X,A
   \   0059   AE01           MOV       A,[HL+0x01]
   \   005B   D6             MOVW      HL,AX
   \   005C   AE46           MOV       A,[HL+0x46]
   \   005E   70             MOV       X,A
   \   005F   AE47           MOV       A,[HL+0x47]
   \   0061   D2             MOVW      BC,AX
   \   0062   100000         MOVW      AX,#0
   \   0065   B3             PUSH      BC
   \   0066   B1             PUSH      AX
   \   0067   891C           MOVW      AX,SP
   \   0069   D6             MOVW      HL,AX
   \   006A   AE04           MOV       A,[HL+0x04]
   \   006C   70             MOV       X,A
   \   006D   AE05           MOV       A,[HL+0x05]
   \   006F   D6             MOVW      HL,AX
   \   0070   AE44           MOV       A,[HL+0x44]
   \   0072   70             MOV       X,A
   \   0073   AE45           MOV       A,[HL+0x45]
   \   0075   120000         MOVW      BC,#0
   \   0078   D6             MOVW      HL,AX
   \   0079   891C           MOVW      AX,SP
   \   007B   E6             XCHW      AX,HL
   \   007C   E2             XCHW      AX,BC
   \   007D   0902           ADD       A,[HL+0x02]
   \   007F   30             XCH       A,X
   \   0080   0903           ADD       A,[HL+0x03]
   \   0082   E2             XCHW      AX,BC
   \   0083   B6             POP       HL
   \   0084   B6             POP       HL
   \   0085   B5             PUSH      DE
   \   0086   B6             POP       HL
   \   0087   B5             PUSH      DE
   \   0088   D4             MOVW      DE,AX
   \   0089   64             MOV       A,E
   \   008A   1F             SUB       A,[HL]
   \   008B   70             MOV       X,A
   \   008C   65             MOV       A,D
   \   008D   3901           SUBC      A,[HL+0x01]
   \   008F   6160           OR        X,A
   \   0091   62             MOV       A,C
   \   0092   3902           SUBC      A,[HL+0x02]
   \   0094   6160           OR        X,A
   \   0096   63             MOV       A,B
   \   0097   3903           SUBC      A,[HL+0x03]
   \   0099   6160           OR        X,A
   \   009B   B4             POP       DE
   \   009C   AD40           BZ        ??LRNFactoryModeInProgress_113
   \   009E   891C           MOVW      AX,SP
   \   00A0   D6             MOVW      HL,AX
   \   00A1   AE06           MOV       A,[HL+0x06]
   \   00A3   70             MOV       X,A
   \   00A4   AE07           MOV       A,[HL+0x07]
   \   00A6   D6             MOVW      HL,AX
   \   00A7   87             MOV       A,[HL]
   \   00A8   70             MOV       X,A
   \   00A9   AE01           MOV       A,[HL+0x01]
   \   00AB   D4             MOVW      DE,AX
   \   00AC   891C           MOVW      AX,SP
   \   00AE   D6             MOVW      HL,AX
   \   00AF   87             MOV       A,[HL]
   \   00B0   70             MOV       X,A
   \   00B1   AE01           MOV       A,[HL+0x01]
   \   00B3   D6             MOVW      HL,AX
   \   00B4   C4             MOVW      AX,DE
   \   00B5   BE45           MOV       [HL+0x45],A
   \   00B7   60             MOV       A,X
   \   00B8   BE44           MOV       [HL+0x44],A
   \   00BA   891C           MOVW      AX,SP
   \   00BC   D6             MOVW      HL,AX
   \   00BD   AE06           MOV       A,[HL+0x06]
   \   00BF   70             MOV       X,A
   \   00C0   AE07           MOV       A,[HL+0x07]
   \   00C2   D6             MOVW      HL,AX
   \   00C3   AE02           MOV       A,[HL+0x02]
   \   00C5   72             MOV       C,A
   \   00C6   AE03           MOV       A,[HL+0x03]
   \   00C8   73             MOV       B,A
   \   00C9   C2             MOVW      AX,BC
   \   00CA   D4             MOVW      DE,AX
   \   00CB   891C           MOVW      AX,SP
   \   00CD   D6             MOVW      HL,AX
   \   00CE   87             MOV       A,[HL]
   \   00CF   70             MOV       X,A
   \   00D0   AE01           MOV       A,[HL+0x01]
   \   00D2   D6             MOVW      HL,AX
   \   00D3   C4             MOVW      AX,DE
   \   00D4   BE47           MOV       [HL+0x47],A
   \   00D6   60             MOV       A,X
   \   00D7   BE46           MOV       [HL+0x46],A
   \   00D9   A103           MOV       A,#3
   \   00DB   9A....         CALL      DATDbkStartUpdate
   2538                      mDATWriteTable(U32Bit, EEP_PwdTag, u8IndexL, 
   2539                          TableOfPassWordTagReassigned[u8IndexL], Default);
   \                     ??LRNFactoryModeInProgress_113:
   \   00DE   891C           MOVW      AX,SP
   \   00E0   D6             MOVW      HL,AX
   \   00E1   AE04           MOV       A,[HL+0x04]
   \   00E3   70             MOV       X,A
   \   00E4   AE05           MOV       A,[HL+0x05]
   \   00E6   D6             MOVW      HL,AX
   \   00E7   B7             PUSH      HL
   \   00E8   B4             POP       DE
   \   00E9   891C           MOVW      AX,SP
   \   00EB   D6             MOVW      HL,AX
   \   00EC   87             MOV       A,[HL]
   \   00ED   70             MOV       X,A
   \   00EE   AE01           MOV       A,[HL+0x01]
   \   00F0   D6             MOVW      HL,AX
   \   00F1   AE56           MOV       A,[HL+0x56]
   \   00F3   70             MOV       X,A
   \   00F4   AE57           MOV       A,[HL+0x57]
   \   00F6   D2             MOVW      BC,AX
   \   00F7   100000         MOVW      AX,#0
   \   00FA   B3             PUSH      BC
   \   00FB   B1             PUSH      AX
   \   00FC   891C           MOVW      AX,SP
   \   00FE   D6             MOVW      HL,AX
   \   00FF   AE04           MOV       A,[HL+0x04]
   \   0101   70             MOV       X,A
   \   0102   AE05           MOV       A,[HL+0x05]
   \   0104   D6             MOVW      HL,AX
   \   0105   AE54           MOV       A,[HL+0x54]
   \   0107   70             MOV       X,A
   \   0108   AE55           MOV       A,[HL+0x55]
   \   010A   120000         MOVW      BC,#0
   \   010D   D6             MOVW      HL,AX
   \   010E   891C           MOVW      AX,SP
   \   0110   E6             XCHW      AX,HL
   \   0111   E2             XCHW      AX,BC
   \   0112   0902           ADD       A,[HL+0x02]
   \   0114   30             XCH       A,X
   \   0115   0903           ADD       A,[HL+0x03]
   \   0117   E2             XCHW      AX,BC
   \   0118   B6             POP       HL
   \   0119   B6             POP       HL
   \   011A   B5             PUSH      DE
   \   011B   B6             POP       HL
   \   011C   B5             PUSH      DE
   \   011D   D4             MOVW      DE,AX
   \   011E   64             MOV       A,E
   \   011F   1F             SUB       A,[HL]
   \   0120   70             MOV       X,A
   \   0121   65             MOV       A,D
   \   0122   3901           SUBC      A,[HL+0x01]
   \   0124   6160           OR        X,A
   \   0126   62             MOV       A,C
   \   0127   3902           SUBC      A,[HL+0x02]
   \   0129   6160           OR        X,A
   \   012B   63             MOV       A,B
   \   012C   3903           SUBC      A,[HL+0x03]
   \   012E   6160           OR        X,A
   \   0130   B4             POP       DE
   \   0131   AD40           BZ        ??LRNFactoryModeInProgress_114
   \   0133   891C           MOVW      AX,SP
   \   0135   D6             MOVW      HL,AX
   \   0136   AE04           MOV       A,[HL+0x04]
   \   0138   70             MOV       X,A
   \   0139   AE05           MOV       A,[HL+0x05]
   \   013B   D6             MOVW      HL,AX
   \   013C   87             MOV       A,[HL]
   \   013D   70             MOV       X,A
   \   013E   AE01           MOV       A,[HL+0x01]
   \   0140   D4             MOVW      DE,AX
   \   0141   891C           MOVW      AX,SP
   \   0143   D6             MOVW      HL,AX
   \   0144   87             MOV       A,[HL]
   \   0145   70             MOV       X,A
   \   0146   AE01           MOV       A,[HL+0x01]
   \   0148   D6             MOVW      HL,AX
   \   0149   C4             MOVW      AX,DE
   \   014A   BE55           MOV       [HL+0x55],A
   \   014C   60             MOV       A,X
   \   014D   BE54           MOV       [HL+0x54],A
   \   014F   891C           MOVW      AX,SP
   \   0151   D6             MOVW      HL,AX
   \   0152   AE04           MOV       A,[HL+0x04]
   \   0154   70             MOV       X,A
   \   0155   AE05           MOV       A,[HL+0x05]
   \   0157   D6             MOVW      HL,AX
   \   0158   AE02           MOV       A,[HL+0x02]
   \   015A   72             MOV       C,A
   \   015B   AE03           MOV       A,[HL+0x03]
   \   015D   73             MOV       B,A
   \   015E   C2             MOVW      AX,BC
   \   015F   D4             MOVW      DE,AX
   \   0160   891C           MOVW      AX,SP
   \   0162   D6             MOVW      HL,AX
   \   0163   87             MOV       A,[HL]
   \   0164   70             MOV       X,A
   \   0165   AE01           MOV       A,[HL+0x01]
   \   0167   D6             MOVW      HL,AX
   \   0168   C4             MOVW      AX,DE
   \   0169   BE57           MOV       [HL+0x57],A
   \   016B   60             MOV       A,X
   \   016C   BE56           MOV       [HL+0x56],A
   \   016E   A103           MOV       A,#3
   \   0170   9A....         CALL      DATDbkStartUpdate
   2540          
   2541                      // Store RSK and resynchronization value
   2542                      WriteRSKInEeprom(u8IndexL, TableOfRemoteSecretKeyReassigned[u8IndexL].SecretKey);
   \                     ??LRNFactoryModeInProgress_114:
   \   0173   891C           MOVW      AX,SP
   \   0175   D6             MOVW      HL,AX
   \   0176   AE08           MOV       A,[HL+0x08]
   \   0178   70             MOV       X,A
   \   0179   AE09           MOV       A,[HL+0x09]
   \   017B   D2             MOVW      BC,AX
   \   017C   AE0A           MOV       A,[HL+0x0A]
   \   017E   16....         MOVW      HL,#LWRD(WriteRSKInEeprom)
   \   0181   A4..           MOV       E,#BYTE3(WriteRSKInEeprom)
   \   0183   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   2543                      mDATWriteTable(U32Bit, EEP_SI28Bits, u8IndexL, 
   2544                          TableOfResynchroValueReassigned[u8IndexL], Default);
   \   0184   891C           MOVW      AX,SP
   \   0186   D6             MOVW      HL,AX
   \   0187   AE02           MOV       A,[HL+0x02]
   \   0189   70             MOV       X,A
   \   018A   AE03           MOV       A,[HL+0x03]
   \   018C   D6             MOVW      HL,AX
   \   018D   B7             PUSH      HL
   \   018E   B4             POP       DE
   \   018F   891C           MOVW      AX,SP
   \   0191   D6             MOVW      HL,AX
   \   0192   87             MOV       A,[HL]
   \   0193   70             MOV       X,A
   \   0194   AE01           MOV       A,[HL+0x01]
   \   0196   D6             MOVW      HL,AX
   \   0197   AE92           MOV       A,[HL+0x92]
   \   0199   70             MOV       X,A
   \   019A   AE93           MOV       A,[HL+0x93]
   \   019C   D2             MOVW      BC,AX
   \   019D   100000         MOVW      AX,#0
   \   01A0   B3             PUSH      BC
   \   01A1   B1             PUSH      AX
   \   01A2   891C           MOVW      AX,SP
   \   01A4   D6             MOVW      HL,AX
   \   01A5   AE04           MOV       A,[HL+0x04]
   \   01A7   70             MOV       X,A
   \   01A8   AE05           MOV       A,[HL+0x05]
   \   01AA   D6             MOVW      HL,AX
   \   01AB   AE90           MOV       A,[HL+0x90]
   \   01AD   70             MOV       X,A
   \   01AE   AE91           MOV       A,[HL+0x91]
   \   01B0   120000         MOVW      BC,#0
   \   01B3   D6             MOVW      HL,AX
   \   01B4   891C           MOVW      AX,SP
   \   01B6   E6             XCHW      AX,HL
   \   01B7   E2             XCHW      AX,BC
   \   01B8   0902           ADD       A,[HL+0x02]
   \   01BA   30             XCH       A,X
   \   01BB   0903           ADD       A,[HL+0x03]
   \   01BD   E2             XCHW      AX,BC
   \   01BE   B6             POP       HL
   \   01BF   B6             POP       HL
   \   01C0   B5             PUSH      DE
   \   01C1   B6             POP       HL
   \   01C2   B5             PUSH      DE
   \   01C3   D4             MOVW      DE,AX
   \   01C4   64             MOV       A,E
   \   01C5   1F             SUB       A,[HL]
   \   01C6   70             MOV       X,A
   \   01C7   65             MOV       A,D
   \   01C8   3901           SUBC      A,[HL+0x01]
   \   01CA   6160           OR        X,A
   \   01CC   62             MOV       A,C
   \   01CD   3902           SUBC      A,[HL+0x02]
   \   01CF   6160           OR        X,A
   \   01D1   63             MOV       A,B
   \   01D2   3903           SUBC      A,[HL+0x03]
   \   01D4   6160           OR        X,A
   \   01D6   B4             POP       DE
   \   01D7   AD40           BZ        ??LRNFactoryModeInProgress_115
   \   01D9   891C           MOVW      AX,SP
   \   01DB   D6             MOVW      HL,AX
   \   01DC   AE02           MOV       A,[HL+0x02]
   \   01DE   70             MOV       X,A
   \   01DF   AE03           MOV       A,[HL+0x03]
   \   01E1   D6             MOVW      HL,AX
   \   01E2   87             MOV       A,[HL]
   \   01E3   70             MOV       X,A
   \   01E4   AE01           MOV       A,[HL+0x01]
   \   01E6   D4             MOVW      DE,AX
   \   01E7   891C           MOVW      AX,SP
   \   01E9   D6             MOVW      HL,AX
   \   01EA   87             MOV       A,[HL]
   \   01EB   70             MOV       X,A
   \   01EC   AE01           MOV       A,[HL+0x01]
   \   01EE   D6             MOVW      HL,AX
   \   01EF   C4             MOVW      AX,DE
   \   01F0   BE91           MOV       [HL+0x91],A
   \   01F2   60             MOV       A,X
   \   01F3   BE90           MOV       [HL+0x90],A
   \   01F5   891C           MOVW      AX,SP
   \   01F7   D6             MOVW      HL,AX
   \   01F8   AE02           MOV       A,[HL+0x02]
   \   01FA   70             MOV       X,A
   \   01FB   AE03           MOV       A,[HL+0x03]
   \   01FD   D6             MOVW      HL,AX
   \   01FE   AE02           MOV       A,[HL+0x02]
   \   0200   72             MOV       C,A
   \   0201   AE03           MOV       A,[HL+0x03]
   \   0203   73             MOV       B,A
   \   0204   C2             MOVW      AX,BC
   \   0205   D4             MOVW      DE,AX
   \   0206   891C           MOVW      AX,SP
   \   0208   D6             MOVW      HL,AX
   \   0209   87             MOV       A,[HL]
   \   020A   70             MOV       X,A
   \   020B   AE01           MOV       A,[HL+0x01]
   \   020D   D6             MOVW      HL,AX
   \   020E   C4             MOVW      AX,DE
   \   020F   BE93           MOV       [HL+0x93],A
   \   0211   60             MOV       A,X
   \   0212   BE92           MOV       [HL+0x92],A
   \   0214   A104           MOV       A,#4
   \   0216   9A....         CALL      DATDbkStartUpdate
   2545                      mDATWriteTable(U32Bit, EEP_InitialResynchroValue, u8IndexL, 
   2546                          TableOfResynchroValueReassigned[u8IndexL], Default);
   \                     ??LRNFactoryModeInProgress_115:
   \   0219   891C           MOVW      AX,SP
   \   021B   D6             MOVW      HL,AX
   \   021C   AE02           MOV       A,[HL+0x02]
   \   021E   70             MOV       X,A
   \   021F   AE03           MOV       A,[HL+0x03]
   \   0221   D6             MOVW      HL,AX
   \   0222   B7             PUSH      HL
   \   0223   B4             POP       DE
   \   0224   891C           MOVW      AX,SP
   \   0226   D6             MOVW      HL,AX
   \   0227   87             MOV       A,[HL]
   \   0228   70             MOV       X,A
   \   0229   AE01           MOV       A,[HL+0x01]
   \   022B   D6             MOVW      HL,AX
   \   022C   AEA2           MOV       A,[HL+0xA2]
   \   022E   70             MOV       X,A
   \   022F   AEA3           MOV       A,[HL+0xA3]
   \   0231   D2             MOVW      BC,AX
   \   0232   100000         MOVW      AX,#0
   \   0235   B3             PUSH      BC
   \   0236   B1             PUSH      AX
   \   0237   891C           MOVW      AX,SP
   \   0239   D6             MOVW      HL,AX
   \   023A   AE04           MOV       A,[HL+0x04]
   \   023C   70             MOV       X,A
   \   023D   AE05           MOV       A,[HL+0x05]
   \   023F   D6             MOVW      HL,AX
   \   0240   AEA0           MOV       A,[HL+0xA0]
   \   0242   70             MOV       X,A
   \   0243   AEA1           MOV       A,[HL+0xA1]
   \   0245   120000         MOVW      BC,#0
   \   0248   D6             MOVW      HL,AX
   \   0249   891C           MOVW      AX,SP
   \   024B   E6             XCHW      AX,HL
   \   024C   E2             XCHW      AX,BC
   \   024D   0902           ADD       A,[HL+0x02]
   \   024F   30             XCH       A,X
   \   0250   0903           ADD       A,[HL+0x03]
   \   0252   E2             XCHW      AX,BC
   \   0253   B6             POP       HL
   \   0254   B6             POP       HL
   \   0255   B5             PUSH      DE
   \   0256   B6             POP       HL
   \   0257   B5             PUSH      DE
   \   0258   D4             MOVW      DE,AX
   \   0259   64             MOV       A,E
   \   025A   1F             SUB       A,[HL]
   \   025B   70             MOV       X,A
   \   025C   65             MOV       A,D
   \   025D   3901           SUBC      A,[HL+0x01]
   \   025F   6160           OR        X,A
   \   0261   62             MOV       A,C
   \   0262   3902           SUBC      A,[HL+0x02]
   \   0264   6160           OR        X,A
   \   0266   63             MOV       A,B
   \   0267   3903           SUBC      A,[HL+0x03]
   \   0269   6160           OR        X,A
   \   026B   B4             POP       DE
   \   026C   AD40           BZ        ??LRNFactoryModeInProgress_116
   \   026E   891C           MOVW      AX,SP
   \   0270   D6             MOVW      HL,AX
   \   0271   AE02           MOV       A,[HL+0x02]
   \   0273   70             MOV       X,A
   \   0274   AE03           MOV       A,[HL+0x03]
   \   0276   D6             MOVW      HL,AX
   \   0277   87             MOV       A,[HL]
   \   0278   70             MOV       X,A
   \   0279   AE01           MOV       A,[HL+0x01]
   \   027B   D4             MOVW      DE,AX
   \   027C   891C           MOVW      AX,SP
   \   027E   D6             MOVW      HL,AX
   \   027F   87             MOV       A,[HL]
   \   0280   70             MOV       X,A
   \   0281   AE01           MOV       A,[HL+0x01]
   \   0283   D6             MOVW      HL,AX
   \   0284   C4             MOVW      AX,DE
   \   0285   BEA1           MOV       [HL+0xA1],A
   \   0287   60             MOV       A,X
   \   0288   BEA0           MOV       [HL+0xA0],A
   \   028A   891C           MOVW      AX,SP
   \   028C   D6             MOVW      HL,AX
   \   028D   AE02           MOV       A,[HL+0x02]
   \   028F   70             MOV       X,A
   \   0290   AE03           MOV       A,[HL+0x03]
   \   0292   D6             MOVW      HL,AX
   \   0293   AE02           MOV       A,[HL+0x02]
   \   0295   72             MOV       C,A
   \   0296   AE03           MOV       A,[HL+0x03]
   \   0298   73             MOV       B,A
   \   0299   C2             MOVW      AX,BC
   \   029A   D4             MOVW      DE,AX
   \   029B   891C           MOVW      AX,SP
   \   029D   D6             MOVW      HL,AX
   \   029E   87             MOV       A,[HL]
   \   029F   70             MOV       X,A
   \   02A0   AE01           MOV       A,[HL+0x01]
   \   02A2   D6             MOVW      HL,AX
   \   02A3   C4             MOVW      AX,DE
   \   02A4   BEA3           MOV       [HL+0xA3],A
   \   02A6   60             MOV       A,X
   \   02A7   BEA2           MOV       [HL+0xA2],A
   \   02A9   A104           MOV       A,#4
   \   02AB   9A....         CALL      DATDbkStartUpdate
   2547                  }
   \                     ??LRNFactoryModeInProgress_116:
   \   02AE   891C           MOVW      AX,SP
   \   02B0   D6             MOVW      HL,AX
   \   02B1   AE0A           MOV       A,[HL+0x0A]
   \   02B3   41             INC       A
   \   02B4   BE0A           MOV       [HL+0x0A],A
   \   02B6   AE08           MOV       A,[HL+0x08]
   \   02B8   70             MOV       X,A
   \   02B9   AE09           MOV       A,[HL+0x09]
   \   02BB   CA0600         ADDW      AX,#6
   \   02BE   D6             MOVW      HL,AX
   \   02BF   891C           MOVW      AX,SP
   \   02C1   E6             XCHW      AX,HL
   \   02C2   BE09           MOV       [HL+0x09],A
   \   02C4   60             MOV       A,X
   \   02C5   BE08           MOV       [HL+0x08],A
   \   02C7   AE02           MOV       A,[HL+0x02]
   \   02C9   70             MOV       X,A
   \   02CA   AE03           MOV       A,[HL+0x03]
   \   02CC   D6             MOVW      HL,AX
   \   02CD   86             INCW      HL
   \   02CE   86             INCW      HL
   \   02CF   86             INCW      HL
   \   02D0   86             INCW      HL
   \   02D1   891C           MOVW      AX,SP
   \   02D3   E6             XCHW      AX,HL
   \   02D4   BE03           MOV       [HL+0x03],A
   \   02D6   60             MOV       A,X
   \   02D7   BE02           MOV       [HL+0x02],A
   \   02D9   AE04           MOV       A,[HL+0x04]
   \   02DB   70             MOV       X,A
   \   02DC   AE05           MOV       A,[HL+0x05]
   \   02DE   D6             MOVW      HL,AX
   \   02DF   86             INCW      HL
   \   02E0   86             INCW      HL
   \   02E1   86             INCW      HL
   \   02E2   86             INCW      HL
   \   02E3   891C           MOVW      AX,SP
   \   02E5   E6             XCHW      AX,HL
   \   02E6   BE05           MOV       [HL+0x05],A
   \   02E8   60             MOV       A,X
   \   02E9   BE04           MOV       [HL+0x04],A
   \   02EB   AE06           MOV       A,[HL+0x06]
   \   02ED   70             MOV       X,A
   \   02EE   AE07           MOV       A,[HL+0x07]
   \   02F0   D6             MOVW      HL,AX
   \   02F1   86             INCW      HL
   \   02F2   86             INCW      HL
   \   02F3   86             INCW      HL
   \   02F4   86             INCW      HL
   \   02F5   891C           MOVW      AX,SP
   \   02F7   E6             XCHW      AX,HL
   \   02F8   BE07           MOV       [HL+0x07],A
   \   02FA   60             MOV       A,X
   \   02FB   BE06           MOV       [HL+0x06],A
   \   02FD   87             MOV       A,[HL]
   \   02FE   70             MOV       X,A
   \   02FF   AE01           MOV       A,[HL+0x01]
   \   0301   D6             MOVW      HL,AX
   \   0302   86             INCW      HL
   \   0303   86             INCW      HL
   \   0304   86             INCW      HL
   \   0305   86             INCW      HL
   \   0306   C6             MOVW      AX,HL
   \   0307   B6             POP       HL
   \   0308   B1             PUSH      AX
   \   0309   891C           MOVW      AX,SP
   \   030B   D6             MOVW      HL,AX
   \   030C   AE0A           MOV       A,[HL+0x0A]
   \   030E   4D04           CMP       A,#4
   \   0310   9D03           BNC       $+5
   \   0312   9B....         BR        N:??LRNValidateLearningInAfterSaleMode_Static_0
   2548              }
   2549              if (mDATRead(U1Bit, PWR_IGN, Default) == 0)
   \                     ??LRNFactoryModeInProgress_112:
   \   0315   8C..06         BT        S:DATDinInputBuffers+6.0, ??LRNFactoryModeInProgress_117
   2550              {
   2551                  mDATWrite(U1Bit, AFSCodeIsOk,0,Default);
   \   0318   A100           MOV       A,#0
   \   031A   16....         MOVW      HL,#DATCmnImmoData+5
   \   031D   97             MOV       [HL],A
   2552              }
   2553              mDATWrite(U8Bit, COD_ERR_APP, cCodeError1h, Default);
   \                     ??LRNFactoryModeInProgress_117:
   \   031E   A101           MOV       A,#1
   \   0320   16....         MOVW      HL,#DATCmnImmoData+22
   \   0323   97             MOV       [HL],A
   2554              TOSStopTimer(&AfterSaleTimer);
   \   0324   10....         MOVW      AX,#AfterSaleTimer
   \   0327   ..             CALLT     [__T_TOSStopTimer]
   2555          
   2556              mSetLearningValidation();
   \   0328   16....         MOVW      HL,#u8AprFlag
   \   032B   71A2           SET1      [HL].2
   2557          }
   \   032D   9B....         BR        N:?Subroutine1
   \   0330                  REQUIRE ?CL78K_V4_6_L00
   2558          //*****************************************************************************
   2559          //  DESCRIPTION         : Manage the update of the learning services 
   2560          //                        authorization and the state of the EEPROM writing of 
   2561          //                        the after sale mode validation.
   2562          //
   2563          //  PARAMETERS          : None
   2564          //  (Type,Name,Min,Max) 
   2565          //
   2566          //  RETURN VALUE        : None
   2567          //
   2568          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2569          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2570          void LRNUpdateLearningAuthorizationConditions(void)
   \                     LRNUpdateLearningAuthorizationConditions:
   2571          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2572          #ifdef X90_PROJECT
   2573              LRNUpdateLearningAuthorizationConditions_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNUpdateLearningAuthorizationConditions_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNUpdateLearningAuthorizationConditions_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2574          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2575          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2576          static MEM_TYPE void LRNUpdateLearningAuthorizationConditions_Static(void)
   \                     LRNUpdateLearningAuthorizationConditions_Static:
   2577          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   2578          #endif
   2579          
   2580              BOOL bTimerStartedL;
   2581              BOOL bTimerElapsedL;
   2582              tTOSTimer   TempTimer;
   2583          
   2584              if (mDATRead(U1Bit, PWR_IGN, Default) == 0)
   \   0001   8C..24         BT        S:DATDinInputBuffers+6.0, ??LRNFactoryModeInProgress_118
   2585              {
   2586                  if (u8LearningMode == cNoLearning)
   \   0004   8E....         MOV       A,u8LearningMode
   \   0007   4D00           CMP       A,#0
   \   0009   BD71           BNZ       ??LRNFactoryModeInProgress_119
   2587                  {
   2588                      mDATWrite(U1Bit, FactoryModeAuthorized, 
   2589                              (   mDATRead(U1Bit, EEP_BCMBlank, Default)
   2590                               || mDATRead(U1Bit, EEP_CodeAFSAvailable, Default))
   2591                               && mDATRead(U1Bit, EEP_AppCleNonEffect, Default), 
   2592                          Default);
   \   000B   8E....         MOV       A,DATDbkMirrors+143
   \   000E   5D03           AND       A,#3
   \   0010   AD0A           BZ        ??LRNFactoryModeInProgress_120
   \   0012   16....         MOVW      HL,#DATDbkMirrors+143
   \   0015   31C704         BF        [HL].4, ??LRNFactoryModeInProgress_120
   \   0018   A101           MOV       A,#1
   \   001A   FA02           BR        ??LRNFactoryModeInProgress_121
   \                     ??LRNFactoryModeInProgress_120:
   \   001C   A100           MOV       A,#0
   \                     ??LRNFactoryModeInProgress_121:
   \   001E   9E....         MOV       DATCmnImmoData,A
   2593                      mDATWrite(U1Bit, AfterSaleModeAuthorized, 1, Default);      
   \   0021   A101           MOV       A,#1
   \   0023   9E....         MOV       DATCmnImmoData+1,A
   \   0026   FA54           BR        ??LRNFactoryModeInProgress_119
   2594                  }
   2595              }
   2596              else
   2597              {
   2598                  mDATWrite(U1Bit, AfterSaleModeAuthorized, 0, Default);
   \                     ??LRNFactoryModeInProgress_118:
   \   0028   A100           MOV       A,#0
   \   002A   9E....         MOV       DATCmnImmoData+1,A
   2599                  if(cFactoryMode == u8LearningMode)
   \   002D   8E....         MOV       A,u8LearningMode
   \   0030   51             DEC       A
   \   0031   BD49           BNZ       ??LRNFactoryModeInProgress_119
   2600                  {
   2601                      bTimerStartedL = TOSIsTimerStarted(&PlantModeTimer);
   \   0033   10....         MOVW      AX,#PlantModeTimer
   \   0036   9A....         CALL      TOSIsTimerStarted
   \   0039   74             MOV       E,A
   2602                      //QACJ 3226: amanevd: This is intentional and is checked out for problems.
   2603                      TempTimer      = mPlantModeTimeOut();
   \   003A   8E....         MOV       A,u8tmp_app_cle
   \   003D   48....         CMP       A,DATDbkMirrors+63
   \   0040   BD05           BNZ       ??LRNFactoryModeInProgress_122
   \   0042   02....         MOVW      AX,CalculatedTmp_app_cle
   \   0045   FA1D           BR        ??LRNFactoryModeInProgress_123
   \                     ??LRNFactoryModeInProgress_122:
   \   0047   8E....         MOV       A,DATDbkMirrors+63
   \   004A   9E....         MOV       u8tmp_app_cle,A
   \   004D   100000         MOVW      AX,#0
   \   0050   B1             PUSH      AX
   \   0051   A00A           MOV       X,#10
   \   0053   B1             PUSH      AX
   \   0054   70             MOV       X,A
   \   0055   B1             PUSH      AX
   \   0056   10E803         MOVW      AX,#1000
   \   0059   B1             PUSH      AX
   \   005A   8E....         MOV       A,u8tmp_app_cle
   \   005D   120000         MOVW      BC,#0
   \   0060   70             MOV       X,A
   \   0061   63             MOV       A,B
   \   0062   ..             CALLT     [__T_?L_MUL_L03]
   \   0063   ..             CALLT     [__T_?UL_DIV_L03]
   \                     ??LRNFactoryModeInProgress_123:
   \   0064   03....         MOVW      CalculatedTmp_app_cle,AX
   2604                      bTimerElapsedL = TOSIsTimerElapsed(&PlantModeTimer, TempTimer);
   \   0067   D2             MOVW      BC,AX
   \   0068   10....         MOVW      AX,#PlantModeTimer
   \   006B   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   006C   70             MOV       X,A
   2605                      if((cFalse != bTimerStartedL) && (cFalse != bTimerElapsedL))
   \   006D   64             MOV       A,E
   \   006E   4D00           CMP       A,#0
   \   0070   AD0A           BZ        ??LRNFactoryModeInProgress_119
   \   0072   60             MOV       A,X
   \   0073   4D00           CMP       A,#0
   \   0075   AD05           BZ        ??LRNFactoryModeInProgress_119
   2606                      {
   2607                          mDATWrite(U1Bit, DATTrpKeyLearningElapsed, 1, Default);
   \   0077   16....         MOVW      HL,#DatTrpExportData+51
   \   007A   71C2           SET1      [HL].4
   2608                      }
   2609                  }
   2610                  else
   2611                  {
   2612                      //Nothing to do
   2613                  }
   2614              }
   2615          
   2616              if (   mLearningValidationIsOn()
   2617                  && (mDATRead(U1Bit, IsEepGroupStaticImmoBankProcessing, Default) == 0)
   2618                  && (mDATRead(U1Bit, IsEepGroupDynamicImmoDataBankProcessing, Default) == 0) )
   \                     ??LRNFactoryModeInProgress_119:
   \   007C   16....         MOVW      HL,#u8AprFlag
   \   007F   31A603         BT        [HL].2, $+6
   \   0082   9B....         BR        N:??LRNFactoryModeInProgress_124
   \   0085   A103           MOV       A,#3
   \   0087   9A....         CALL      DATDbkIsBankProcessing
   \   008A   4D00           CMP       A,#0
   \   008C   AD03           BZ        $+5
   \   008E   9B....         BR        N:??LRNFactoryModeInProgress_124
   \   0091   A104           MOV       A,#4
   \   0093   9A....         CALL      DATDbkIsBankProcessing
   \   0096   4D00           CMP       A,#0
   \   0098   AD03           BZ        $+5
   \   009A   9B....         BR        N:??LRNFactoryModeInProgress_124
   2619              {
   2620                  if (   (mDATRead(U1Bit, IsEepGroupStaticImmoBankWriteOk, Default) == 0)
   2621                  || (mDATRead(U1Bit, IsEepGroupDynamicImmoDataBankWriteOk, Default) == 0) )
   \   009D   A103           MOV       A,#3
   \   009F   9A....         CALL      DATDbkIsWriteOk
   \   00A2   4D00           CMP       A,#0
   \   00A4   AD09           BZ        ??LRNFactoryModeInProgress_125
   \   00A6   A104           MOV       A,#4
   \   00A8   9A....         CALL      DATDbkIsWriteOk
   \   00AB   4D00           CMP       A,#0
   \   00AD   BD5D           BNZ       ??LRNFactoryModeInProgress_126
   2622                  {
   2623                      mDATWrite(U1Bit, WritingErrorInEepInReassignment, 1, Default);
   \                     ??LRNFactoryModeInProgress_125:
   \   00AF   A101           MOV       A,#1
   \   00B1   16....         MOVW      HL,#DATCmnImmoData+10
   \   00B4   97             MOV       [HL],A
   2624          
   2625                      mDATWrite(U1Bit, EEP_BCMBlank, 1, Default);
   \   00B5   16....         MOVW      HL,#DATDbkMirrors+143
   \   00B8   318607         BT        [HL].0, ??LRNFactoryModeInProgress_127
   \   00BB   A103           MOV       A,#3
   \   00BD   7182           SET1      [HL].0
   \   00BF   9A....         CALL      DATDbkStartUpdate
   2626                      mDATWrite(U8Bit, EEP_NbKeysLearnt, 0, Default);
   \                     ??LRNFactoryModeInProgress_127:
   \   00C2   8E....         MOV       A,DATDbkMirrors+141
   \   00C5   4D00           CMP       A,#0
   \   00C7   AD0B           BZ        ??LRNFactoryModeInProgress_128
   \   00C9   A100           MOV       A,#0
   \   00CB   16....         MOVW      HL,#DATDbkMirrors+141
   \   00CE   97             MOV       [HL],A
   \   00CF   A103           MOV       A,#3
   \   00D1   9A....         CALL      DATDbkStartUpdate
   2627                      mDATWrite(U8Bit, EEP_NbKeysStd315MhzLearnt, 0, Default);
   \                     ??LRNFactoryModeInProgress_128:
   \   00D4   8E....         MOV       A,DATDbkMirrors+139
   \   00D7   4D00           CMP       A,#0
   \   00D9   AD0B           BZ        ??LRNFactoryModeInProgress_129
   \   00DB   A100           MOV       A,#0
   \   00DD   16....         MOVW      HL,#DATDbkMirrors+139
   \   00E0   97             MOV       [HL],A
   \   00E1   A103           MOV       A,#3
   \   00E3   9A....         CALL      DATDbkStartUpdate
   2628                      mDATWrite(U8Bit, EEP_NbKeysStd315MhzLowPowerLearnt, 0, Default);
   \                     ??LRNFactoryModeInProgress_129:
   \   00E6   8E....         MOV       A,DATDbkMirrors+140
   \   00E9   4D00           CMP       A,#0
   \   00EB   AD0B           BZ        ??LRNFactoryModeInProgress_130
   \   00ED   A100           MOV       A,#0
   \   00EF   16....         MOVW      HL,#DATDbkMirrors+140
   \   00F2   97             MOV       [HL],A
   \   00F3   A103           MOV       A,#3
   \   00F5   9A....         CALL      DATDbkStartUpdate
   2629                      mDATWrite(U8Bit, EEP_NbKeysStd433MhzLearnt, 0, Default);
   \                     ??LRNFactoryModeInProgress_130:
   \   00F8   8E....         MOV       A,DATDbkMirrors+138
   \   00FB   4D00           CMP       A,#0
   \   00FD   AD66           BZ        ??LRNFactoryModeInProgress_131
   \   00FF   A100           MOV       A,#0
   \   0101   16....         MOVW      HL,#DATDbkMirrors+138
   \   0104   97             MOV       [HL],A
   \   0105   A103           MOV       A,#3
   \   0107   9A....         CALL      DATDbkStartUpdate
   \   010A   FA59           BR        ??LRNFactoryModeInProgress_131
   2630                  }
   2631                  else
   2632                  {
   2633                      mDATWrite(U8Bit, EEP_NbKeysLearnt, mDATRead(U8Bit, NumberOfKeysLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_126:
   \   010C   8E....         MOV       A,DATDbkMirrors+141
   \   010F   48....         CMP       A,DATCmnImmoData+13
   \   0112   AD0B           BZ        ??LRNFactoryModeInProgress_132
   \   0114   8E....         MOV       A,DATCmnImmoData+13
   \   0117   9E....         MOV       DATDbkMirrors+141,A
   \   011A   A103           MOV       A,#3
   \   011C   9A....         CALL      DATDbkStartUpdate
   2634                      mDATWrite(U8Bit, EEP_NbKeysStd315MhzLearnt, mDATRead(U8Bit, NumberOfKeys315MHzLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_132:
   \   011F   8E....         MOV       A,DATDbkMirrors+139
   \   0122   48....         CMP       A,DATCmnImmoData+14
   \   0125   AD0B           BZ        ??LRNFactoryModeInProgress_133
   \   0127   8E....         MOV       A,DATCmnImmoData+14
   \   012A   9E....         MOV       DATDbkMirrors+139,A
   \   012D   A103           MOV       A,#3
   \   012F   9A....         CALL      DATDbkStartUpdate
   2635                      mDATWrite(U8Bit, EEP_NbKeysStd315MhzLowPowerLearnt, mDATRead(U8Bit, NumberOfKeys315MHzSmallLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_133:
   \   0132   8E....         MOV       A,DATDbkMirrors+140
   \   0135   48....         CMP       A,DATCmnImmoData+15
   \   0138   AD0B           BZ        ??LRNFactoryModeInProgress_134
   \   013A   8E....         MOV       A,DATCmnImmoData+15
   \   013D   9E....         MOV       DATDbkMirrors+140,A
   \   0140   A103           MOV       A,#3
   \   0142   9A....         CALL      DATDbkStartUpdate
   2636                      mDATWrite(U8Bit, EEP_NbKeysStd433MhzLearnt, mDATRead(U8Bit, NumberOfKeys433MHzLearnt, Default), Default);
   \                     ??LRNFactoryModeInProgress_134:
   \   0145   8E....         MOV       A,DATDbkMirrors+138
   \   0148   48....         CMP       A,DATCmnImmoData+16
   \   014B   AD0B           BZ        ??LRNFactoryModeInProgress_135
   \   014D   8E....         MOV       A,DATCmnImmoData+16
   \   0150   9E....         MOV       DATDbkMirrors+138,A
   \   0153   A103           MOV       A,#3
   \   0155   9A....         CALL      DATDbkStartUpdate
   2637          
   2638                      mDATWrite(U1Bit, EEP_AppCleNonEffect, 0, Default);
   \                     ??LRNFactoryModeInProgress_135:
   \   0158   16....         MOVW      HL,#DATDbkMirrors+143
   \   015B   31C707         BF        [HL].4, ??LRNFactoryModeInProgress_131
   \   015E   A103           MOV       A,#3
   \   0160   71C3           CLR1      [HL].4
   \   0162   9A....         CALL      DATDbkStartUpdate
   2639                  }
   2640                  mClearLearningValidation();
   \                     ??LRNFactoryModeInProgress_131:
   \   0165   A100           MOV       A,#0
   \   0167   16....         MOVW      HL,#u8AprFlag
   \   016A   71A3           CLR1      [HL].2
   2641                  mDATWrite(U1Bit, AfterSaleModeValidationAuthorized, 0, Default);
   \   016C   16....         MOVW      HL,#DATCmnImmoData+9
   \   016F   97             MOV       [HL],A
   2642          
   2643                  u8LearningMode = cNoLearning;
   \   0170   9E....         MOV       u8LearningMode,A
   2644                  mDATWrite(U8Bit, LearningModeInProgress, cDATNoLearningMode, Default);
   \   0173   16....         MOVW      HL,#DATCmnImmoData+17
   \   0176   97             MOV       [HL],A
   2645              }
   2646          }
   \                     ??LRNFactoryModeInProgress_124:
   \   0177   B2             POP       BC
   \   0178   AF             RET       
   \   0179                  REQUIRE ?CL78K_V4_6_L00
   2647          
   2648          //*****************************************************************************
   2649          //  DESCRIPTION         : Backup authentication with transport ISK High when
   2650          //                        the ISK High writing has failed.
   2651          //
   2652          //  PARAMETERS          : None
   2653          //  (Type,Name,Min,Max) 
   2654          //
   2655          //  RETURN VALUE        : None
   2656          //
   2657          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2658          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2659          void LRNAuthenticationWithCalculatedISKHigh(void)
   \                     LRNAuthenticationWithCalculatedISKHigh:
   2660          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2661          #ifdef X90_PROJECT
   2662              LRNAuthenticationWithCalculatedISKHigh_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNAuthenticationWithCalculatedISKHigh_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNAuthenticationWithCalculatedISKHigh_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2663          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2664          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2665          static MEM_TYPE void LRNAuthenticationWithCalculatedISKHigh_Static(void)
   \                     LRNAuthenticationWithCalculatedISKHigh_Static:
   2666          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   2667          #endif
   2668          
   2669              U8 u8IndexL;
   2670          
   2671              if (mDATRead(U1Bit, EEP_BCMBlank, Default) == 0)
   \   0001   16....         MOVW      HL,#DATDbkMirrors+143
   \   0004   318624         BT        [HL].0, ??LRNFactoryModeInProgress_136
   2672              {
   2673                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \   0007   12....         MOVW      BC,#DatTrpExportData
   \   000A   16....         MOVW      HL,#DATDbkMirrors
   \   000D   A006           MOV       X,#6
   2674                  {
   2675                      mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, mDATReadTable(U8Bit, EEP_ImmoSecretKey, u8IndexL, Default), Default);
   \                     ??LRNAuthenticationWithCalculatedISKHigh_Static_0:
   \   000F   B7             PUSH      HL
   \   0010   B4             POP       DE
   \   0011   E4             XCHW      AX,DE
   \   0012   CA6A00         ADDW      AX,#106
   \   0015   E4             XCHW      AX,DE
   \   0016   85             MOV       A,[DE]
   \   0017   B3             PUSH      BC
   \   0018   B4             POP       DE
   \   0019   E4             XCHW      AX,DE
   \   001A   CA2000         ADDW      AX,#32
   \   001D   E4             XCHW      AX,DE
   \   001E   95             MOV       [DE],A
   2676                  }    
   \   001F   86             INCW      HL
   \   0020   B3             PUSH      BC
   \   0021   B4             POP       DE
   \   0022   84             INCW      DE
   \   0023   B5             PUSH      DE
   \   0024   B2             POP       BC
   \   0025   50             DEC       X
   \   0026   60             MOV       A,X
   \   0027   AD1E           BZ        ??LRNFactoryModeInProgress_137
   \   0029   FAE4           BR        ??LRNAuthenticationWithCalculatedISKHigh_Static_0
   2677              }
   2678              else
   2679              {
   2680                  for (u8IndexL = 0; u8IndexL < cDATTrpISKLengthInBytes; u8IndexL++)
   \                     ??LRNFactoryModeInProgress_136:
   \   002B   14....         MOVW      DE,#DatTrpExportData
   \   002E   12....         MOVW      BC,#ImmobilizerSecretKey
   \   0031   A006           MOV       X,#6
   2681                  {
   2682                      mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, ImmobilizerSecretKey[u8IndexL], Default);
   \                     ??LRNAuthenticationWithCalculatedISKHigh_Static_1:
   \   0033   B3             PUSH      BC
   \   0034   B6             POP       HL
   \   0035   87             MOV       A,[HL]
   \   0036   B5             PUSH      DE
   \   0037   B6             POP       HL
   \   0038   E6             XCHW      AX,HL
   \   0039   CA2000         ADDW      AX,#32
   \   003C   E6             XCHW      AX,HL
   \   003D   97             MOV       [HL],A
   2683                  }
   \   003E   B3             PUSH      BC
   \   003F   B6             POP       HL
   \   0040   86             INCW      HL
   \   0041   B7             PUSH      HL
   \   0042   B2             POP       BC
   \   0043   84             INCW      DE
   \   0044   50             DEC       X
   \   0045   BDEC           BNZ       ??LRNAuthenticationWithCalculatedISKHigh_Static_1
   2684              }
   2685              mDATWrite(U1Bit, DATTrpAuthentInLearningMode, 1, Default);
   \                     ??LRNFactoryModeInProgress_137:
   \   0047   A103           MOV       A,#3
   \   0049   16....         MOVW      HL,#DatTrpExportData+50
   \   004C   7182           SET1      [HL].0
   2686              mDATControl(Trp, cDATTrpAuthenticate);
   \   004E   ..             CALLT     [__T_DATTrpControl]
   2687          }
   \   004F   B2             POP       BC
   \   0050   AF             RET       
   \   0051                  REQUIRE ?CL78K_V4_6_L00
   2688          //*****************************************************************************
   2689          //  DESCRIPTION         : Test if a key could be learnt in key reassignment
   2690          //
   2691          //  PARAMETERS          : None
   2692          //  (Type,Name,Min,Max) 
   2693          //
   2694          //  RETURN VALUE        : cFalse or cTrue
   2695          //
   2696          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2697          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2698          BOOL LRNReassignmentCannotBeDone(void)
   \                     LRNReassignmentCannotBeDone:
   2699          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2700              return (mDATRead(U8Bit, NumberOfKeysLearnt, Default) >= cDATTrpMaxNumberOfKey);
   \   0000   8E....         MOV       A,DATCmnImmoData+13
   \   0003   4D04           CMP       A,#4
   \   0005   8D03           BC        ??LRNFactoryModeInProgress_164
   \   0007   A101           MOV       A,#1
   \   0009   AF             RET       
   \                     ??LRNFactoryModeInProgress_164:
   \   000A   A100           MOV       A,#0
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
   2701          }
   2702          //*****************************************************************************
   2703          //  DESCRIPTION         : Control use to give up the learning in after sale
   2704          //
   2705          //  PARAMETERS          : None
   2706          //  (Type,Name,Min,Max) 
   2707          //
   2708          //  RETURN VALUE        : None
   2709          //
   2710          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2711          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2712          void LRNGiveUpLearningInAfterSaleMode(void)
   \                     LRNGiveUpLearningInAfterSaleMode:
   2713          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2714              if (mDATRead(U1Bit, PWR_IGN, Default) == 0)
   \   0000   8C..06         BT        S:DATDinInputBuffers+6.0, ??LRNFactoryModeInProgress_165
   2715              {
   2716                  mDATWrite(U1Bit, AFSCodeIsOk,0,Default);
   \   0003   A100           MOV       A,#0
   \   0005   16....         MOVW      HL,#DATCmnImmoData+5
   \   0008   97             MOV       [HL],A
   2717              }
   2718              mSetGiveUpAfterSaleModeRequested();
   \                     ??LRNFactoryModeInProgress_165:
   \   0009   16....         MOVW      HL,#u8AprFlag
   \   000C   7192           SET1      [HL].1
   2719          }
   \   000E   AF             RET       
   \   000F                  REQUIRE ?CL78K_V4_6_L00
   2720          
   2721          //*****************************************************************************
   2722          //  DESCRIPTION         : ISK Writing Error
   2723          //
   2724          //  PARAMETERS          : None
   2725          //  (Type,Name,Min,Max) 
   2726          //
   2727          //  RETURN VALUE        : None
   2728          //
   2729          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2730          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2731          void LRNISKWritingError(void)
   \                     LRNISKWritingError:
   2732          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2733              if (u8LearningMode == cFactoryMode)
   \   0000   8E....         MOV       A,u8LearningMode
   \   0003   51             DEC       A
   \   0004   BD04           BNZ       ??LRNFactoryModeInProgress_166
   2734              {
   2735                  mDATWrite(U8Bit, COD_ERR_APP, cCodeError12h, Default);
   \   0006   A112           MOV       A,#18
   \   0008   FA02           BR        ??LRNFactoryModeInProgress_167
   2736              }
   2737              else // if(u8LearningMode == cKeyReassignment)
   2738              {
   2739                  mDATWrite(U8Bit, COD_ERR_APP, cCodeErrorB3h, Default);
   \                     ??LRNFactoryModeInProgress_166:
   \   000A   A1B3           MOV       A,#179
   2740              }
   \                     ??LRNFactoryModeInProgress_167:
   \   000C   9B....         BR        N:?Subroutine3
   \   000F                  REQUIRE ?CL78K_V4_6_L00
   2741          }
   2742          
   2743          //*****************************************************************************
   2744          //  DESCRIPTION         : Backup authentication with transport ISK when
   2745          //                        the ISK Low writing has failed.
   2746          //
   2747          //  PARAMETERS          : None
   2748          //  (Type,Name,Min,Max) 
   2749          //
   2750          //  RETURN VALUE        : None
   2751          //
   2752          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2753          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2754          void LRNAuthenticationWithCalculatedISKLow(void)
   \                     LRNAuthenticationWithCalculatedISKLow:
   2755          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2756          #ifdef X90_PROJECT
   2757              LRNAuthenticationWithCalculatedISKLow_Static();
   \   0001   16....         MOVW      HL,#LWRD(LRNAuthenticationWithCalculatedISKLow_Static)
   \   0004   A4..           MOV       E,#BYTE3(LRNAuthenticationWithCalculatedISKLow_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2758          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2759          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2760          static MEM_TYPE void LRNAuthenticationWithCalculatedISKLow_Static(void)
   \                     LRNAuthenticationWithCalculatedISKLow_Static:
   2761          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   2762          #endif
   2763          
   2764              U8 u8IndexL;
   2765          
   2766              if (mDATRead(U1Bit, EEP_BCMBlank, Default) == 0)
   \   0001   16....         MOVW      HL,#DATDbkMirrors+143
   \   0004   318624         BT        [HL].0, ??LRNFactoryModeInProgress_138
   2767              {
   2768                  for (u8IndexL = 0; u8IndexL < (cDATTrpISKLengthInBytes - cSKIndex2); u8IndexL++)
   \   0007   12....         MOVW      BC,#DatTrpExportData
   \   000A   16....         MOVW      HL,#DATDbkMirrors
   \   000D   A004           MOV       X,#4
   2769                  {
   2770                      mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, mDATReadTable(U8Bit, EEP_ImmoSecretKey, u8IndexL, Default), Default);
   \                     ??LRNAuthenticationWithCalculatedISKLow_Static_0:
   \   000F   B7             PUSH      HL
   \   0010   B4             POP       DE
   \   0011   E4             XCHW      AX,DE
   \   0012   CA6A00         ADDW      AX,#106
   \   0015   E4             XCHW      AX,DE
   \   0016   85             MOV       A,[DE]
   \   0017   B3             PUSH      BC
   \   0018   B4             POP       DE
   \   0019   E4             XCHW      AX,DE
   \   001A   CA2000         ADDW      AX,#32
   \   001D   E4             XCHW      AX,DE
   \   001E   95             MOV       [DE],A
   2771                  }
   \   001F   86             INCW      HL
   \   0020   B3             PUSH      BC
   \   0021   B4             POP       DE
   \   0022   84             INCW      DE
   \   0023   B5             PUSH      DE
   \   0024   B2             POP       BC
   \   0025   50             DEC       X
   \   0026   60             MOV       A,X
   \   0027   AD1E           BZ        ??LRNFactoryModeInProgress_139
   \   0029   FAE4           BR        ??LRNAuthenticationWithCalculatedISKLow_Static_0
   2772              }
   2773              else
   2774              {
   2775                  for (u8IndexL = 0; u8IndexL < (cDATTrpISKLengthInBytes - cSKIndex2); u8IndexL++)
   \                     ??LRNFactoryModeInProgress_138:
   \   002B   14....         MOVW      DE,#DatTrpExportData
   \   002E   12....         MOVW      BC,#ImmobilizerSecretKey
   \   0031   A004           MOV       X,#4
   2776                  {
   2777                      mDATWriteTable(U8Bit, DATTrpISKForAuthent, u8IndexL, ImmobilizerSecretKey[u8IndexL], Default);
   \                     ??LRNAuthenticationWithCalculatedISKLow_Static_1:
   \   0033   B3             PUSH      BC
   \   0034   B6             POP       HL
   \   0035   87             MOV       A,[HL]
   \   0036   B5             PUSH      DE
   \   0037   B6             POP       HL
   \   0038   E6             XCHW      AX,HL
   \   0039   CA2000         ADDW      AX,#32
   \   003C   E6             XCHW      AX,HL
   \   003D   97             MOV       [HL],A
   2778                  }
   \   003E   B3             PUSH      BC
   \   003F   B6             POP       HL
   \   0040   86             INCW      HL
   \   0041   B7             PUSH      HL
   \   0042   B2             POP       BC
   \   0043   84             INCW      DE
   \   0044   50             DEC       X
   \   0045   BDEC           BNZ       ??LRNAuthenticationWithCalculatedISKLow_Static_1
   2779              }
   2780              mDATWriteTable(U8Bit, DATTrpISKForAuthent, cSKIndex4, mDATReadTable(U8Bit, DATTrpTransportISK, cSKIndex4, Default), Default);
   \                     ??LRNFactoryModeInProgress_139:
   \   0047   8E....         MOV       A,DATTrpTransportISK+4
   \   004A   9E....         MOV       DatTrpExportData+36,A
   2781              mDATWriteTable(U8Bit, DATTrpISKForAuthent, cSKIndex5, mDATReadTable(U8Bit, DATTrpTransportISK, cSKIndex5, Default), Default);
   \   004D   8E....         MOV       A,DATTrpTransportISK+5
   \   0050   9E....         MOV       DatTrpExportData+37,A
   2782          
   2783              mDATWrite(U1Bit, DATTrpAuthentInLearningMode, 1, Default);
   \   0053   A103           MOV       A,#3
   \   0055   16....         MOVW      HL,#DatTrpExportData+50
   \   0058   7182           SET1      [HL].0
   2784              mDATControl(Trp, cDATTrpAuthenticate);
   \   005A   ..             CALLT     [__T_DATTrpControl]
   2785          }
   \   005B   B2             POP       BC
   \   005C   AF             RET       
   \   005D                  REQUIRE ?CL78K_V4_6_L00
   2786          //*****************************************************************************
   2787          //  DESCRIPTION         : Test if the factory mode is in progress
   2788          //
   2789          //  PARAMETERS          : None
   2790          //  (Type,Name,Min,Max) 
   2791          //
   2792          //  RETURN VALUE        : cFalse or cTrue
   2793          //
   2794          //  DESIGN INFORMATION  : Refer to Detailed Design Document
   2795          //*****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
   2796          BOOL LRNFactoryModeInProgress(void)
   \                     LRNFactoryModeInProgress:
   2797          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2798              return (u8LearningMode == cDATFactoryMode);
   \   0000   8E....         MOV       A,u8LearningMode
   \   0003   51             DEC       A
   \   0004   BD03           BNZ       ??LRNFactoryModeInProgress_168
   \   0006   A101           MOV       A,#1
   \   0008   AF             RET       
   \                     ??LRNFactoryModeInProgress_168:
   \   0009   A100           MOV       A,#0
   \   000B   AF             RET       
   \   000C                  REQUIRE ?CL78K_V4_6_L00
   2799          }

   \                                 In  segment CLTVEC, align 2
   \                     __T_?L_MUL_L03:
   \   0000   ....           DW       ?L_MUL_L03

   \                                 In  segment CLTVEC, align 2
   \                     __T_?UL_DIV_L03:
   \   0000   ....           DW       ?UL_DIV_L03

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSIsTimerElapsed:
   \   0000   ....           DW       TOSIsTimerElapsed

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSSeqActivateGraph:
   \   0000   ....           DW       TOSSeqActivateGraph

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSSeqDeactivateGraph:
   \   0000   ....           DW       TOSSeqDeactivateGraph

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_CALL_L07:
   \   0000   ....           DW       ?FAR_CALL_L07

   \                                 In  segment CLTVEC, align 2
   \                     __T_DATTrpControl:
   \   0000   ....           DW       DATTrpControl

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_FAST_CALL_L07:
   \   0000   ....           DW       ?FAR_FAST_CALL_L07

   \                                 In  segment CLTVEC, align 2
   \                     __T_?I_MUL_L02:
   \   0000   ....           DW       ?I_MUL_L02

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSStartTimer:
   \   0000   ....           DW       TOSStartTimer

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSStopTimer:
   \   0000   ....           DW       TOSStopTimer

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSSendControl:
   \   0000   ....           DW       TOSSendControl

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FUNC_ENTER_L06:
   \   0000   ....           DW       ?FUNC_ENTER_L06

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FUNC_DEALL_L06:
   \   0000   ....           DW       ?FUNC_DEALL_L06
   2800          

   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     LRNManageLearningService        624
     LRNUpdateLearningAuthorization    6
     AfterSaleTimer                    2
     PlantModeTimer                    2
     CalculatedTmp_app_cle             2
     CalculatedTimeout_app_cle         2
     u32TrpIdentifierReceived          4
     u32TrpConfigAndPassWordTag        4
     ImmobilizerSecretKey              6
     RemoteSecretKey                   6
     AfterSaleCode                     6
     u16SKey                           2
     TableOfKeyIdentifierReassigned   16
     TableOfPassWordTagReassigned     16
     TableOfRemoteSecretKeyReassigned
                                      24
     TableOfResynchroValueReassigned
                                      16
     u8LearningMode                    1
     u8AprFlag                         1
     u8tmp_app_cle                     1
     u8timeout_app_cle                 1
     bKeyAlreadyLearned                1
     MemorizeKeyFrequencyCounter      40
     WriteRSKInEeprom                240
     CheckExitConditions             110
     LRNInitialize                    17
     LRNEnterActiveState               7
     LRNLeaveActiveState               7
     LRNStartLearningInFactoryMode     9
     LRNStartLearningInFactoryMode_Static
                                      31
     LRNExitFromLearningInFactoryMode
                                       6
     LRNAuthenticationWithTransportISK
                                       9
     LRNAuthenticationWithTransportISK_Static
                                      39
     LRNKeyNotBlank                   15
     ?Subroutine3                      5
     LRNKeyAlreadyLaerned             10
     LRNAuthenticationNOK             13
     LRNAfterSaleTimeoutElapsed       70
     LRNAuthenticationOK              13
     LRNKeyAlreadyLearned              9
     LRNKeyAlreadyLearned_Static     133
     LRNMemoTransponderType            9
     LRNMemoTransponderType_Static    25
     LRNKeyIsLocked                    9
     LRNKeyOKforLearning              35
     LRNSelectRemoteConfigBlockForRFKey
                                       9
     LRNSelectRemoteConfigBlockForRFKey_Static
                                      49
     LRNWritingISKFinishedOK          17
     LRNWritingRSKFinishedOK          18
     LRNWritingFinishedNOK            13
     LRNWritingFinishedOK             13
     LRNCalculateTranspCodes           9
     LRNCalculateTranspCodes_Static  238
     ?Subroutine0                      5
     LRNKeyTypeWithRF                  9
     LRNWriteRSKHighIntoTransponder    9
     LRNWriteRSKHighIntoTransponder_Static
                                      45
     LRNWriteRSKLowIntoTransponder     9
     LRNWriteRSKLowIntoTransponder_Static
                                      74
     LRNWriteISKHighIntoTransponder    9
     LRNWriteISKHighIntoTransponder_Static
                                     191
     LRNWriteRSKErrorAction            9
     LRNWriteRSKErrorAction_Static    30
     LRNWriteISKLowIntoTransponder     9
     LRNWriteISKLowIntoTransponder_Static
                                     160
     LRNPutImmobilizerAntennaInSleepMode
                                       4
     LRNSleepModeNOK                  13
     LRNSleepModeOK                   13
     LRNAuthenticationWithCalculateISK
                                       9
     LRNAuthenticationWithCalculateISK_Static
                                      81
     LRNFactoryModeAuthentNewISKNOK    9
     LRNFactoryModeAuthentNewISKNOK_Static
                                      22
     LRNResynchroFinishedNOK          13
     LRNResynchroFinishedOK           18
     LRNResynchronizeTransponder       9
     LRNBcmReplacementResyncNOK        5
     LRNResynchroErrorAction           9
     LRNResynchroErrorAction_Static   30
     LRNLockingTrpIsAuthorized        11
     LRNLockingTransponder             9
     LRNLockingTransponder_Static     49
     LRNLockingTransponderError       12
     LRNKeyLockedForEver               6
     LRNWriteInEepromTransponderCodes
                                       9
     LRNWriteInEepromTransponderCodes_Static
                                     808
     ?Subroutine1                      5
     LRNEepromWritingError             5
     LRNWritingInEepromFinishedNOK     9
     LRNWritingInEepromFinishedNOK_Static
                                      64
     LRNWritingInEepromFinishedOK     42
     LRNSleepModeFinished             12
     LRNCalculateISKandAuthenticate    9
     LRNCalculateISKandAuthenticate_Static
                                      92
     LRNBCMReplacementAuthentError     5
     LRNCalculateCodesInAfterSaleMode
                                       9
     LRNCalculateCodesInAfterSaleMode_Static
                                     106
     LRNAuthentWithCorrectISK          4
     LRNWriteInEepromFirstTransponderCodes
                                       9
     LRNWriteInEepromFirstTransponderCodes_Static
                                     611
     LRNAuthenticationWithCarISK       9
     LRNAuthenticationWithCarISK_Static
                                      45
     LRNKeyNotAlreadyRelearnt          9
     LRNKeyNotAlreadyRelearnt_Static
                                      97
     LRNKeyKnownByBCM                 13
     LRNMemorizeTranspAlreadyKnown     9
     LRNMemorizeTranspAlreadyKnown_Static
                                     407
     LRNMemoriseNewTransp              9
     LRNMemoriseNewTransp_Static     157
     LRNEnterAfterSaleBCMReplacementMode
                                       9
     LRNEnterAfterSaleBCMReplacementMode_Static
                                      28
     LRNEnterAfterSaleKeyReassigmentMode
                                       9
     LRNEnterAfterSaleKeyReassigmentMode_Static
                                      19
     LRNEnterFactoryMode               9
     LRNEnterFactoryMode_Static       73
     LRNIgnitionOFF                   42
     LRNIgnitionON                     9
     LRNIgnitionON_Static            127
     LRNLearningModeNotSuccess         9
     LRNLearningModeNotSuccess_Static
                                      61
     ?Subroutine2                      5
     LRNLearningModeSuccess            9
     LRNLearningModeSuccess_Static   389
     LRNUpdateDiagData                 9
     LRNUpdateDiagData_Static         22
     LRNStartLearningInAfterSaleMode
                                       9
     LRNStartLearningInAfterSaleMode_Static
                                     281
     LRNValidateLearningInAfterSaleMode
                                       9
     LRNValidateLearningInAfterSaleMode_Static
                                     816
     LRNUpdateLearningAuthorizationConditions
                                       9
     LRNUpdateLearningAuthorizationConditions_Static
                                     377
     LRNAuthenticationWithCalculatedISKHigh
                                       9
     LRNAuthenticationWithCalculatedISKHigh_Static
                                      81
     LRNReassignmentCannotBeDone      13
     LRNGiveUpLearningInAfterSaleMode
                                      15
     LRNISKWritingError               15
     LRNAuthenticationWithCalculatedISKLow
                                       9
     LRNAuthenticationWithCalculatedISKLow_Static
                                      93
     LRNFactoryModeInProgress         12
     __T_?L_MUL_L03                    2
     __T_?UL_DIV_L03                   2
     __T_TOSIsTimerElapsed             2
     __T_TOSSeqActivateGraph           2
     __T_TOSSeqDeactivateGraph         2
     __T_?FAR_CALL_L07                 2
     __T_DATTrpControl                 2
     __T_?FAR_FAST_CALL_L07            2
     __T_?I_MUL_L02                    2
     __T_TOSStartTimer                 2
     __T_TOSStopTimer                  2
     __T_TOSSendControl                2
     __T_?FUNC_ENTER_L06               2
     __T_?FUNC_DEALL_L06               2

 
 6 356 bytes in segment BCODE
    28 bytes in segment CLTVEC
   883 bytes in segment CODE
   630 bytes in segment CONST
   113 bytes in segment NEAR_Z
 
 7 239 bytes of CODE  memory (+ 28 bytes shared)
   630 bytes of CONST memory
   113 bytes of DATA  memory

Errors: none
Warnings: none
