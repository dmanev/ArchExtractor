###############################################################################
#                                                                             #
# IAR C/C++ Compiler V4.61A/W32 for 78K0 and 78K0S      15/Feb/2011  13:26:23 #
# Copyright 1992-2008 IAR Systems AB.                                         #
#                                                                             #
#    Core         =  78k0                                                     #
#    Code model   =  Standard                                                 #
#                 =                                                           #
#    Source file  =  D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\DAT\D #
#                    AT_ANA.C                                                 #
#    Command line =  --code_model standard --core 78k0 -e                     #
#                    -DMEM_TYPE=__banked -DMEM_FAST=__saddr                   #
#                    -DCALLT_TYPE=__callt -DX90_PROJECT                       #
#                    --generate_callt_runtime_library_calls -Ohs              #
#                    "-IC:\Program Files\IAR Systems\Embedded Workbench       #
#                    5.0\78k\inc" "-IC:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.0\78k\inc\clib" -I. -I..\EXE\GEN\            #
#                    -I..\SOURCES\DAT -I..\SOURCES\LAP -I..\SOURCES\LDB_API   #
#                    -I..\SOURCES\LIB -I..\SOURCES\TOS -I.\LDB -DROM          #
#                    -DUSE_LIBSTK -DDONT_KEEP_OLD_TYPE_COMPATIBILITY -l       #
#                    ..\EXE\TARGET_R\DAT_ANA.LST -o                           #
#                    ..\EXE\TARGET_R\DAT_ANA.R26                              #
#                    D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\DAT\D #
#                    AT_ANA.C                                                 #
#    List file    =  ..\EXE\TARGET_R\DAT_ANA.LST                              #
#    Object file  =  ..\EXE\TARGET_R\DAT_ANA.R26                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\DAT\DAT_ANA.C
      1          //******************************************************************************
      2          // Company:      Johnson Controls Inc.
      3          // -----------------------------------------------------------------------------
      4          // Copyright:    This software is JCI property.
      5          //               Duplication or disclosure without JCI written authorization
      6          //               is prohibited.
      7          // -----------------------------------------------------------------------------
      8          // Project:      <STANDARD>
      9          // Language:     C
     10          // -----------------------------------------------------------------------------
     11          // Component:    <Comments about the component (role, algorithm, structure, 
     12          //               limitations, defined tasks and events...)>
     13          //******************************************************************************
     14          
     15          //------------------------------------------------------------------------------
     16          // Body Identification
     17          //------------------------------------------------------------------------------
     18          #define dat_ana  "dat_ana"
     19          
     20          
     21          //------------------------------------------------------------------------------
     22          // Included files to resolve specific definitions in this file
     23          //
     24          // #include <system_file_name.h>
     25          // #include "project_file_name.h"
     26          //------------------------------------------------------------------------------
     27          
     28          #include "deftypes.h"
     29          #include "lib.h"
     30          #include "tos.h"
     31          #include "dat.h"
     32          #include "dat_ana.h"
     33          
     34          //------------------------------------------------------------------------------
     35          // Local constants
     36          //
     37          // #define cConstantName   ((tType) ConstantValue)
     38          //------------------------------------------------------------------------------
     39          
     40          //------------------------------------------------------------------------------
     41          // Local macros
     42          //
     43          // #define mMacroName   (MacroDefinition)
     44          //------------------------------------------------------------------------------
     45          
     46          //------------------------------------------------------------------------------
     47          // Local types
     48          //
     49          // typedef Expression    tTypeName;
     50          //------------------------------------------------------------------------------
     51          
     52          //------------------------------------------------------------------------------
     53          // Data prefix
     54          //
     55          // unsigned int {u8,u16,u32} / signed int {s8,s16,s32} 
     56          // register size unsigned int {r} / float {f32,f64}  / s for struct 
     57          //
     58          // -----------------------------------------------------------------------------
     59          // Local data
     60          //
     61          // static  tType   u8VariableName;  
     62          // static  tType*  pu8VariableName; 
     63          //------------------------------------------------------------------------------
     64          #ifndef cLDB_ANAIsSynchronous
     65          static BOOL FirstConversion;
     66          #endif 
     67          

   \                                 In  segment NEAR_Z, align 2, align-sorted
     68          static tTOSAlarm Alarm;
   \                     Alarm:
   \   0000                  DS 4
   \   0004                  REQUIRE __INIT_NEAR_Z
     69          
     70          //------------------------------------------------------------------------------
     71          // Constant local data
     72          //
     73          // static const tType  VariableName;
     74          //------------------------------------------------------------------------------
     75          

   \                                 In  segment CONST, align 2
     76          static const tMsg Msg = { ((U8 *) DATAnaBufferFromLDB), 
   \                     Msg:
   \   0000   ....1000       DW DATAnaBufferFromLDB, 16
     77                                         (cDATAnaNumberOfChanels * cDATAnaNbByteValue)};
     78          //Warning QAC 3218 File scope static, 'Msg', only accessed in one function. Misra Rule 22
     79          
     80          //------------------------------------------------------------------------------
     81          // Exported data
     82          //
     83          // tType   u8LAYCmpVariableName; (LAY: 3 characters to identify the layer)
     84          // tType*  pu8LAYCmpVariableName;(Cmp: 3 characters to identify the component)
     85          //------------------------------------------------------------------------------
     86          

   \                                 In  segment NEAR_Z, align 2, align-sorted
     87          tDATAnaValue    DATAnaBufferFromLDB[cDATAnaNumberOfChanels];
   \                     DATAnaBufferFromLDB:
   \   0000                  DS 16
   \   0010                  REQUIRE __INIT_NEAR_Z
     88          

   \                                 In  segment NEAR_Z, align 2, align-sorted
     89          tDATAnaCalculationSize DATAnaFilteredBuffer[cDATAnaNumberOfChanels];
   \                     DATAnaFilteredBuffer:
   \   0000                  DS 16
   \   0010                  REQUIRE __INIT_NEAR_Z
     90          
     91          //------------------------------------------------------------------------------
     92          // Constant exported data
     93          //
     94          //             (LAY: 3 characters to identify the layer)
     95          //             (Cmp: 3 characters to identify this component)
     96          // 
     97          // const tType   LAYCmpVariableName;
     98          //------------------------------------------------------------------------------
     99          
    100          #ifdef ConstantDivisor
    101             // Table containing the different coefficient values
    102             const U8 DATAnaCoeffValue[cDATAnaNumberOfChanels]  = mDATAnaCoeffValue();
    103          #else
    104             // Table containing the different divisor values

   \                                 In  segment CONST, align 1
    105             const U8 DATAnaDivisorValueNow[cDATAnaNumberOfChanels] = mDATAnaDivisorValue();
   \                     DATAnaDivisorValueNow:
   \   0000   02020202       DB 2, 2, 2, 2, 2, 2, 2, 2
   \          02020202
    106          #endif
    107          
    108          //------------------------------------------------------------------------------
    109          // Local function prototypes
    110          // 
    111          // static tTypeRetour FunctionName(tTypeArgument1 ArgumentName1, ... );
    112          //------------------------------------------------------------------------------
    113          
    114          //==============================================================================
    115          //=========================== LOCAL FUNCTIONS ==================================
    116          //==============================================================================
    117          
    118          //==============================================================================
    119          // DESCRIPTION :
    120          //
    121          // PARAMETERS (Type,Name,Min,Max) :   none
    122          //
    123          // RETURN VALUE :   none
    124          //
    125          // DESIGN INFORMATION : (pseudo code, algorithm ... )
    126          //==============================================================================
    127          // static type FunctionName(...)
    128          
    129          
    130          //==============================================================================
    131          //=========================== EXPORTED FUNCTIONS ===============================
    132          //==============================================================================
    133          
    134          //==============================================================================
    135          // DESCRIPTION : DATAnaInitialize
    136          //
    137          // PARAMETERS (Type,Name,Min,Max) :   tDATAnaValue* : address of the initial value
    138          //
    139          // RETURN VALUE :   none
    140          //
    141          // DESIGN INFORMATION : Initilisation of the component
    142          //==============================================================================

   \                                 In  segment BCODE, align 1, keep-with-next
    143          MEM_TYPE void DATAnaInitialize(const tDATAnaValue *StartingValues)
   \                     DATAnaInitialize:
    144          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 8
   \   0001   ..             CALLT     [__T_?FUNC_ENTER_L06]
   \   0002   0800           DW        0x8
   \   0004   D2             MOVW      BC,AX
    145              U8 Cmpt;
    146              // Initialization of storage spaces
    147              for (Cmpt = 0; Cmpt < cDATAnaNumberOfChanels; Cmpt++)
   \   0005   10....         MOVW      AX,#DATAnaDivisorValueNow
   \   0008   D6             MOVW      HL,AX
   \   0009   891C           MOVW      AX,SP
   \   000B   E6             XCHW      AX,HL
   \   000C   BE05           MOV       [HL+0x05],A
   \   000E   60             MOV       A,X
   \   000F   BE04           MOV       [HL+0x04],A
   \   0011   C2             MOVW      AX,BC
   \   0012   14....         MOVW      DE,#DATAnaBufferFromLDB
   \   0015   BE03           MOV       [HL+0x03],A
   \   0017   60             MOV       A,X
   \   0018   BE02           MOV       [HL+0x02],A
   \   001A   10....         MOVW      AX,#DATAnaFilteredBuffer
   \   001D   B6             POP       HL
   \   001E   B1             PUSH      AX
   \   001F   891C           MOVW      AX,SP
   \   0021   CA0600         ADDW      AX,#6
   \   0024   D6             MOVW      HL,AX
   \   0025   A108           MOV       A,#8
   \   0027   97             MOV       [HL],A
    148              {
    149                  DATAnaBufferFromLDB[Cmpt] = StartingValues[Cmpt];
   \                     ??DATAnaInitialize_0:
   \   0028   C4             MOVW      AX,DE
   \   0029   D6             MOVW      HL,AX
   \   002A   B7             PUSH      HL
   \   002B   B2             POP       BC
   \   002C   891C           MOVW      AX,SP
   \   002E   D6             MOVW      HL,AX
   \   002F   AE02           MOV       A,[HL+0x02]
   \   0031   70             MOV       X,A
   \   0032   AE03           MOV       A,[HL+0x03]
   \   0034   D6             MOVW      HL,AX
   \   0035   87             MOV       A,[HL]
   \   0036   70             MOV       X,A
   \   0037   AE01           MOV       A,[HL+0x01]
   \   0039   B3             PUSH      BC
   \   003A   B6             POP       HL
   \   003B   BE01           MOV       [HL+0x01],A
   \   003D   60             MOV       A,X
   \   003E   97             MOV       [HL],A
    150                  #ifdef ConstantDivisor
    151                      DATAnaFilteredBuffer[Cmpt] = ((tDATAnaValue)DATAnaBufferFromLDB[Cmpt]) * cDATAnaDivisorValue;
    152                  #else
    153                      DATAnaFilteredBuffer[Cmpt] = ((tDATAnaValue)DATAnaBufferFromLDB[Cmpt]) << DATAnaDivisorValueNow[Cmpt];
   \   003F   891C           MOVW      AX,SP
   \   0041   D6             MOVW      HL,AX
   \   0042   87             MOV       A,[HL]
   \   0043   70             MOV       X,A
   \   0044   AE01           MOV       A,[HL+0x01]
   \   0046   D6             MOVW      HL,AX
   \   0047   B7             PUSH      HL
   \   0048   891C           MOVW      AX,SP
   \   004A   D6             MOVW      HL,AX
   \   004B   AE06           MOV       A,[HL+0x06]
   \   004D   70             MOV       X,A
   \   004E   AE07           MOV       A,[HL+0x07]
   \   0050   D6             MOVW      HL,AX
   \   0051   87             MOV       A,[HL]
   \   0052   72             MOV       C,A
   \   0053   C4             MOVW      AX,DE
   \   0054   D6             MOVW      HL,AX
   \   0055   87             MOV       A,[HL]
   \   0056   70             MOV       X,A
   \   0057   AE01           MOV       A,[HL+0x01]
   \   0059   ..             CALLT     [__T_?I_LSH_L02]
   \   005A   B6             POP       HL
   \   005B   BE01           MOV       [HL+0x01],A
   \   005D   60             MOV       A,X
   \   005E   97             MOV       [HL],A
    154                  #endif
    155              }
   \   005F   891C           MOVW      AX,SP
   \   0061   D6             MOVW      HL,AX
   \   0062   87             MOV       A,[HL]
   \   0063   70             MOV       X,A
   \   0064   AE01           MOV       A,[HL+0x01]
   \   0066   D6             MOVW      HL,AX
   \   0067   86             INCW      HL
   \   0068   86             INCW      HL
   \   0069   C6             MOVW      AX,HL
   \   006A   B6             POP       HL
   \   006B   B1             PUSH      AX
   \   006C   891C           MOVW      AX,SP
   \   006E   D6             MOVW      HL,AX
   \   006F   AE02           MOV       A,[HL+0x02]
   \   0071   70             MOV       X,A
   \   0072   AE03           MOV       A,[HL+0x03]
   \   0074   D6             MOVW      HL,AX
   \   0075   86             INCW      HL
   \   0076   86             INCW      HL
   \   0077   891C           MOVW      AX,SP
   \   0079   E6             XCHW      AX,HL
   \   007A   BE03           MOV       [HL+0x03],A
   \   007C   60             MOV       A,X
   \   007D   BE02           MOV       [HL+0x02],A
   \   007F   84             INCW      DE
   \   0080   84             INCW      DE
   \   0081   AE04           MOV       A,[HL+0x04]
   \   0083   70             MOV       X,A
   \   0084   AE05           MOV       A,[HL+0x05]
   \   0086   D6             MOVW      HL,AX
   \   0087   86             INCW      HL
   \   0088   891C           MOVW      AX,SP
   \   008A   E6             XCHW      AX,HL
   \   008B   BE05           MOV       [HL+0x05],A
   \   008D   60             MOV       A,X
   \   008E   BE04           MOV       [HL+0x04],A
   \   0090   AE06           MOV       A,[HL+0x06]
   \   0092   51             DEC       A
   \   0093   BE06           MOV       [HL+0x06],A
   \   0095   BD91           BNZ       ??DATAnaInitialize_0
    156          
    157          #ifndef cLDB_ANAIsSynchronous
    158              FirstConversion = cTrue;
    159          #endif 
    160          }
   \   0097   ..             CALLT     [__T_?FUNC_DEALL_L06]
   \   0098   0800           DW        0x8
   \   009A   B2             POP       BC
   \   009B   AF             RET       
   \   009C                  REQUIRE ?CL78K_V4_6_L00
    161          
    162          //==============================================================================
    163          // DESCRIPTION : DATAnaStart
    164          //
    165          // PARAMETERS (Type,Name,Min,Max) :   none
    166          //
    167          // RETURN VALUE :   none
    168          //
    169          // DESIGN INFORMATION : Start of the component
    170          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    171          void DATAnaStart(void)
   \                     DATAnaStart:
    172          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   100008         MOVW      AX,#2048
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
    173              Alarm.TaskID = cTOSTaskID_TacheANA;
   \   0004   03....         MOVW      Alarm,AX
    174              TOSSetRelAlarm(&Alarm, 0,  mTOSConvMsEnTickAlarm (cDATAnaRefreshingTempoAnaMs));
   \   0007   10....         MOVW      AX,#Alarm
   \   000A   A302           MOV       B,#2
   \   000C   9A....         CALL      TOSSetRelAlarm_Interne
    175          #ifdef COMPILATION_NATIVE
    176              LDBControl(cLDBChannelAna, cLDBAnaStart);
    177          #else
    178          #ifdef cLDBAnaStart
    179              LDBControl(cLDBChannelAna, cLDBAnaStart);
    180          #endif /* cLDBAnaStart */
    181          #endif
    182          }
   \   000F   B2             POP       BC
   \   0010   AF             RET       
   \   0011                  REQUIRE ?CL78K_V4_6_L00
    183          
    184          //==============================================================================
    185          // DESCRIPTION : DATAnaStop
    186          //
    187          // PARAMETERS (Type,Name,Min,Max) :   none
    188          //
    189          // RETURN VALUE :   none
    190          //
    191          // DESIGN INFORMATION : Stop of the component
    192          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    193          void DATAnaStop(void)
   \                     DATAnaStop:
    194          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    195              TOSCancelAlarm(&Alarm);
   \   0000   10....         MOVW      AX,#Alarm
   \   0003   9B....         BR        N:TOSCancelAlarm
   \   0006                  REQUIRE ?CL78K_V4_6_L00
    196          #ifdef COMPILATION_NATIVE
    197              LDBControl(cLDBChannelAna, cLDBAnaStop);
    198          #else
    199          #ifdef cLDBAnaStop
    200              LDBControl(cLDBChannelAna, cLDBAnaStop);
    201          #endif /* cLDBAnaStop */
    202          #endif
    203          }
    204          
    205          
    206          //==============================================================================
    207          // DESCRIPTION : DATAnaCallBackEndCtrl
    208          //
    209          // PARAMETERS (Type,Name,Min,Max) : tCtrl: control identifier
    210          //                                  tStatus : control status   
    211          //
    212          // RETURN VALUE :   none
    213          //
    214          // DESIGN INFORMATION : End of control LDB callback
    215          //==============================================================================
    216          #ifdef COMPILATION_NATIVE
    217          void DATAnaCallBackEndCtrl  (tCtrl Ctrl, tStatus Statut)
    218          {
    219              Ctrl = Ctrl;
    220              Statut = Statut;
    221              mLIBassert(Statut==cLDBCorrect);
    222          }
    223          #else
    224          #if (defined(cLDBAnaStart) || defined(cLDBAnaStop))
    225          void DATAnaCallBackEndCtrl  (tCtrl Ctrl, tStatus Statut)
    226          {
    227              Ctrl = Ctrl;
    228              Statut = Statut;
    229              mLIBassert(Statut==cLDBCorrect);
    230          }
    231          #endif
    232          #endif
    233          
    234          //==============================================================================
    235          // DESCRIPTION : DATAnaCallBackRxWithoutAddr
    236          //
    237          // PARAMETERS (Type,Name,Min,Max) : tStatus : conversion status
    238          //
    239          // RETURN VALUE :   none
    240          //
    241          // DESIGN INFORMATION : End of reception callback: analog conversion is available
    242          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    243          void DATAnaCallBackRxWithoutAddr (tStatus Statut)
   \                     DATAnaCallBackRxWithoutAddr:
    244          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    245              Statut = Statut;
    246              mLIBassert( Statut == cLDBCorrect );
    247          }
   \   0000   AF             RET       
   \   0001                  REQUIRE ?CL78K_V4_6_L00
    248          
    249          
    250          //==============================================================================
    251          // DESCRIPTION : DATAnaTask
    252          //
    253          // PARAMETERS (Type,Name,Min,Max) :   none
    254          //
    255          // RETURN VALUE :   none
    256          //
    257          // DESIGN INFORMATION : periodical receive of the analog entries
    258          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    259          void DATAnaTask( void )
   \                     DATAnaTask:
    260          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   10....         MOVW      AX,#Msg
   \   0003   B3             PUSH      BC
   \   0004   B5             PUSH      DE
   \   0005                  ; Total Auto size: 6
   \   0005   B7             PUSH      HL
   \   0006   B7             PUSH      HL
   \   0007   B7             PUSH      HL
    261              U8    InputIndex;
    262              tDATAnaCalculationSize    Temp;
    263          
    264          #ifdef cLDB_ANAIsSynchronous
    265              LDBReceiveWithoutAddr( cLDBChannelAna, (tMsg *) &Msg );
   \   0008   16....         MOVW      HL,#LWRD(LDBAnaReceiveWithoutAddr)
   \   000B   A4..           MOV       E,#BYTE3(LDBAnaReceiveWithoutAddr)
   \   000D   ..             CALLT     [__T_?FAR_CALL_L07]
    266          #else
    267              if (FirstConversion  == cFalse)
    268              {
    269          #endif
    270                  // going through all the entries
    271                  for (InputIndex = 0; InputIndex < cDATAnaNumberOfChanels; InputIndex++)
   \   000E   10....         MOVW      AX,#DATAnaDivisorValueNow
   \   0011   D6             MOVW      HL,AX
   \   0012   891C           MOVW      AX,SP
   \   0014   E6             XCHW      AX,HL
   \   0015   BE05           MOV       [HL+0x05],A
   \   0017   60             MOV       A,X
   \   0018   BE04           MOV       [HL+0x04],A
   \   001A   10....         MOVW      AX,#DATAnaFilteredBuffer
   \   001D   B6             POP       HL
   \   001E   B1             PUSH      AX
   \   001F   10....         MOVW      AX,#DATAnaBufferFromLDB
   \   0022   D6             MOVW      HL,AX
   \   0023   891C           MOVW      AX,SP
   \   0025   E6             XCHW      AX,HL
   \   0026   BE03           MOV       [HL+0x03],A
   \   0028   60             MOV       A,X
   \   0029   BE02           MOV       [HL+0x02],A
   \   002B   A308           MOV       B,#8
    272                  {
    273          #ifdef ConstantDivisor
    274                      // Filtering with a constant divisor
    275                      Temp = (tDATAnaCalculationSize)DATAnaFilteredBuffer[InputIndex];
    276                      Temp -= (Temp*DATAnaCoeffValue[InputIndex])/cDATAnaDivisorValue;
    277                      Temp += ((tDATAnaCalculationSize)DATAnaBufferFromLDB[InputIndex]*DATAnaCoeffValue[InputIndex]);
    278                      DATAnaFilteredBuffer[InputIndex] = Temp;
    279                
    280          #else
    281                      // Filtering with a constant coefficient (1)
    282                      Temp = (tDATAnaCalculationSize)DATAnaFilteredBuffer[InputIndex];
   \                     ??DATAnaTask_0:
   \   002D   87             MOV       A,[HL]
   \   002E   70             MOV       X,A
   \   002F   AE01           MOV       A,[HL+0x01]
   \   0031   D6             MOVW      HL,AX
   \   0032   87             MOV       A,[HL]
   \   0033   70             MOV       X,A
   \   0034   AE01           MOV       A,[HL+0x01]
   \   0036   D4             MOVW      DE,AX
    283                      Temp -= (Temp>>DATAnaDivisorValueNow[InputIndex]);
    284                      Temp += (tDATAnaCalculationSize)DATAnaBufferFromLDB[InputIndex];
    285                      DATAnaFilteredBuffer[InputIndex] = Temp;
   \   0037   891C           MOVW      AX,SP
   \   0039   D6             MOVW      HL,AX
   \   003A   87             MOV       A,[HL]
   \   003B   70             MOV       X,A
   \   003C   AE01           MOV       A,[HL+0x01]
   \   003E   D6             MOVW      HL,AX
   \   003F   B7             PUSH      HL
   \   0040   891C           MOVW      AX,SP
   \   0042   D6             MOVW      HL,AX
   \   0043   AE04           MOV       A,[HL+0x04]
   \   0045   70             MOV       X,A
   \   0046   AE05           MOV       A,[HL+0x05]
   \   0048   D6             MOVW      HL,AX
   \   0049   87             MOV       A,[HL]
   \   004A   70             MOV       X,A
   \   004B   AE01           MOV       A,[HL+0x01]
   \   004D   B1             PUSH      AX
   \   004E   891C           MOVW      AX,SP
   \   0050   D6             MOVW      HL,AX
   \   0051   AE08           MOV       A,[HL+0x08]
   \   0053   70             MOV       X,A
   \   0054   AE09           MOV       A,[HL+0x09]
   \   0056   D6             MOVW      HL,AX
   \   0057   87             MOV       A,[HL]
   \   0058   72             MOV       C,A
   \   0059   C4             MOVW      AX,DE
   \   005A   9A....         CALL      ?UI_RSH_L02
   \   005D   D6             MOVW      HL,AX
   \   005E   C4             MOVW      AX,DE
   \   005F   30             XCH       A,X
   \   0060   611E           SUB       A,L
   \   0062   30             XCH       A,X
   \   0063   613F           SUBC      A,H
   \   0065   B6             POP       HL
   \   0066   30             XCH       A,X
   \   0067   610E           ADD       A,L
   \   0069   30             XCH       A,X
   \   006A   612F           ADDC      A,H
   \   006C   B6             POP       HL
   \   006D   BE01           MOV       [HL+0x01],A
   \   006F   60             MOV       A,X
   \   0070   97             MOV       [HL],A
    286          #endif
    287                  }
   \   0071   891C           MOVW      AX,SP
   \   0073   D6             MOVW      HL,AX
   \   0074   AE02           MOV       A,[HL+0x02]
   \   0076   70             MOV       X,A
   \   0077   AE03           MOV       A,[HL+0x03]
   \   0079   D6             MOVW      HL,AX
   \   007A   86             INCW      HL
   \   007B   86             INCW      HL
   \   007C   891C           MOVW      AX,SP
   \   007E   E6             XCHW      AX,HL
   \   007F   BE03           MOV       [HL+0x03],A
   \   0081   60             MOV       A,X
   \   0082   BE02           MOV       [HL+0x02],A
   \   0084   87             MOV       A,[HL]
   \   0085   70             MOV       X,A
   \   0086   AE01           MOV       A,[HL+0x01]
   \   0088   D6             MOVW      HL,AX
   \   0089   86             INCW      HL
   \   008A   86             INCW      HL
   \   008B   C6             MOVW      AX,HL
   \   008C   B6             POP       HL
   \   008D   B1             PUSH      AX
   \   008E   891C           MOVW      AX,SP
   \   0090   D6             MOVW      HL,AX
   \   0091   AE04           MOV       A,[HL+0x04]
   \   0093   70             MOV       X,A
   \   0094   AE05           MOV       A,[HL+0x05]
   \   0096   D6             MOVW      HL,AX
   \   0097   86             INCW      HL
   \   0098   891C           MOVW      AX,SP
   \   009A   E6             XCHW      AX,HL
   \   009B   BE05           MOV       [HL+0x05],A
   \   009D   60             MOV       A,X
   \   009E   BE04           MOV       [HL+0x04],A
   \   00A0   53             DEC       B
   \   00A1   BD8A           BNZ       ??DATAnaTask_0
    288              
    289              // Used to realize tests on the analog inputs such as analog entries used for digital entries
    290              DATPanRefresh();
   \   00A3   9A....         CALL      DATPanRefresh
    291              
    292          #ifndef cLDB_ANAIsSynchronous
    293              }
    294              else
    295              {
    296                  FirstConversion = cFalse;
    297              }
    298            
    299              LDBReceiveWithoutAddr( cLDBChannelAna, (tMsg *) &Msg );
    300          #endif
    301          }
   \   00A6   B0             POP       AX
   \   00A7   B0             POP       AX
   \   00A8   B0             POP       AX
   \   00A9   B4             POP       DE
   \   00AA   B2             POP       BC
   \   00AB   AF             RET       
   \   00AC                  REQUIRE ?CL78K_V4_6_L00

   \                                 In  segment CLTVEC, align 2
   \                     __T_?I_LSH_L02:
   \   0000   ....           DW       ?I_LSH_L02

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_CALL_L07:
   \   0000   ....           DW       ?FAR_CALL_L07

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FUNC_ENTER_L06:
   \   0000   ....           DW       ?FUNC_ENTER_L06

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FUNC_DEALL_L06:
   \   0000   ....           DW       ?FUNC_DEALL_L06
    302          

   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     Alarm                          4
     Msg                            4
     DATAnaBufferFromLDB           16
     DATAnaFilteredBuffer          16
     DATAnaDivisorValueNow          8
     DATAnaInitialize             156
     DATAnaStart                   17
     DATAnaStop                     6
     DATAnaCallBackRxWithoutAddr    1
     DATAnaTask                   172
     __T_?I_LSH_L02                 2
     __T_?FAR_CALL_L07              2
     __T_?FUNC_ENTER_L06            2
     __T_?FUNC_DEALL_L06            2

 
 156 bytes in segment BCODE
   8 bytes in segment CLTVEC
 196 bytes in segment CODE
  12 bytes in segment CONST
  36 bytes in segment NEAR_Z
 
 352 bytes of CODE  memory (+ 8 bytes shared)
  12 bytes of CONST memory
  36 bytes of DATA  memory

Errors: none
Warnings: none
