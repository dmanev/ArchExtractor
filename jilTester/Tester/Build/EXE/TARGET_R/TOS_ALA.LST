###############################################################################
#                                                                             #
# IAR C/C++ Compiler V4.61A/W32 for 78K0 and 78K0S      15/Feb/2011  13:26:04 #
# Copyright 1992-2008 IAR Systems AB.                                         #
#                                                                             #
#    Core         =  78k0                                                     #
#    Code model   =  Standard                                                 #
#                 =                                                           #
#    Source file  =  D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\TOS\T #
#                    OS_ALA.C                                                 #
#    Command line =  --code_model standard --core 78k0 -e                     #
#                    -DMEM_TYPE=__banked -DMEM_FAST=__saddr                   #
#                    -DCALLT_TYPE=__callt -DX90_PROJECT                       #
#                    --generate_callt_runtime_library_calls -Ohs              #
#                    "-IC:\Program Files\IAR Systems\Embedded Workbench       #
#                    5.0\78k\inc" "-IC:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.0\78k\inc\clib" -I. -I..\EXE\GEN\            #
#                    -I..\SOURCES\DAT -I..\SOURCES\LAP -I..\SOURCES\LDB_API   #
#                    -I..\SOURCES\LIB -I..\SOURCES\TOS -I.\LDB -DROM          #
#                    -DUSE_LIBSTK -DDONT_KEEP_OLD_TYPE_COMPATIBILITY -l       #
#                    ..\EXE\TARGET_R\TOS_ALA.LST -o                           #
#                    ..\EXE\TARGET_R\TOS_ALA.R26                              #
#                    D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\TOS\T #
#                    OS_ALA.C                                                 #
#    List file    =  ..\EXE\TARGET_R\TOS_ALA.LST                              #
#    Object file  =  ..\EXE\TARGET_R\TOS_ALA.R26                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\TOS\TOS_ALA.C
      1          //******************************************************************************
      2          // Company:      Johnson Controls Inc.
      3          // -----------------------------------------------------------------------------
      4          // Copyright:    This software is JCI property.
      5          //               Duplication or disclosure without JCI written authorization
      6          //               is prohibited.
      7          // -----------------------------------------------------------------------------
      8          // Project:      STK
      9          // Language:     ANSI-C
     10          // -----------------------------------------------------------------------------
     11          // Component:    TOS_ALA
     12          //               TOS Alarm management
     13          // -----------------------------------------------------------------------------
     14          // $Date:   04 Feb 2009 17:03:04  $
     15          // $Archive:   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/EXT_CMP/CPP_CMP/STK/SOURCES/TOS_ALA.C-arc  $
     16          // $Revision:   1.0  $
     17          // -----------------------------------------------------------------------------
     18          /* $Log:   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/EXT_CMP/CPP_CMP/STK/SOURCES/TOS_ALA.C-arc  $
     19          // 
     20          //    Rev 1.0   04 Feb 2009 17:03:04   adzhelp
     21          // Initial revision.
     22          */
     23          //******************************************************************************
     24          
     25          //------------------------------------------------------------------------------
     26          // Body Identification
     27          //------------------------------------------------------------------------------
     28          #define TOS_ALA "TOS_ALA"
     29          
     30          //------------------------------------------------------------------------------
     31          // Included files to resolve specific definitions in this file
     32          //------------------------------------------------------------------------------
     33          #include "tos_ala.h"
     34          #include "tos_ord.h"
     35          #include "ldb_tos.h"
     36          #include "lib.h"
     37          
     38          //------------------------------------------------------------------------------
     39          // Local constants
     40          //------------------------------------------------------------------------------
     41          //This constant defines the number of slot available
     42          #define cNbSlot ((U8)8)
     43          
     44          //This constant defines the period of designed for Alarm management LDB timer
     45          #define cPeriodeTempoLDB    cPeriodTimerLDB
     46          #define cPeriodTimerLDB     ((U32) ((U32)cTOSTickAlarmUs * (U16)1000L) / \
     47                                      (cLDBTick * (U8)2L) )
     48          
     49          //------------------------------------------------------------------------------
     50          // Local macros
     51          //------------------------------------------------------------------------------
     52          
     53          //------------------------------------------------------------------------------
     54          // Local types
     55          //------------------------------------------------------------------------------
     56          
     57          //------------------------------------------------------------------------------
     58          // Local data
     59          //------------------------------------------------------------------------------

   \                                 In  segment NEAR_Z, align 1, align-sorted
     60          static tTOSTickAlarm    AlarmState;
   \                     AlarmState:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
     61          static tTOSTickAlarm    AlarmCycle;
   \                     AlarmCycle:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
     62          static tTOSOrdTaskList  TasksList[cNbSlot];
   \                     TasksList:
   \   0000                  DS 16
   \   0010                  REQUIRE __INIT_NEAR_Z
     63          
     64          //------------------------------------------------------------------------------
     65          // Constant local data
     66          //------------------------------------------------------------------------------
     67          
     68          //------------------------------------------------------------------------------
     69          // Exported data
     70          //------------------------------------------------------------------------------
     71          
     72          //------------------------------------------------------------------------------
     73          // Constant exported data
     74          //------------------------------------------------------------------------------
     75          
     76          //------------------------------------------------------------------------------
     77          // Local function prototypes
     78          //------------------------------------------------------------------------------
     79          //==============================================================================
     80          // DESCRIPTION         : Returns the slot Id corresponding to input parameter 
     81          //                       Duration.
     82          //
     83          // PARAMETERS          : Duration - this parameter can only take
     84          //                                  value of 2 to the power of x.
     85          //
     86          // RETURN VALUE        : U8
     87          //
     88          // DESIGN INFORMATION  : Checks if Duration is different from 0.
     89          //                       Returns the position of the first bit to 1 of the tick counter, starting
     90          //                       with the less significant bit.
     91               
     92          //==============================================================================
     93          static U8 GetSlot( tTOSTickAlarm Duration);
     94          
     95          //==============================================================================
     96          //=========================== LOCAL FUNCTIONS ==================================
     97          //==============================================================================
     98          static U8 GetSlot( tTOSTickAlarm Duration )
     99          {
    100              U8 u8SlotID = 0;
    101          
    102              // Checks if Duration is different from 0
    103              mLIBassert(Duration != 0);
    104              while( (Duration & 1) == 0 )
    105              {
    106                  u8SlotID++;
    107                  Duration >>= 1;
    108              }
    109          
    110              return u8SlotID;
    111          }
    112          
    113          //==============================================================================
    114          //=========================== EXPORTED FUNCTIONS ===============================
    115          //==============================================================================
    116          
    117          //==============================================================================
    118          // DESCRIPTION:         See component header file
    119          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    120          void TOSAlaInitialize(void)
   \                     TOSAlaInitialize:
    121          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   A100           MOV       A,#0
   \   0002   B3             PUSH      BC
   \   0003   B5             PUSH      DE
   \   0004                  ; Total Auto size: 0
    122              U8 u8NbSlot;
    123              AlarmState = 0;
   \   0004   9E....         MOV       AlarmState,A
    124              for (u8NbSlot = 0;u8NbSlot < cNbSlot;u8NbSlot++)
   \   0007   14....         MOVW      DE,#TasksList
   \   000A   A208           MOV       C,#8
    125              {
    126                  TOSOrdClearTaskList(&TasksList[u8NbSlot]);
   \                     ??TOSAlaInitialize_0:
   \   000C   C4             MOVW      AX,DE
   \   000D   D6             MOVW      HL,AX
   \   000E   A100           MOV       A,#0
   \   0010   BE01           MOV       [HL+0x01],A
   \   0012   97             MOV       [HL],A
    127              }
   \   0013   84             INCW      DE
   \   0014   84             INCW      DE
   \   0015   52             DEC       C
   \   0016   BDF4           BNZ       ??TOSAlaInitialize_0
    128          }
   \   0018   B4             POP       DE
   \   0019   B2             POP       BC
   \   001A   AF             RET       
   \   001B                  REQUIRE ?CL78K_V4_6_L00
    129          
    130          //==============================================================================
    131          // DESCRIPTION:         See component header file
    132          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    133          void TOSStartAlarm(void)
   \                     TOSStartAlarm:
    134          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   A101           MOV       A,#1
   \   0002   B3             PUSH      BC
   \   0003                  ; Total Auto size: 0
    135              TOSStartSlowestAlarms(1);
   \   0003   9E....         MOV       AlarmCycle,A
   \   0006   A100           MOV       A,#0
   \   0008   A301           MOV       B,#1
   \   000A   9A....         CALL      LDBTimStartTimer
    136          }
   \   000D   B2             POP       BC
   \   000E   AF             RET       
   \   000F                  REQUIRE ?CL78K_V4_6_L00
    137          
    138          //==============================================================================
    139          // DESCRIPTION:         See component header file
    140          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    141          void TOSStartSlowestAlarms(const tTOSTickAlarm MinimumCycle)
   \                     TOSStartSlowestAlarms:
    142          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   \   0001   70             MOV       X,A
    143              //check if cTOSTickAlarmUs is a 2-multiple of cLDBTick
    144              mLIBassert( (cPeriodTimerLDB * (U8)2L * cLDBTick) ==  
    145                          ((U32)1000L * cTOSTickAlarmUs) );
    146          
    147              AlarmCycle = MinimumCycle;
   \   0002   9E....         MOV       AlarmCycle,A
    148              AlarmState &= (tTOSTickAlarm) ~((tTOSTickAlarm)(AlarmCycle - 1));
   \   0005   A1FF           MOV       A,#255
   \   0007   08....         ADD       A,AlarmCycle
   \   000A   7DFF           XOR       A,#255
   \   000C   58....         AND       A,AlarmState
   \   000F   9E....         MOV       AlarmState,A
    149          
    150              LDBStartTimer(
    151                            cTOSTimerLdbDesignedForALA,
    152                            TOSAlaCallBackTimer,
    153                            ((LDBPARAM_DELAY_TYPE)( ((LDBPARAM_DELAY_TYPE)cPeriodTimerLDB)
    154                            * ((LDBPARAM_DELAY_TYPE)MinimumCycle))),
    155                            cTrue
    156                           );
   \   0012   60             MOV       A,X
   \   0013   73             MOV       B,A
   \   0014   A100           MOV       A,#0
   \   0016   9A....         CALL      LDBTimStartTimer
    157          }
   \   0019   B2             POP       BC
   \   001A   AF             RET       
   \   001B                  REQUIRE ?CL78K_V4_6_L00
    158          
    159          //==============================================================================
    160          // DESCRIPTION:         See component header file
    161          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    162          void TOSStopAlarm(void)
   \                     TOSStopAlarm:
    163          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    164              LDBPARAM_DELAY_TYPE Res = LDBStopTimer( cTOSTimerLdbDesignedForALA );
   \   0000   A100           MOV       A,#0
   \   0002   9B....         BR        N:LDBTimStopTimer
   \   0005                  REQUIRE ?CL78K_V4_6_L00
    165          }
    166          
    167          //==============================================================================
    168          // DESCRIPTION:         See component header file
    169          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    170          void TOSSetRelAlarm_Interne( tTOSAlarmType const pAlarm, const tTOSTickAlarm Cycle )
   \                     TOSSetRelAlarm_Interne:
    171          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001   B5             PUSH      DE
   \   0002                  ; Total Auto size: 0
   \   0002   D4             MOVW      DE,AX
    172              U8 u8SlotID;
    173              
    174              if (pAlarm != NULL)
   \   0003   6168           OR        A,X
   \   0005   AD39           BZ        ??TOSAlaCallBackTimer_0
    175              {
    176                  u8SlotID = GetSlot( Cycle );
   \   0007   63             MOV       A,B
   \   0008   70             MOV       X,A
   \   0009   A200           MOV       C,#0
   \   000B   FA04           BR        ??TOSAlaCallBackTimer_1
   \                     ??TOSSetRelAlarm_Interne_0:
   \   000D   42             INC       C
   \   000E   21             CLR1      CY
   \   000F   25             RORC      A,0x1
   \   0010   70             MOV       X,A
   \                     ??TOSAlaCallBackTimer_1:
   \   0011   60             MOV       A,X
   \   0012   310FF8         BF        A.0, ??TOSSetRelAlarm_Interne_0
    177                  
    178                  // Check if the asked period is 2 to power of x compatible.
    179                  mLIBassert( ((tTOSTickAlarm)1 << u8SlotID) == Cycle );
    180                  
    181                  pAlarm->Period = Cycle;
   \   0015   63             MOV       A,B
   \   0016   B5             PUSH      DE
   \   0017   B6             POP       HL
   \   0018   86             INCW      HL
   \   0019   86             INCW      HL
   \   001A   97             MOV       [HL],A
    182                  
    183                  TOSSuspendOSInterrupts();
   \   001B   9A....         CALL      TOSSuspendOSInterrupts
    184                  TOSOrdAddTaskToList(&TasksList[u8SlotID],pAlarm->TaskID);
   \   001E   C4             MOVW      AX,DE
   \   001F   D6             MOVW      HL,AX
   \   0020   87             MOV       A,[HL]
   \   0021   70             MOV       X,A
   \   0022   AE01           MOV       A,[HL+0x01]
   \   0024   D4             MOVW      DE,AX
   \   0025   62             MOV       A,C
   \   0026   A002           MOV       X,#2
   \   0028   3188           MULU      X
   \   002A   CA....         ADDW      AX,#TasksList
   \   002D   D6             MOVW      HL,AX
   \   002E   87             MOV       A,[HL]
   \   002F   70             MOV       X,A
   \   0030   AE01           MOV       A,[HL+0x01]
   \   0032   30             XCH       A,X
   \   0033   616C           OR        A,E
   \   0035   30             XCH       A,X
   \   0036   616D           OR        A,D
   \   0038   30             XCH       A,X
   \   0039   97             MOV       [HL],A
   \   003A   60             MOV       A,X
   \   003B   BE01           MOV       [HL+0x01],A
    185                  TOSResumeOSInterrupts();
   \   003D   9A....         CALL      TOSResumeOSInterrupts
    186              }
    187          }
   \                     ??TOSAlaCallBackTimer_0:
   \   0040   B4             POP       DE
   \   0041   B2             POP       BC
   \   0042   AF             RET       
   \   0043                  REQUIRE ?CL78K_V4_6_L00
    188          
    189          //==============================================================================
    190          // DESCRIPTION:         See component header file
    191          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    192          void TOSCancelAlarm( const tTOSAlarm* const pAlarm )
   \                     TOSCancelAlarm:
    193          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001   B5             PUSH      DE
   \   0002                  ; Total Auto size: 0
   \   0002   D4             MOVW      DE,AX
    194              U8 u8SlotID;
    195          
    196              if (pAlarm != NULL)
   \   0003   6168           OR        A,X
   \   0005   AD46           BZ        ??TOSAlaCallBackTimer_2
    197              {
    198                  u8SlotID = GetSlot( pAlarm->Period );
   \   0007   B5             PUSH      DE
   \   0008   B6             POP       HL
   \   0009   AE02           MOV       A,[HL+0x02]
   \   000B   70             MOV       X,A
   \   000C   A200           MOV       C,#0
   \   000E   FA04           BR        ??TOSAlaCallBackTimer_3
   \                     ??TOSCancelAlarm_0:
   \   0010   42             INC       C
   \   0011   21             CLR1      CY
   \   0012   25             RORC      A,0x1
   \   0013   70             MOV       X,A
   \                     ??TOSAlaCallBackTimer_3:
   \   0014   60             MOV       A,X
   \   0015   310FF8         BF        A.0, ??TOSCancelAlarm_0
    199                  
    200                  // Check if the asked period is 2 to power of x compatible.
    201                  mLIBassert( ((tTOSTickAlarm)1 << u8SlotID) == pAlarm->Period );
    202                  
    203                  TOSSuspendOSInterrupts();
   \   0018   9A....         CALL      TOSSuspendOSInterrupts
    204                  TOSOrdRemoveTaskFromList(&TasksList[u8SlotID],pAlarm->TaskID);
   \   001B   C4             MOVW      AX,DE
   \   001C   D6             MOVW      HL,AX
   \   001D   87             MOV       A,[HL]
   \   001E   70             MOV       X,A
   \   001F   AE01           MOV       A,[HL+0x01]
   \   0021   30             XCH       A,X
   \   0022   7DFF           XOR       A,#255
   \   0024   30             XCH       A,X
   \   0025   7DFF           XOR       A,#255
   \   0027   B1             PUSH      AX
   \   0028   62             MOV       A,C
   \   0029   A002           MOV       X,#2
   \   002B   3188           MULU      X
   \   002D   CA....         ADDW      AX,#TasksList
   \   0030   D6             MOVW      HL,AX
   \   0031   B2             POP       BC
   \   0032   87             MOV       A,[HL]
   \   0033   70             MOV       X,A
   \   0034   AE01           MOV       A,[HL+0x01]
   \   0036   30             XCH       A,X
   \   0037   615A           AND       A,C
   \   0039   30             XCH       A,X
   \   003A   615B           AND       A,B
   \   003C   30             XCH       A,X
   \   003D   97             MOV       [HL],A
   \   003E   60             MOV       A,X
   \   003F   BE01           MOV       [HL+0x01],A
    205                  TOSOrdSuspendTask(pAlarm->TaskID);
   \   0041   C4             MOVW      AX,DE
   \   0042   D6             MOVW      HL,AX
   \   0043   87             MOV       A,[HL]
   \   0044   70             MOV       X,A
   \   0045   AE01           MOV       A,[HL+0x01]
   \   0047   9A....         CALL      TOSOrdSuspendTask
    206                  TOSResumeOSInterrupts();
   \   004A   9A....         CALL      TOSResumeOSInterrupts
    207              }
    208          }
   \                     ??TOSAlaCallBackTimer_2:
   \   004D   B4             POP       DE
   \   004E   B2             POP       BC
   \   004F   AF             RET       
   \   0050                  REQUIRE ?CL78K_V4_6_L00
    209          
    210          //==============================================================================
    211          // DESCRIPTION:         See component header file
    212          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
    213          void TOSAlaCallBackTimer(void)
   \                     TOSAlaCallBackTimer:
    214          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
    215              AlarmState = ((tTOSTickAlarm) (AlarmCycle + AlarmState));
   \   0001   8E....         MOV       A,AlarmCycle
   \   0004   08....         ADD       A,AlarmState
   \   0007   9E....         MOV       AlarmState,A
    216              if( AlarmState != 0)
   \   000A   AD1D           BZ        ??TOSAlaCallBackTimer_4
    217              {
    218                  U8 u8SlotID = GetSlot( AlarmState );
   \   000C   70             MOV       X,A
   \   000D   A200           MOV       C,#0
   \   000F   FA04           BR        ??TOSAlaCallBackTimer_5
   \                     ??TOSAlaCallBackTimer_6:
   \   0011   42             INC       C
   \   0012   21             CLR1      CY
   \   0013   25             RORC      A,0x1
   \   0014   70             MOV       X,A
   \                     ??TOSAlaCallBackTimer_5:
   \   0015   60             MOV       A,X
   \   0016   310FF8         BF        A.0, ??TOSAlaCallBackTimer_6
    219                  TOSOrdActivateTaskList( &TasksList[u8SlotID] );
   \   0019   62             MOV       A,C
   \   001A   A002           MOV       X,#2
   \   001C   3188           MULU      X
   \   001E   CA....         ADDW      AX,#TasksList
   \   0021   D6             MOVW      HL,AX
   \   0022   87             MOV       A,[HL]
   \   0023   70             MOV       X,A
   \   0024   AE01           MOV       A,[HL+0x01]
   \   0026   9A....         CALL      TOSActivateTask
    220              }
    221          }
   \                     ??TOSAlaCallBackTimer_4:
   \   0029   B2             POP       BC
   \   002A   AF             RET       
   \   002B                  REQUIRE ?CL78K_V4_6_L00
    222          

   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     AlarmState                1
     AlarmCycle                1
     TasksList                16
     TOSAlaInitialize         27
     TOSStartAlarm            15
     TOSStartSlowestAlarms    27
     TOSStopAlarm              5
     TOSSetRelAlarm_Interne   67
     TOSCancelAlarm           80
     TOSAlaCallBackTimer      43

 
 264 bytes in segment CODE
  18 bytes in segment NEAR_Z
 
 264 bytes of CODE memory
  18 bytes of DATA memory

Errors: none
Warnings: none
