###############################################################################
#                                                                             #
# IAR C/C++ Compiler V4.61A/W32 for 78K0 and 78K0S      15/Feb/2011  13:27:20 #
# Copyright 1992-2008 IAR Systems AB.                                         #
#                                                                             #
#    Core         =  78k0                                                     #
#    Code model   =  Standard                                                 #
#                 =                                                           #
#    Source file  =  D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\LAP\L #
#                    AP_DLK.C                                                 #
#    Command line =  --code_model standard --core 78k0 -e                     #
#                    -DMEM_TYPE=__banked -DMEM_FAST=__saddr                   #
#                    -DCALLT_TYPE=__callt -DX90_PROJECT                       #
#                    --generate_callt_runtime_library_calls -Ohs              #
#                    "-IC:\Program Files\IAR Systems\Embedded Workbench       #
#                    5.0\78k\inc" "-IC:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.0\78k\inc\clib" -I. -I..\EXE\GEN\            #
#                    -I..\SOURCES\DAT -I..\SOURCES\LAP -I..\SOURCES\LDB_API   #
#                    -I..\SOURCES\LIB -I..\SOURCES\TOS -I.\LDB -DROM          #
#                    -DUSE_LIBSTK -DDONT_KEEP_OLD_TYPE_COMPATIBILITY -l       #
#                    ..\EXE\TARGET_R\LAP_DLK.LST -o                           #
#                    ..\EXE\TARGET_R\LAP_DLK.R26                              #
#                    D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\LAP\L #
#                    AP_DLK.C                                                 #
#    List file    =  ..\EXE\TARGET_R\LAP_DLK.LST                              #
#    Object file  =  ..\EXE\TARGET_R\LAP_DLK.R26                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\LAP\LAP_DLK.C
      1          //******************************************************************************
      2          // Company:      Johnson Controls Inc.
      3          // -----------------------------------------------------------------------------
      4          // Copyright:    This software is JCI property.
      5          //               Duplication or disclosure without JCI written authorization
      6          //               is prohibited.
      7          // -----------------------------------------------------------------------------
      8          // Project:      X90_BCM
      9          // Language:     ANSI-C
     10          // -----------------------------------------------------------------------------
     11          // Component:    LAP_DLK
     12          //               Doorlock
     13          // -----------------------------------------------------------------------------
     14          // $Date:   Mar 09 2010 10:01:46  $
     15          // $Archive:   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/LAP/DLK/LAP_DLK.c-arc  $
     16          // $Revision:   1.64  $
     17          // -----------------------------------------------------------------------------
     18          // $Log::   J:/_PVCSRoot/Renault/X90_BCM/SOFTWARE/PVCS/archives/DEVELOPMENT/X90_BCM/K0/L7/CMP/LAP/DLK/LAP_DLK.c-arc  $
     19          // 
     20          //    Rev 1.64   Mar 09 2010 10:01:46   adzhelp
     21          // Cm007644: Code review corrections
     22          // 
     23          //    Rev 1.63   Mar 09 2010 09:54:18   adzhelp
     24          // Cm007644: No HWP in sleep mode for Doorlock LED
     25          // 
     26          //    Rev 1.62   Mar 04 2010 12:29:30   adzhelp
     27          // Cm007632: CDL failure management on rising ignition.
     28          // Button authorization / enabling management updated.
     29          // 
     30          //    Rev 1.61   Mar 02 2010 10:49:10   adzhelp
     31          // Cm006814: TPS_OUVPORTE, TPS_COM_MOTEUR, TIMER_PRECONDA_AUTO, TPS_REF, SEUIL_VIT_CONDAROU, NBCOM_MAX normalized
     32          // 
     33          //    Rev 1.60   Feb 26 2010 10:16:18   adzhelp
     34          // Cm007634, Cm007212: Unit test corrections
     35          // 
     36          //    Rev 1.59   Feb 25 2010 17:33:56   adzhelp
     37          // Cm007212: HWP: Implementation of SC detection of Verlog LED and Doorlock LED in sleep mode
     38          // 
     39          //    Rev 1.58   Feb 25 2010 14:55:46   adzhelp
     40          // Cm007634:  HWP: Problems in detection of VERLOG_LED SC
     41          // 
     42          //    Rev 1.57   Feb 24 2010 10:04:04   adzhelp
     43          // Cm006744:  SDO timeout calculation updated
     44          // 
     45          //    Rev 1.56   Feb 23 2010 11:22:46   adzhelp
     46          // Cm006152: Doorlock LED state after reset depends on EEP flag.
     47          // 
     48          //    Rev 1.55   Feb 12 2010 09:08:24   adzhelp
     49          // Cm007440: Safety unlock: ignore CDL lock after LWS until next IGN
     50          // 
     51          //    Rev 1.54   Feb 10 2010 16:47:10   amanevd
     52          // Cm007075: Volatile Faults and Deprotection cleared at IGN ON
     53          // 
     54          //    Rev 1.53   Feb 10 2010 09:22:30   adzhelp
     55          // Cm006744:  Perform 32-bit math operations only when values are changed
     56          // 
     57          //    Rev 1.52   Feb 08 2010 14:45:44   adzhelp
     58          // Cm006989: Safety unlock performed only after LWS activated
     59          // 
     60          //    Rev 1.51   Feb 08 2010 11:53:24   adzhelp
     61          // Cm007023: Send control for SDO unlock to flashers and roomlamps
     62          // 
     63          //    Rev 1.50   Feb 05 2010 17:41:18   adzhelp
     64          // Cm006761: BCM does not go to Sleep mode after Driver Door unlock (SDO)
     65          // 
     66          //    Rev 1.49   Feb 05 2010 16:58:18   adzhelp
     67          // Cm007005: Management of a Crash counter
     68          // 
     69          //    Rev 1.48   Feb 04 2010 10:49:46   adzhelp
     70          // Cm006968, Cm006760: Limitation for repeated crash unlock
     71          // 
     72          //    Rev 1.47   Jan 22 2010 11:03:16   adzhelp
     73          // Cm007074: CLR#190 - EEP flag for airbag malfunction cleared on rising ignition
     74          // 
     75          //    Rev 1.46   Jan 21 2010 15:09:54   adzhelp
     76          // Cm007074: EEP flag for airbag malfunction replaced by RAM flag
     77          // 
     78          //    Rev 1.45   Dec 15 2009 10:52:28   amanevd
     79          // Cm005566: DOORLOCK_LED is not turned off prior attempt to protect it
     80          // 
     81          //    Rev 1.44   Dec 14 2009 11:02:16   amanevd
     82          // Cm005566: Full Hardware Protection
     83          // 
     84          //    Rev 1.43   Dec 01 2009 15:42:44   adzhelp
     85          // Cm006624: EEP_CrashHazardIsRequested is not set on airbag malfunction
     86          // 
     87          //    Rev 1.42   Nov 04 2009 16:27:34   adzhelp
     88          // Cm005566: Implementation of HW Protection
     89          // 
     90          //    Rev 1.41   Oct 30 2009 10:46:26   amarinm1
     91          // Cm006587: Send new control AutoRelock in case of Auto Relock.
     92          // 
     93          //    Rev 1.40   Oct 19 2009 14:53:54   ailievb
     94          // Cm006402: DLK: 'LOCK Doors' output remain permanently ON when LOCK requested by LWS functionality
     95          // 
     96          //    Rev 1.39   Oct 14 2009 16:17:26   ailievb
     97          // Cm005149: DLK: Unexpected UNLOCK on Front doors opening after reset.
     98          // 
     99          //    Rev 1.38   Oct 14 2009 11:43:26   ailievb
    100          // Cm006277: EEP_CrashHazardIsRequested should not be cleared in LAP_DLK anymore.
    101          // 
    102          //    Rev 1.37   Oct 14 2009 09:47:32   ailievb
    103          // Cm006470: DLK: Fault status not updated correctly (0x61 0x94)
    104          // 
    105          //    Rev 1.36   Oct 06 2009 17:32:24   akodzhh
    106          // Cm006427: DATRfPushMemorized is now updated for UnlockDrDoor, UnlockAll and LockAll trough LAP_DLK(SDO).
    107          // 
    108          //    Rev 1.35   Oct 06 2009 10:19:34   ailievb
    109          // Cm006273: DLK: Update prsFS_DLK-558 according to the IR_A01
    110          // 
    111          //    Rev 1.34   Oct 05 2009 14:28:16   ailievb
    112          // Cm006209: DIAG: In $21$DB diag request, bad managment "DERNIERE_CMD".
    113          // 
    114          //    Rev 1.33   Oct 05 2009 14:01:52   ailievb
    115          // Cm006414: DLK: Unexpected Flashing Crash Indication on Malfunction declared.
    116          // 
    117          //    Rev 1.32   Oct 05 2009 11:53:26   ailievb
    118          // Cm006369: DLK: (IR_AUI01) CAR_SECURE means vehicle locked from outside, therefore not by CPL
    119          // 
    120          //    Rev 1.31   Oct 01 2009 10:18:50   adzhelp
    121          // Cm006155: BCM not activated on LeaveStartingStepState
    122          // 
    123          //    Rev 1.30   Sep 23 2009 17:36:36   adzhelp
    124          // Cm005206, Cm005207: Unlock all doors activates both outputs
    125          // 
    126          //    Rev 1.29   Sep 23 2009 16:37:36   adzhelp
    127          // Cm006191: Control cTOSControlCrashUnlockFinished sent only when EEP_CrashHazardIsRequested
    128          // 
    129          //    Rev 1.28   Sep 23 2009 10:57:08   ailievb
    130          // Cm005137:DIAG: Fault status not updated correctly
    131          // 
    132          //    Rev 1.27   Sep 23 2009 10:04:36   ailievb
    133          // Cm005206: EFX90_SW2_FP06 : Implementation of the Doorlock functionality (SDO part)
    134          // 
    135          //    Rev 1.26   Sep 21 2009 15:54:32   ailievb
    136          // Cm005756: TOS Timers introduce an additional delay of 1 graph/task cycle
    137          // 
    138          //    Rev 1.25   Sep 18 2009 10:10:48   ailievb
    139          // Cm006191: FLA: Need to manage crash memorization after reset.
    140          // 
    141          //    Rev 1.24   Sep 14 2009 15:40:58   ailievb
    142          // Cm005603: DLK: Airbag crash, Flashers triggered too early
    143          // 
    144          //    Rev 1.23   Sep 11 2009 11:07:42   ailievb
    145          // Cm005683: DLK: If ALIM_PLAF = 0 after automatic re-lock the Dorrlok LED do not switch off after 60 seconds
    146          // 
    147          //    Rev 1.22   Sep 10 2009 10:36:32   ailievb
    148          // Cm005116:DLK: Unexpected relock after crash unlock
    149          // 
    150          //    Rev 1.21   Sep 08 2009 14:08:18   ailievb
    151          // Cm006152: DLK: IR_A07 according to Cm006108
    152          // 
    153          //    Rev 1.20   Sep 08 2009 10:59:50   ailievb
    154          // Cm006153: DLK: IR_A43 according to Cm006110.
    155          // 
    156          //    Rev 1.19   Jul 24 2009 09:10:14   adzhelp
    157          // Cm005136: Integration corrections: immediate read access after starting step
    158          // 
    159          //    Rev 1.18   Jul 08 2009 10:54:54   ailievb
    160          // Cm005121: DLK: No 'Unlock All' command LWS conditions not met and door opened
    161          // 
    162          //    Rev 1.17   Jul 07 2009 16:56:04   ailievb
    163          // Cm005602 : DLK: Unexpected driving duration of doorlock motors
    164          // 
    165          //    Rev 1.16   Jul 07 2009 14:18:02   ailievb
    166          // Cm005120: DLK: If the doors are locked by RKE or by Auto-relock the DOORLOCK_LED remains turned on after a door opening.
    167          // 
    168          //    Rev 1.15   Jul 07 2009 11:17:56   ailievb
    169          // Cm005132: DLK: 'Master Front Doors unlocking' function do not operate when last RKE is Unlock and key is authorized
    170          // 
    171          //    Rev 1.14   Jul 07 2009 10:53:34   ailievb
    172          // Cm005095:DLK: The DOORLOCK_LED doesn't turn off after front door opening
    173          // 
    174          //    Rev 1.13   Jul 07 2009 09:35:00   ailievb
    175          // Cm005136: DLK: The BCM does LOCK/UNLOCK the doors at BCM reset if the CDL button is in LOCK/UNLOCK position.
    176          // 
    177          //    Rev 1.12   Jul 07 2009 09:24:42   ailievb
    178          // Cm005135:DLK: BCM does not detect a opposite CDL request spaced out less than TPS_COM_MOTEUR time-out 
    179          // 
    180          //    Rev 1.11   May 27 2009 10:42:50   ailievb
    181          // Cm003264:Implementation of the Doorlock functionality (Without SDO part)
    182          // 
    183          //    Rev 1.10   May 08 2009 16:29:52   ailievb
    184          // Cm004984:DoorLock issue : No systematic Crash Unlock in case of Airbag Malfunction
    185          // 
    186          //    Rev 1.9   May 08 2009 14:36:36   ailievb
    187          // Cm004984:DoorLock issue : No systematic Crash Unlock in case of Airbag Malfunction
    188          // 
    189          //    Rev 1.8   May 08 2009 07:47:30   ailievb
    190          // Cm004927:Wrong interpretation of prsFS_DLK-537 (relocking while the door is still open)
    191          // 
    192          //    Rev 1.7   May 07 2009 11:31:14   ailievb
    193          // Cm004927:Wrong interpretation of prsFS_DLK-537 (relocking while the door is still open)
    194          // Cm004939: LWS diag "VEHICULE_ROULANT" not updated
    195          // Cm004934: Diag: ETAT_VEH_CONDA_DECONDA, DERNIERE_CMD not updated for RKE
    196          // 
    197          //    Rev 1.6   May 04 2009 17:40:32   ailievb
    198          // Cm004912: Led CPE is not set properly when lock command is executed
    199          // 
    200          //    Rev 1.4   Apr 28 2009 09:33:46   ailievb
    201          // Cm003264:Implementation of the Doorlock functionality (Without SDO part)
    202          // 
    203          //    Rev 1.3   Apr 22 2009 10:56:28   ailievb
    204          // Cm003264:Implementation of the Doorlock functionality (Without SDO part)
    205          // LastOpeningPanelControl added for diagnostic purposes.
    206          // 
    207          //    Rev 1.2   Apr 21 2009 11:56:30   ailievb
    208          // Cm003264:Implementation of the Doorlock functionality (Without SDO part)
    209          // DATCmnVehicleIsUnprotected, DATCmnLastCommandOrigin, DATCmnVehicleIsAutoRelocked,
    210          // DATCmnVehicleIsLockedWithSpeed, DATCmnVehiculeHasBeenMoving added for diagnostic purposes
    211          // 
    212          //    Rev 1.1   Apr 16 2009 15:02:18   ailievb
    213          // Added support of 1 Button RKE.
    214          // Issue correction. 
    215          // 
    216          //    Rev 1.0   Mar 24 2009 09:37:56   ailievb
    217          // Initial revision.
    218          //
    219          //******************************************************************************
    220          
    221          //--------------------------------------------------------------------------
    222          // Body Identification
    223          //--------------------------------------------------------------------------
    224          
    225          #define LAP_DLK  "LAP_DLK"
    226          //--------------------------------------------------------------------------
    227          //  Included files
    228          //
    229          //  #include <system_file_name.h>
    230          //  #include "project_file_name.h"
    231          //--------------------------------------------------------------------------
    232          
    233          #include "tos.h"
    234          #include "dat.h"
    235          #include "LAP_DLK.h"
    236          #include "LAP_DLK.hgr"

   \                                 In  segment CONST, align 2
   \   tTOSSeqRuleType const __near DLKMotorCommand[6]
   \                     DLKMotorCommand:
   \   0000   ........       DW DLKCommandIsPending, DLKCommandMotorRelays
   \   0004   FF01           DB 255, 1
   \   0006   ........       DW DLKNoRequest, TOSSeqNoAction
   \   000A   0200           DB 2, 0
   \   000C   ........       DW DLKDebounceTimeOut, DLKCommandCPERelay
   \   0010   FF03           DB 255, 3
   \   0012   ........       DW DLKMotorActivationTimeOut, TOSSeqNoAction
   \   0016   FF04           DB 255, 4
   \   0018   ........       DW DLKDebounceTimeOut, DLKDeCommandMotorRelays
   \   001C   0500           DB 5, 0
   \   001E   ........       DW DLKCommandIsPending, DLKCommandMotorRelays
   \   0022   FF01           DB 255, 1

   \                                 In  segment CONST, align 2
   \   tTOSSeqRuleType const __near DLKAirbagManagement[4]
   \                     DLKAirbagManagement:
   \   0000   ........       DW DLKIgnitionIsOnAndKeyWasRecognizedAndLWS, DLKStartAirbag
   \   0004   FF01           DB 255, 1
   \   0006   ........       DW TOSSeqTrueEval, DLKAirbagInformationManagement
   \   000A   FF02           DB 255, 2
   \   000C   ........       DW DLKIgnitionIsOff, DLKStopAirbag
   \   0010   0300           DB 3, 0
   \   0012   ........       DW TOSSeqTrueEval, DLKAirbagInformationManagement
   \   0016   FF02           DB 255, 2

   \                                 In  segment CONST, align 2
   \   tTOSSeqRuleType const __near DLKOutputData[1]
   \                     DLKOutputData:
   \   0000   ........       DW TOSSeqTrueEval, DLKOutputDataManagement
   \   0004   FF00           DB 255, 0

   \                                 In  segment CONST, align 2
   \   tTOSSeqRuleType const __near DLKInputData[1]
   \                     DLKInputData:
   \   0000   ........       DW TOSSeqTrueEval, DLKInputDataManagement
   \   0004   FF00           DB 255, 0
    237          
    238          //--------------------------------------------------------------------------
    239          // Local constants
    240          //
    241          //  #define cConstantName   ((tType) ConstantValue)
    242          //--------------------------------------------------------------------------
    243          
    244          //Constants to define commands, posible values of: CommandRequest
    245          #define cNothingRequested                   ((tCommandRequested)0U)   
    246          #define cRfLockAllDoors                     ((tCommandRequested)1U) //Rf
    247          #define cRfUnlockAllDoors                   ((tCommandRequested)2U) //Rf
    248          #define cRfUnlockDriverDoor                 ((tCommandRequested)3U) //Rf
    249          #define cCDLUnlock                          ((tCommandRequested)4U) //CDL 
    250          #define cCDLLock                            ((tCommandRequested)5U) //CDL
    251          #define cCrashUnlock                        ((tCommandRequested)6U) //Crash
    252          #define cLockWithSpeed                      ((tCommandRequested)7U) //LWS
    253          #define cAutoRelock                         ((tCommandRequested)8U) //AutoRelock
    254          
    255          //Constants to define commands, possible values of: LEDCommandRequest
    256          #define cLEDOffRequested                   ((U8)0U)   
    257          #define cLEDOnRequested                    ((U8)1U)   
    258          #define cLEDOneMinOnRequested              ((U8)2U)   
    259          
    260          
    261          #define cRelayRestPosition                  ((U8)0x00U)
    262          #define cLockAll                            ((U8)0x01U)
    263          #define cUnlockAll                          ((U8)0x02U)
    264          #define cUnlockDriverDoor                   ((U8)0x03U) 
    265          
    266          #define cNbLWSOpenCloseDoor                 ((U8)5U) // 5th time door is opened
    267          #define cCDLDebounceTimeOut                 ((tTOSTempo)    40U) // 40ms  prsFS_DLK-474                                        
    268          #define cLWSActivationTimeOut               ((tTOSTempo)  4000U) // 4s      
    269          #define cLockWithSpeedTimeOut               ((tTOSTempo)  1000U) // 1s      
    270          #define cDebounceTimeOut                    ((tTOSTempo)    10) // 10ms
    271          
    272          #define cSDOTimeOut \
    273              ((tTOSTempo)(1000U * \
    274                (u8EEP_TPS_OUVPORTEOld = mDATRead(U8Bit, NEEP_TPS_OUVPORTE, Default)))) // step 1000ms according to CLR53
    275          
    276          #define cMotorActivationTimeOut             \
    277          ( (tTOSTempo) (10U*  \
    278              (u8EEP_TPS_COM_MOTEUROld = mDATRead(U8Bit, NEEP_TPS_COM_MOTEUR, Default))) ) //unit:10ms
    279          #define cAutoRelockTimeOut                  \
    280          ( (tTOSTempo) (1000U* \
    281              (u8EEP_TIMER_RECONDA_AUTOOld = mDATRead(U8Bit, NEEP_TIMER_RECONDA_AUTO, Default))) ) //unit:1sec
    282          
    283          
    284          #define cLedActivationTimeOut  ((tTOSTempo)  60000U) //1min
    285          
    286          #define cSevereAbuseTimeOutShort \
    287              (tTOSTempo)(500U * (u8EEP_TPS_REFShort = mDATRead(U8Bit, NEEP_TPS_REF, Default)))
    288          #define cSevereAbuseTimeOutLong  \
    289              (tTOSTempo)(2 * (500U * (u8EEP_TPS_REFLong = mDATRead(U8Bit, NEEP_TPS_REF, Default))))
    290          
    291          // Protection constant
    292          #define cMaxU8                      ((U8) 0xFFU)
    293          #define cImmoEcmTemporization       (mTOSConvMsInTimerTick((U32)50UL)) // 50ms
    294          #define cEcmTemporization           (mTOSConvMsInTimerTick((U32)10UL)) // 10ms
    295          
    296          //--------------------------------------------------------------------------
    297          // Local macros
    298          //
    299          // #define mMacroName   (MacroDefinition)
    300          //--------------------------------------------------------------------------
    301          
    302          #define mSet(Type,DataName)                                       \
    303          (DLK ## Type ## Status.BitField.## DataName = cTrue)
    304          
    305          #define mReset(Type,DataName)                                     \
    306          (DLK ## Type ## Status.BitField.## DataName = cFalse)
    307          
    308          #define mRead(Type,DataName)                                      \
    309          (DLK ## Type ## Status.BitField.## DataName)
    310          
    311          #define mReadMotorActivationTimeoutTicks() \
    312              (MotorActivationTimeoutTicks = \
    313                  (u8EEP_TPS_COM_MOTEUROld == mDATRead(U8Bit, NEEP_TPS_COM_MOTEUR, Default)) ? \
    314                     MotorActivationTimeoutTicks \
    315                  :  mTOSConvMsInTimerTick(cMotorActivationTimeOut))
    316          
    317          #define mReadAutoRelockTimeOutTicks() \
    318              (AutoRelockTimeOutTicks = \
    319                  (u8EEP_TIMER_RECONDA_AUTOOld == mDATRead(U8Bit, NEEP_TIMER_RECONDA_AUTO, Default)) ? \
    320                     AutoRelockTimeOutTicks \
    321                  :  mTOSConvMsInTimerTick(cAutoRelockTimeOut))
    322          
    323          #define mReadSevereAbuseTimeOutShortTicks() \
    324              (SevereAbuseTimeOutShortTicks = \
    325                  (u8EEP_TPS_REFShort == mDATRead(U8Bit, NEEP_TPS_REF, Default) ) ? \
    326                     SevereAbuseTimeOutShortTicks \
    327                  :  mTOSConvMsInTimerTick(cSevereAbuseTimeOutShort) )
    328          
    329          #define mReadSevereAbuseTimeOutLongTicks() \
    330              (SevereAbuseTimeOutLongTicks = \
    331                  (u8EEP_TPS_REFLong == mDATRead(U8Bit, NEEP_TPS_REF, Default) ) ? \
    332                     SevereAbuseTimeOutLongTicks \
    333                  :  mTOSConvMsInTimerTick(cSevereAbuseTimeOutLong) )
    334          
    335          #define mReadSDOTimeOutTicks() \
    336              (SDOTimeOutTicks = \
    337                  (u8EEP_TPS_OUVPORTEOld == mDATRead(U8Bit, NEEP_TPS_OUVPORTE, Default)) ? \
    338                    SDOTimeOutTicks \
    339                  : mTOSConvMsInTimerTick(cSDOTimeOut) )
    340          
    341          //--------------------------------------------------------------------------
    342          // Local types
    343          //
    344          //  struct  sStructureName { ... };
    345          //  union   uUnionName { ... };
    346          //  enum    eEnumerationName { ... };
    347          //  typedef Expression tTypeName;
    348          //--------------------------------------------------------------------------
    349          
    350          typedef union DLKControlUnion
    351          {
    352              U32 DLKControlFlags;
    353              struct
    354              {
    355                  U1 AllDoorsAreClosed                :1;       // 1
    356                  U1 KeyIsAuthenticated               :1;       // 2
    357                  U1 MotorsAreInOperation             :1;       // 3
    358                  U1 LWSNewConfirmationRequested      :1;       // 4 
    359                  U1 CDLButtonIsAuthorized            :1;       // 5 
    360                  U1 NewCommandToBeDone               :1;       // 6 
    361                  U1 CDLDebounceTimerIsLock           :1;       // 7 
    362                  U1 AutoRelockIsEnabled              :1;       // 8 
    363                  U1 CDLButtonIsPressed               :1;       // 9
    364                  U1 CDLButtonIsLock                  :1;       // 10
    365                  U1 Rising_DOOR_UNLOCK_LOCK_SW       :1;       // 11
    366                  U1 Rising_DOOR_LOCK_SW              :1;       // 12
    367                  U1 Falling_FR_DOORS_SW_LAP_DLK      :1;       // 13
    368                  U1 Falling_RR_DOORS_SW_LAP_DLK      :1;       // 14
    369                  U1 LWSMustLockOverThreshold         :1;       // 15
    370                  U1 LWSLockedWithOpenDoor            :1;       // 16
    371                  U1 AirBagMalFunctionDetected        :1;       // 17
    372                  U1 LWSForbiddenByAirBagMalFunction  :1;       // 18
    373                  U1 LWSWithOpenDoorEnabled           :1;       // 19
    374                  U1 Rising_PWR_IGN_LAP_DLK           :1;       // 20
    375                  U1 Changing_FR_DOORS_SW_LAP_DLK     :1;       // 21
    376                  U1 Changing_RR_DOORS_SW_LAP_DLK     :1;       // 22
    377                  U1 Rising_FR_DOORS_SW_LAP_DLK       :1;       // 23
    378                  U1 LWSSpeedConditionsAreMet         :1;       // 24
    379                  U1 WaitLongSevereAbuseTimeOut       :1;       // 25
    380                  U1 LastRFActionIsUnlock             :1;       // 26  
    381                  U1 LWSForbiddenAfterCrash           :1;       // 27  
    382                  U1 CarSecure                        :1;       // 28  
    383                  U1 SafetyUnlockAllowed              :1;       // 29  
    384                  U1 CDLButtonIsEnabled               :1;       // 30
    385              } BitField;
    386          } structDLKControlFlag;
    387          
    388          typedef union DLKTimerControlUnion
    389          {
    390              U8 DLKTimerControlFlags;
    391              struct
    392              {
    393                  U1 AutoRelockTimerIsArmed           :1;       // 1
    394                  U1 VehiculeHasBeenMovingTimerIsArmed:1;       // 2
    395                  U1 CDLDebounceTimerIsStarted        :1;       // 3 
    396                  U1 LWSActivationTimerIsStarted      :1;       // 4 
    397                  U1 LWSDeativationTimerIsStarted     :1;       // 5 
    398                  U1 LockWithSpeedTimerIsArmed        :1;       // 6
    399                  U1 LedActivationTimerIsStarted      :1;       // 7
    400                  U1 AbuseTimerIsStarted              :1;       // 8
    401                  U1 SDOTimerIsStarted                :1;       // 9
    402              } BitField;
    403          
    404          } structDLKTimerControlFlag;
    405          
    406          
    407          //Same position as constants to define commands, posible values of: CommandRequest
    408          typedef union DLKArbitrationUnion
    409          {
    410              U8 DLKArbitrationFlags;
    411              struct
    412              {
    413                  U1 CDLLock                           :1;        // 1   
    414                  U1 CDLUnlock                         :1;        // 2   
    415                  U1 RfLockAllDoors                    :1;        // 3   
    416                  U1 RfUnlockAllDoors                  :1;        // 4  
    417                  U1 RfUnlockDriverDoor                :1;        // 5   
    418                  U1 CrashUnlock                       :1;        // 6   
    419                  U1 LockWithSpeed                     :1;        // 7   
    420                  U1 AutoRelock                        :1;        // 8    
    421              } BitField;
    422          } structDLKArbitrationFlag;
    423          
    424          
    425          typedef enum
    426          {
    427              cOutputStateDetection,
    428              cDefectDetection
    429          }tProtectionStateMachine;
    430          
    431          
    432          typedef U16 tCommandRequested;
    433          typedef U8  tLEDCommandRequested;
    434          
    435          //--------------------------------------------------------------------------
    436          // Local data
    437          //
    438          // static  tType   VariableName;
    439          // static  tType*  pVariableName; 
    440          //--------------------------------------------------------------------------

   \                                 In  segment NEAR_Z, align 2, align-sorted
    441          static structDLKControlFlag       DLKControlStatus;
   \                     DLKControlStatus:
   \   0000                  DS 4
   \   0004                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    442          static structDLKArbitrationFlag   DLKArbitrationStatus;
   \                     DLKArbitrationStatus:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    443          static structDLKTimerControlFlag  DLKTimerControlStatus;
   \                     DLKTimerControlStatus:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z
    444          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    445          static U8 NbLWSOpenCloseDoor; //counts number of open/close done until next Apc Off
   \                     NbLWSOpenCloseDoor:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    446          static U8 MotorPattern;
   \                     MotorPattern:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    447          static U8 MotorActionCounter;
   \                     MotorActionCounter:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    448          static U8 LEDCommandRequested;
   \                     LEDCommandRequested:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    449          

   \                                 In  segment NEAR_Z, align 2, align-sorted
    450          static tCommandRequested DLKLastCommandRequested; //Posible values: 0 to 16 (see #define above)
   \                     DLKLastCommandRequested:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    451          static tCommandRequested CommandRequested;        //Posible values: 0 to 16 (see #define above)
   \                     CommandRequested:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z
    452          

   \                                 In  segment NEAR_Z, align 2, align-sorted
    453          static tTOSTempo LockWithSpeedTime;
   \                     LockWithSpeedTime:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    454          static tTOSTempo SevereAbuseTime;
   \                     SevereAbuseTime:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    455          static tTOSTempo SevereAbuseTimeOut;
   \                     SevereAbuseTimeOut:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    456          static tTOSTempo DebounceTime;
   \                     DebounceTime:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    457          static tTOSTempo MotorActivationTime;
   \                     MotorActivationTime:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    458          static tTOSTempo AutoRelockTime;
   \                     AutoRelockTime:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    459          static tTOSTempo CDLDebounceTime;
   \                     CDLDebounceTime:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    460          static tTOSTempo LWSActivationTime;
   \                     LWSActivationTime:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    461          static tTOSTempo LedActivationTime;
   \                     LedActivationTime:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    462          static tTOSTempo VehiculeHasBeenMovingTime; //for diagnostic
   \                     VehiculeHasBeenMovingTime:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    463          static tTOSTempo SDOTimeOut;
   \                     SDOTimeOut:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z
    464          

   \                                 In  segment NEAR_Z, align 2, align-sorted
    465          static tTOSTempo AutoRelockTimeOutTicks;
   \                     AutoRelockTimeOutTicks:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    466          static U8        u8EEP_TIMER_RECONDA_AUTOOld;
   \                     u8EEP_TIMER_RECONDA_AUTOOld:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    467          static tTOSTempo MotorActivationTimeoutTicks;
   \                     MotorActivationTimeoutTicks:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    468          static U8        u8EEP_TPS_COM_MOTEUROld;
   \                     u8EEP_TPS_COM_MOTEUROld:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    469          static tTOSTempo SevereAbuseTimeOutShortTicks;
   \                     SevereAbuseTimeOutShortTicks:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    470          static U8        u8EEP_TPS_REFShort;
   \                     u8EEP_TPS_REFShort:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    471          static tTOSTempo SevereAbuseTimeOutLongTicks;
   \                     SevereAbuseTimeOutLongTicks:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    472          static U8        u8EEP_TPS_REFLong;
   \                     u8EEP_TPS_REFLong:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    473          static tTOSTempo SDOTimeOutTicks;
   \                     SDOTimeOutTicks:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    474          static U8        u8EEP_TPS_OUVPORTEOld;
   \                     u8EEP_TPS_OUVPORTEOld:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    475          
    476          // HW Protection

   \                                 In  segment NEAR_Z, align 1, align-sorted
    477          static BOOL                     bPWR_IGNOld;
   \                     bPWR_IGNOld:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    478          static tProtectionStateMachine  ProtectionState;
   \                     ProtectionState:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    479          static tTOSTimer                ImmoEcmProtection;
   \                     ImmoEcmProtection:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    480          static BOOL                     bLED_VERLOGStopped;
   \                     bLED_VERLOGStopped:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    481          
    482          //--------------------------------------------------------------------------
    483          // Constant local Data
    484          //
    485          // static const tType  VariableName;
    486          //--------------------------------------------------------------------------
    487          
    488          //--------------------------------------------------------------------------
    489          // Exported data
    490          //
    491          // tType   CMPVariableName;      (CMP: 3 characters to identify this component)
    492          // tType*  pCMPVariableName;     (CMP: 3 characters to identify this component)
    493          //--------------------------------------------------------------------------
    494          
    495          //--------------------------------------------------------------------------
    496          // Constant exported data
    497          //
    498          //  const tType   CMPVariableName;(CMP: 3 characters to identify this component)
    499          //--------------------------------------------------------------------------
    500          
    501          //--------------------------------------------------------------------------
    502          // Local function prototypes
    503          //
    504          //  static tTypeRetour FunctionName(tTypeArgument1 ArgumentName1, ... );
    505          //--------------------------------------------------------------------------
    506          static MEM_TYPE void DLKProtectionTask (void);
    507          static MEM_TYPE void SetVerlogLedDefect (void);
    508          static MEM_TYPE void SetDoorlockLedDefect (void);
    509          
    510          #ifdef X90_PROJECT    
    511          static MEM_TYPE void DLKInputDataManagement_Static(void);
    512          static MEM_TYPE void DLKCommandMotorRelays_Static(void);
    513          static MEM_TYPE void DLKOutputDataManagement_Static(void);
    514          static MEM_TYPE BOOL DLKCommandIsPending_Static(void);
    515          static MEM_TYPE void DLKInitialize_Static(void);
    516          static MEM_TYPE void DLKDeCommandMotorRelays_Static(void);
    517          static MEM_TYPE void DLKAirbagInformationManagement_Static(void);
    518          #endif
    519          
    520          /****************************************************************************
    521          *...........................................................................*
    522          *............................ LOCAL FUNCTIONS ..............................*
    523          *...........................................................................*
    524          ****************************************************************************/
    525          //--------------------------------------------------------------------------
    526          //  DESCRIPTION : DLKProtectionTask
    527          //
    528          //  PARAMETERS (Type,Name,Min,Max) :   none
    529          //  
    530          //  RETURN VALUE :   none
    531          //    
    532          //  DESIGN INFORMATION :   refer to Detailed Design Document
    533          //      
    534          //--------------------------------------------------------------------------

   \                                 In  segment BCODE, align 1, keep-with-next
    535          static MEM_TYPE void DLKProtectionTask (void)
   \                     DLKProtectionTask:
    536          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
    537              BOOL bIsTimerStartedL;
    538              BOOL bIsTimerElapsedL;
    539          
    540              if(     (cFalse != mDATRead(U1Bit, PWR_IGN, Default))
    541                  &&  (cFalse == bPWR_IGNOld)
    542                )
   \   0001   3103..17       BF        S:DATDinInputBuffers+6.0, ??DLKLeaveStartingStepState_Static_0
   \   0005   8E....         MOV       A,bPWR_IGNOld
   \   0008   4D00           CMP       A,#0
   \   000A   BD10           BNZ       ??DLKLeaveStartingStepState_Static_0
    543              {
    544                  mDATWrite(U1Bit, OPEN_DOOR_LEDProtection, 0, Default);
    545                  mDATWrite(U1Bit, DefDoorlockLedCC, 0, Default);
   \   000C   A100           MOV       A,#0
   \   000E   16....         MOVW      HL,#DATCmnData+11
   \   0011   97             MOV       [HL],A
    546          
    547                  mDATWrite(U1Bit, VERLOG_LEDProtection, 0, Default);
   \   0012   9E....         MOV       bVERLOG_LEDDirectProtected,A
   \   0015   D8..F3         AND       S:DATPouHardMaskBuffer,#243
    548                  mDATWrite(U1Bit, DefVerlogLedCC, 0, Default);
   \   0018   16....         MOVW      HL,#DATCmnData+10
   \   001B   97             MOV       [HL],A
    549              }
    550          
    551              switch(ProtectionState)
   \                     ??DLKLeaveStartingStepState_Static_0:
   \   001C   8E....         MOV       A,ProtectionState
   \   001F   4D00           CMP       A,#0
   \   0021   AD06           BZ        ??DLKLeaveStartingStepState_Static_1
   \   0023   51             DEC       A
   \   0024   AD65           BZ        ??DLKLeaveStartingStepState_Static_2
   \   0026   9B....         BR        N:??DLKLeaveStartingStepState_Static_3
    552              {
    553                  case cOutputStateDetection:
    554          
    555                  // DO state actions
    556                  bIsTimerStartedL = TOSIsTimerStarted(&ImmoEcmProtection);
   \                     ??DLKLeaveStartingStepState_Static_1:
   \   0029   10....         MOVW      AX,#ImmoEcmProtection
   \   002C   9A....         CALL      TOSIsTimerStarted
   \   002F   74             MOV       E,A
    557                  if (cFalse != mDATRead(U1Bit, DIAG_DRIVER_ULQ_SCBat, Default))
   \   0030   02....         MOVW      AX,DATAnaBufferFromLDB+10
   \   0033   EAC700         CMPW      AX,#199
   \   0036   64             MOV       A,E
   \   0037   8D19           BC        ??DLKLeaveStartingStepState_Static_4
    558                  {
    559                      if(cFalse == bIsTimerStartedL)
   \   0039   4D00           CMP       A,#0
   \   003B   BD1C           BNZ       ??DLKLeaveStartingStepState_Static_5
    560                      {
    561                          if(     (cFalse != mDATRead(U1Bit, DATTrpOutputActive, Default))
    562                              ||  (cFalse == mDATRead(U1Bit, DI_VERLOG, Immediate))
    563                            )
   \   003D   8E....         MOV       A,u8DATTrpOutState
   \   0040   4D00           CMP       A,#0
   \   0042   BD03           BNZ       ??DLKLeaveStartingStepState_Static_6
   \   0044   8C..12         BT        S:DATDinInputBuffers+11.0, ??DLKLeaveStartingStepState_Static_5
    564                          {
    565                              TOSStartTimer(&ImmoEcmProtection);
   \                     ??DLKLeaveStartingStepState_Static_6:
   \   0047   10....         MOVW      AX,#ImmoEcmProtection
   \   004A   ..             CALLT     [__T_TOSStartTimer]
    566                              bLED_VERLOGStopped=0;
   \   004B   A100           MOV       A,#0
   \   004D   9E....         MOV       bLED_VERLOGStopped,A
   \   0050   FA07           BR        ??DLKLeaveStartingStepState_Static_5
    567                          }
    568                      }
    569                  }
    570                  else
    571                  {
    572                      if(cTrue == bIsTimerStartedL)
   \                     ??DLKLeaveStartingStepState_Static_4:
   \   0052   51             DEC       A
   \   0053   BD04           BNZ       ??DLKLeaveStartingStepState_Static_5
    573                      {
    574                          TOSStopTimer(&ImmoEcmProtection);
   \   0055   10....         MOVW      AX,#ImmoEcmProtection
   \   0058   ..             CALLT     [__T_TOSStopTimer]
    575                      }
    576                  }
    577          
    578                  bIsTimerStartedL = TOSIsTimerStarted(&ImmoEcmProtection);
   \                     ??DLKLeaveStartingStepState_Static_5:
   \   0059   10....         MOVW      AX,#ImmoEcmProtection
   \   005C   9A....         CALL      TOSIsTimerStarted
   \   005F   74             MOV       E,A
    579                  
    580                  if (mDATRead(U1Bit, PWR_IGN, Default) != cFalse)
   \   0060   10....         MOVW      AX,#ImmoEcmProtection
   \   0063   3103..06       BF        S:DATDinInputBuffers+6.0, ??DLKLeaveStartingStepState_Static_7
    581                  {
    582                      bIsTimerElapsedL = TOSIsTimerElapsed(&ImmoEcmProtection, cImmoEcmTemporization);
   \   0067   120500         MOVW      BC,#5
   \   006A   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   006B   FA04           BR        ??DLKLeaveStartingStepState_Static_8
    583                  }
    584                  else
    585                  {
    586                      // only VERLOG line can be active
    587                      bIsTimerElapsedL = TOSIsTimerElapsed(&ImmoEcmProtection, cEcmTemporization);
   \                     ??DLKLeaveStartingStepState_Static_7:
   \   006D   120100         MOVW      BC,#1
   \   0070   ..             CALLT     [__T_TOSIsTimerElapsed]
    588                  }
    589                  
    590                  // Exit state conditions
    591                  if(     ((cFalse != bIsTimerElapsedL) && (cFalse != bIsTimerStartedL))
    592                      ||  (   (cFalse != mDATRead(U1Bit, DIAG_DRIVER_ULQ_SCBat, Default))
    593                           && ((cFalse == bIsTimerStartedL))
    594                          )
    595                    )
   \                     ??DLKLeaveStartingStepState_Static_8:
   \   0071   4D00           CMP       A,#0
   \   0073   AD05           BZ        ??DLKLeaveStartingStepState_Static_9
   \   0075   64             MOV       A,E
   \   0076   4D00           CMP       A,#0
   \   0078   BD0D           BNZ       ??DLKLeaveStartingStepState_Static_10
   \                     ??DLKLeaveStartingStepState_Static_9:
   \   007A   02....         MOVW      AX,DATAnaBufferFromLDB+10
   \   007D   EAC700         CMPW      AX,#199
   \   0080   8D76           BC        ??DLKLeaveStartingStepState_Static_3
   \   0082   64             MOV       A,E
   \   0083   4D00           CMP       A,#0
   \   0085   BD71           BNZ       ??DLKLeaveStartingStepState_Static_3
    596                  {
    597                      ProtectionState = cDefectDetection;
   \                     ??DLKLeaveStartingStepState_Static_10:
   \   0087   A101           MOV       A,#1
   \   0089   FA6A           BR        ??DLKLeaveStartingStepState_Static_11
    598                  }
    599                  break;
    600          
    601                  case cDefectDetection:
    602          
    603                  // DO state actions
    604                  if(cFalse != mDATRead(U1Bit, VERLOG_LED, Immediate))
   \                     ??DLKLeaveStartingStepState_Static_2:
   \   008B   16....         MOVW      HL,#DATDouOutputBuffer
   \   008E   31A729         BF        [HL].2, ??DLKLeaveStartingStepState_Static_12
    605                  {
    606                      if(cFalse != mDATRead(U1Bit, DIAG_DRIVER_ULQ_SCBat, Default))
   \   0091   02....         MOVW      AX,DATAnaBufferFromLDB+10
   \   0094   EAC700         CMPW      AX,#199
   \   0097   8D5F           BC        ??DLKLeaveStartingStepState_Static_3
    607                      {
    608                          if (1 == mDATRead(U1Bit, OPEN_DOOR_LED, Immediate))
   \   0099   31B711         BF        [HL].3, ??DLKLeaveStartingStepState_Static_13
    609                          {
    610                              // DOOR_LOCK_LED is active: need to deactivate VERLOG LED
    611                              mDATWrite(U1Bit, VERLOG_LED, 0, Default);
   \   009C   A10A           MOV       A,#10
   \   009E   2B..           CLR1      S:DATPouSoftOutputBuffer.2
    612                              mDATWrite(U1Bit, VERLOG_LEDDirect, 0, Default);
   \   00A0   16....         MOVW      HL,#LWRD(LDBDouControl)
   \   00A3   A4..           MOV       E,#BYTE3(LDBDouControl)
   \   00A5   ..             CALLT     [__T_?FAR_CALL_L07]
    613                              bLED_VERLOGStopped=1;
   \   00A6   A101           MOV       A,#1
   \   00A8   9E....         MOV       bLED_VERLOGStopped,A
   \   00AB   FA4B           BR        ??DLKLeaveStartingStepState_Static_3
    614                          }
    615                          else
    616                          {
    617                              // Only verlog LED is active and there is SC:
    618                              bLED_VERLOGStopped = 0;
   \                     ??DLKLeaveStartingStepState_Static_13:
   \   00AD   A100           MOV       A,#0
   \   00AF   9E....         MOV       bLED_VERLOGStopped,A
    619                              SetVerlogLedDefect();
   \   00B2   16....         MOVW      HL,#LWRD(SetVerlogLedDefect)
   \   00B5   A4..           MOV       E,#BYTE3(SetVerlogLedDefect)
   \   00B7   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   00B8   FA3E           BR        ??DLKLeaveStartingStepState_Static_3
    620                          }
    621                      }
    622                      else
    623                      {
    624                          // no SC detected
    625                      }
    626                  }
    627                  else if(    (1 == mDATRead(U1Bit, OPEN_DOOR_LED, Immediate))
    628                           && (cFalse == mDATRead(U1Bit, AlaCommunicationIsRunning, Default))    
    629                         )
   \                     ??DLKLeaveStartingStepState_Static_12:
   \   00BA   31B73B         BF        [HL].3, ??DLKLeaveStartingStepState_Static_3
   \   00BD   8E....         MOV       A,bDATAlaCommunicationIsRunning
   \   00C0   4D00           CMP       A,#0
   \   00C2   BD34           BNZ       ??DLKLeaveStartingStepState_Static_3
    630                  {
    631                      if (mDATRead(U1Bit, DIAG_DRIVER_ULQ_SCBat, Default) != cFalse)
   \   00C4   02....         MOVW      AX,DATAnaBufferFromLDB+10
   \   00C7   EAC700         CMPW      AX,#199
   \   00CA   8D0D           BC        ??DLKLeaveStartingStepState_Static_14
    632                      {
    633                          bLED_VERLOGStopped = 0;
   \   00CC   A100           MOV       A,#0
   \   00CE   9E....         MOV       bLED_VERLOGStopped,A
    634                          SetDoorlockLedDefect();
   \   00D1   16....         MOVW      HL,#LWRD(SetDoorlockLedDefect)
   \   00D4   A4..           MOV       E,#BYTE3(SetDoorlockLedDefect)
   \                     ??DLKProtectionTask_0:
   \   00D6   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   00D7   FA12           BR        ??DLKLeaveStartingStepState_Static_15
    635                      }
    636                      else if(1 == bLED_VERLOGStopped)
   \                     ??DLKLeaveStartingStepState_Static_14:
   \   00D9   8E....         MOV       A,bLED_VERLOGStopped
   \   00DC   51             DEC       A
   \   00DD   A100           MOV       A,#0
   \   00DF   9E....         MOV       bLED_VERLOGStopped,A
   \   00E2   BD07           BNZ       ??DLKLeaveStartingStepState_Static_15
    637                      {
    638                          bLED_VERLOGStopped = 0;
    639                          SetVerlogLedDefect();
   \   00E4   16....         MOVW      HL,#LWRD(SetVerlogLedDefect)
   \   00E7   A4..           MOV       E,#BYTE3(SetVerlogLedDefect)
   \   00E9   FAEB           BR        ??DLKProtectionTask_0
    640                      }
    641                      else
    642                      {
    643                          bLED_VERLOGStopped = 0;
    644                      }
    645          
    646                      // Exit state conditions
    647                      if (cFalse == mDATRead(U1Bit, DIAG_DRIVER_ULQ_SCBat, Default))
   \                     ??DLKLeaveStartingStepState_Static_15:
   \   00EB   02....         MOVW      AX,DATAnaBufferFromLDB+10
   \   00EE   EAC700         CMPW      AX,#199
   \   00F1   9D05           BNC       ??DLKLeaveStartingStepState_Static_3
    648                      {
    649                          ProtectionState = cOutputStateDetection;
   \   00F3   A100           MOV       A,#0
   \                     ??DLKLeaveStartingStepState_Static_11:
   \   00F5   9E....         MOV       ProtectionState,A
    650                      }
    651                  }
    652                  else
    653                  {
    654                      // outputs not activated or already protected
    655                  }
    656          
    657                  break;
    658                  
    659                  //CCOV: adzhelp: Cannot be covered in normal operating conditions,
    660                  default:
    661                  
    662                  mLIBassert(cFalse);
    663                  break;
    664              }
    665          
    666              bPWR_IGNOld = mDATRead(U1Bit, PWR_IGN, Default);
   \                     ??DLKLeaveStartingStepState_Static_3:
   \   00F8   F0..           MOV       A,S:DATDinInputBuffers+6
   \   00FA   5D01           AND       A,#1
   \   00FC   9E....         MOV       bPWR_IGNOld,A
    667          }
   \   00FF   B2             POP       BC
   \   0100   AF             RET       
   \   0101                  REQUIRE ?CL78K_V4_6_L00
    668          
    669          //--------------------------------------------------------------------------
    670          //  DESCRIPTION : SetVerlogLedDefect
    671          //
    672          //  PARAMETERS (Type,Name,Min,Max) :   none
    673          //  
    674          //  RETURN VALUE :   none
    675          //    
    676          //  DESIGN INFORMATION :   refer to Detailed Design Document
    677          //--------------------------------------------------------------------------

   \                                 In  segment BCODE, align 1, keep-with-next
    678          static MEM_TYPE void SetVerlogLedDefect (void)
   \                     SetVerlogLedDefect:
    679          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    680              U8 u8TempL;
    681          
    682              mDATWrite(U1Bit, DefVerlogLedCC, 1, Default);
   \   0000   A101           MOV       A,#1
   \   0002   16....         MOVW      HL,#DATCmnData+10
   \   0005   97             MOV       [HL],A
    683              mDATWrite(U1Bit, VERLOG_LEDProtection, 1, Default);                
   \   0006   9E....         MOV       bVERLOG_LEDDirectProtected,A
   \   0009   101000         MOVW      AX,#16
   \   000C   2A..           SET1      S:DATPouHardMaskBuffer.2
   \   000E   9A....         CALL      TOSActivateTask
    684              mDATWrite(U1Bit, EEP_DefVerlogLedCC, 1, Default);
   \   0011   16....         MOVW      HL,#DATDbkMirrors+21
   \   0014   318607         BT        [HL].0, ??DLKLeaveStartingStepState_Static_16
   \   0017   A100           MOV       A,#0
   \   0019   7182           SET1      [HL].0
   \   001B   9A....         CALL      DATDbkStartUpdate
    685              
    686              u8TempL = mDATRead(U8Bit, EEP_CDVerlogLed, Default);
   \                     ??DLKLeaveStartingStepState_Static_16:
   \   001E   8E....         MOV       A,DATDbkMirrors+16
    687              if(u8TempL < cMaxU8)
   \   0021   41             INC       A
   \   0022   AD08           BZ        ??DLKLeaveStartingStepState_Static_17
    688              {
    689                  u8TempL ++;
    690                  mDATWrite(U8Bit, EEP_CDVerlogLed, u8TempL, Default);
   \   0024   9E....         MOV       DATDbkMirrors+16,A
   \   0027   A100           MOV       A,#0
   \   0029   9A....         CALL      DATDbkStartUpdate
    691              }
    692          }
   \                     ??DLKLeaveStartingStepState_Static_17:
   \   002C   AF             RET       
   \   002D                  REQUIRE ?CL78K_V4_6_L00
    693          
    694          //--------------------------------------------------------------------------
    695          //  DESCRIPTION : SetDoorlockLedDefect
    696          //
    697          //  PARAMETERS (Type,Name,Min,Max) :   none
    698          //  
    699          //  RETURN VALUE :   none
    700          //    
    701          //  DESIGN INFORMATION :   refer to Detailed Design Document
    702          //--------------------------------------------------------------------------

   \                                 In  segment BCODE, align 1, keep-with-next
    703          static MEM_TYPE void SetDoorlockLedDefect (void)
   \                     SetDoorlockLedDefect:
    704          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    705              U8 u8TempL;
    706              
    707              mDATWrite(U1Bit, DefDoorlockLedCC, 1, Default);
   \   0000   A101           MOV       A,#1
   \   0002   16....         MOVW      HL,#DATCmnData+11
   \   0005   97             MOV       [HL],A
    708              mDATWrite(U1Bit, OPEN_DOOR_LEDProtection, 1, Default);
   \   0006   101000         MOVW      AX,#16
   \   0009   3A..           SET1      S:DATPouHardMaskBuffer.3
   \   000B   9A....         CALL      TOSActivateTask
    709              mDATWrite(U1Bit, EEP_DefDoorlockLedCC, 1, Default);
   \   000E   16....         MOVW      HL,#DATDbkMirrors+20
   \   0011   31F607         BT        [HL].7, ??DLKLeaveStartingStepState_Static_18
   \   0014   A100           MOV       A,#0
   \   0016   71F2           SET1      [HL].7
   \   0018   9A....         CALL      DATDbkStartUpdate
    710              // Enter in IgnOff State
    711              u8TempL = mDATRead(U8Bit, EEP_CDDoorLockLed, Default);
   \                     ??DLKLeaveStartingStepState_Static_18:
   \   001B   8E....         MOV       A,DATDbkMirrors+7
    712              if(u8TempL < cMaxU8)
   \   001E   41             INC       A
   \   001F   AD08           BZ        ??DLKLeaveStartingStepState_Static_19
    713              {
    714                  u8TempL ++;
    715                  mDATWrite(U8Bit, EEP_CDDoorLockLed, u8TempL, Default);
   \   0021   9E....         MOV       DATDbkMirrors+7,A
   \   0024   A100           MOV       A,#0
   \   0026   9A....         CALL      DATDbkStartUpdate
    716              }
    717          }
   \                     ??DLKLeaveStartingStepState_Static_19:
   \   0029   AF             RET       
   \   002A                  REQUIRE ?CL78K_V4_6_L00
    718          
    719          /* [LOCAL_FUNCTIONS_END] */
    720          
    721          
    722          /****************************************************************************
    723          *...........................................................................*
    724          *........................... EXPORTED FUNCTIONS.............................*
    725          *...........................................................................*
    726          ****************************************************************************/
    727          
    728          //--------------------------------------------------------------------------
    729          //  DESCRIPTION : DRLInputDataManagement
    730          //
    731          //  PARAMETERS (Type,Name,Min,Max) :   none
    732          //  
    733          //  RETURN VALUE :   none
    734          //    
    735          //  DESIGN INFORMATION :   refer to Detailed Design Document
    736          //      
    737          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
    738          void DLKInputDataManagement(void)
   \                     DLKInputDataManagement:
    739          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    740          #ifdef X90_PROJECT    
    741              DLKInputDataManagement_Static();
   \   0001   16....         MOVW      HL,#LWRD(DLKInputDataManagement_Static)
   \   0004   A4..           MOV       E,#BYTE3(DLKInputDataManagement_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    742          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    743          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    744          static MEM_TYPE void DLKInputDataManagement_Static(void)
   \                     DLKInputDataManagement_Static:
    745          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   101300         MOVW      AX,#19
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
    746          #endif
    747              BOOL bTimerElapsedL;
    748              tTOSTempo TimeoutTicksL;
    749          
    750              if (TOSReadSignal(cTOSSignalRising_PWR_IGN_LAP_DLK))
   \   0004   ..             CALLT     [__T_TOSReadSignal]
   \   0005   4D00           CMP       A,#0
   \   0007   AD05           BZ        ??DLKLeaveStartingStepState_Static_20
    751              {
    752                  mSet(Control, Rising_PWR_IGN_LAP_DLK);
   \   0009   16....         MOVW      HL,#DLKControlStatus+2
   \   000C   71B2           SET1      [HL].3
    753              }
    754              if (TOSReadSignal(cTOSSignalRising_DOOR_UNLOCK_LOCK_SW_LAP_DLK))
   \                     ??DLKLeaveStartingStepState_Static_20:
   \   000E   101C00         MOVW      AX,#28
   \   0011   ..             CALLT     [__T_TOSReadSignal]
   \   0012   4D00           CMP       A,#0
   \   0014   AD05           BZ        ??DLKLeaveStartingStepState_Static_21
    755              {
    756                  mSet(Control, Rising_DOOR_UNLOCK_LOCK_SW);
   \   0016   16....         MOVW      HL,#DLKControlStatus+1
   \   0019   71A2           SET1      [HL].2
    757              }
    758              
    759              if (TOSReadSignal(cTOSSignalRising_DOOR_LOCK_SW_LAP_DLK))
   \                     ??DLKLeaveStartingStepState_Static_21:
   \   001B   101B00         MOVW      AX,#27
   \   001E   ..             CALLT     [__T_TOSReadSignal]
   \   001F   4D00           CMP       A,#0
   \   0021   AD05           BZ        ??DLKLeaveStartingStepState_Static_22
    760              {
    761                  mSet(Control, Rising_DOOR_LOCK_SW);
   \   0023   16....         MOVW      HL,#DLKControlStatus+1
   \   0026   71B2           SET1      [HL].3
    762              }         
    763              
    764              if (TOSReadSignal(cTOSSignalFalling_FR_DOORS_SW_LAP_DLK))
   \                     ??DLKLeaveStartingStepState_Static_22:
   \   0028   101600         MOVW      AX,#22
   \   002B   ..             CALLT     [__T_TOSReadSignal]
   \   002C   4D00           CMP       A,#0
   \   002E   AD05           BZ        ??DLKLeaveStartingStepState_Static_23
    765              {
    766                  mSet(Control, Falling_FR_DOORS_SW_LAP_DLK);
   \   0030   16....         MOVW      HL,#DLKControlStatus+1
   \   0033   71C2           SET1      [HL].4
    767              }
    768          
    769              
    770              if (TOSReadSignal(cTOSSignalRising_FR_DOORS_SW_LAP_DLK))
   \                     ??DLKLeaveStartingStepState_Static_23:
   \   0035   101500         MOVW      AX,#21
   \   0038   ..             CALLT     [__T_TOSReadSignal]
   \   0039   4D00           CMP       A,#0
   \   003B   AD05           BZ        ??DLKLeaveStartingStepState_Static_24
    771              {
    772                  mSet(Control, Rising_FR_DOORS_SW_LAP_DLK);
   \   003D   16....         MOVW      HL,#DLKControlStatus+2
   \   0040   71E2           SET1      [HL].6
    773              }
    774              
    775              if (TOSReadSignal(cTOSSignalFalling_RR_DOORS_SW_LAP_DLK))
   \                     ??DLKLeaveStartingStepState_Static_24:
   \   0042   101900         MOVW      AX,#25
   \   0045   ..             CALLT     [__T_TOSReadSignal]
   \   0046   4D00           CMP       A,#0
   \   0048   AD05           BZ        ??DLKLeaveStartingStepState_Static_25
    776              {
    777                  mSet(Control, Falling_RR_DOORS_SW_LAP_DLK);
   \   004A   16....         MOVW      HL,#DLKControlStatus+1
   \   004D   71D2           SET1      [HL].5
    778              }
    779              
    780              if (TOSReadSignal(cTOSSignalChanging_FR_DOORS_SW_LAP_DLK))
   \                     ??DLKLeaveStartingStepState_Static_25:
   \   004F   101700         MOVW      AX,#23
   \   0052   ..             CALLT     [__T_TOSReadSignal]
   \   0053   4D00           CMP       A,#0
   \   0055   AD05           BZ        ??DLKLeaveStartingStepState_Static_26
    781              {
    782                  mSet(Control, Changing_FR_DOORS_SW_LAP_DLK);
   \   0057   16....         MOVW      HL,#DLKControlStatus+2
   \   005A   71C2           SET1      [HL].4
    783              }
    784              
    785              if (TOSReadSignal(cTOSSignalChanging_RR_DOORS_SW_LAP_DLK))
   \                     ??DLKLeaveStartingStepState_Static_26:
   \   005C   101A00         MOVW      AX,#26
   \   005F   ..             CALLT     [__T_TOSReadSignal]
   \   0060   4D00           CMP       A,#0
   \   0062   AD05           BZ        ??DLKLeaveStartingStepState_Static_27
    786              {
    787                  mSet(Control, Changing_RR_DOORS_SW_LAP_DLK);
   \   0064   16....         MOVW      HL,#DLKControlStatus+2
   \   0067   71D2           SET1      [HL].5
    788              }
    789              
    790              //Update flag AllDoorsAreClosed
    791              if (   (mDATRead(U1Bit, FR_DOORS_SW, Default) == cFalse)
    792                  && (mDATRead(U1Bit, RR_DOORS_SW, Default) == cFalse)
    793                  )
   \                     ??DLKLeaveStartingStepState_Static_27:
   \   0069   BC..0A         BT        S:DATDinInputBuffers+6.3, ??DLKLeaveStartingStepState_Static_28
   \   006C   8C..07         BT        S:DATDinInputBuffers+8.0, ??DLKLeaveStartingStepState_Static_28
    794              {
    795                  mSet(Control, AllDoorsAreClosed);
   \   006F   16....         MOVW      HL,#DLKControlStatus
   \   0072   7182           SET1      [HL].0
   \   0074   FA05           BR        ??DLKLeaveStartingStepState_Static_29
    796              }
    797              else
    798              {
    799                  mReset(Control, AllDoorsAreClosed);
   \                     ??DLKLeaveStartingStepState_Static_28:
   \   0076   16....         MOVW      HL,#DLKControlStatus
   \   0079   7183           CLR1      [HL].0
    800              }
    801              
    802              //Update flags: KeyIsAuthenticated is reset when the ignition is turned off
    803              if (mDATRead(U1Bit, PWR_IGN, Default) == cFalse)
   \                     ??DLKLeaveStartingStepState_Static_29:
   \   007B   8C..08         BT        S:DATDinInputBuffers+6.0, ??DLKLeaveStartingStepState_Static_30
    804              { 
    805                  mReset(Control, KeyIsAuthenticated);
   \   007E   A100           MOV       A,#0
   \   0080   7193           CLR1      [HL].1
    806                  mDATWrite(U1Bit, VehiculeHasBeenMoving, cFalse, Default);
   \   0082   16....         MOVW      HL,#DATCmnData+27
   \   0085   97             MOV       [HL],A
    807              }
    808              else
    809              {
    810                  //nothing to do
    811              } 
    812              
    813              // prsFS_DLK-467
    814              if (mRead(Control, Rising_PWR_IGN_LAP_DLK) == cTrue)
   \                     ??DLKLeaveStartingStepState_Static_30:
   \   0086   16....         MOVW      HL,#DLKControlStatus+2
   \   0089   31B75A         BF        [HL].3, ??DLKLeaveStartingStepState_Static_31
    815              {
    816                  mReset(Control, LWSForbiddenAfterCrash); // prsFS_DLK-549 
   \   008C   86             INCW      HL
   \   008D   71A3           CLR1      [HL].2
    817                  mReset(Control, LWSForbiddenByAirBagMalFunction);  // prsFS_DLK-547
   \   008F   16....         MOVW      HL,#DLKControlStatus+2
   \   0092   7193           CLR1      [HL].1
    818                  mReset(Control, SafetyUnlockAllowed); // Cm007440
   \   0094   86             INCW      HL
   \   0095   71C3           CLR1      [HL].4
    819          
    820                  //****************************************************************************
    821                  // CDLButton failure management
    822                  //****************************************************************************
    823                  // prsFS_DLK-467, prsFS_DLK-468
    824                  if (mDATRead(U1Bit, EEP_CPE_IMPULS, Default) == cFalse) // CDL button with 3 positions 
   \   0097   16....         MOVW      HL,#DATDbkMirrors+26
   \   009A   319629         BT        [HL].1, ??DLKLeaveStartingStepState_Static_32
    825                  {
    826                      if (mDATRead(U1Bit, DOOR_LOCK_SW, Default) == cTrue)
   \   009D   3143..04       BF        S:DATDinInputBuffers+6.4, ??DLKLeaveStartingStepState_Static_33
    827                      {
    828                          mDATWrite(U1Bit, DefBtonCpeFer, cTrue, Default);
   \   00A1   A101           MOV       A,#1
   \   00A3   FA02           BR        ??DLKLeaveStartingStepState_Static_34
    829                      }
    830                      else
    831                      {
    832                          mDATWrite(U1Bit, DefBtonCpeFer, cFalse, Default);
   \                     ??DLKLeaveStartingStepState_Static_33:
   \   00A5   A100           MOV       A,#0
   \                     ??DLKLeaveStartingStepState_Static_34:
   \   00A7   16....         MOVW      HL,#DATCmnData+22
   \   00AA   97             MOV       [HL],A
    833                      }
    834          
    835                      if (mDATRead(U1Bit, DOOR_UNLOCK_SW, Default) == cTrue)
   \   00AB   3113..0B       BF        S:DATDinInputBuffers+8.1, ??DLKLeaveStartingStepState_Static_35
    836                      {
    837                          mDATWrite(U1Bit, DefBtonCpeOuv, cTrue, Default);
   \   00AF   A101           MOV       A,#1
   \   00B1   86             INCW      HL
   \                     ??DLKInputDataManagement_Static_0:
   \   00B2   97             MOV       [HL],A
    838                      }
    839                      else
    840                      {
    841                          mDATWrite(U1Bit, DefBtonCpeOuv, cFalse, Default);
    842                      }
    843                  }
    844                  else // CDL button with 2 positions
    845                  {
    846                      mDATWrite(U1Bit, DefBtonCpeOuv, cFalse, Default); // not used
    847          
    848                      if (mDATRead(U1Bit, DOOR_UNLOCK_SW, Default) == cTrue)
    849                      {
    850                          // although Unlock input is activated set 'Fer' defect
    851                          mDATWrite(U1Bit, DefBtonCpeFer, cTrue, Default);
    852                      }
    853                      else
    854                      {
    855                          mDATWrite(U1Bit, DefBtonCpeFer, cFalse, Default);
    856                      }
    857                  }
    858          
    859                  // CDL button Enable/disable - only on rising ignition
    860          
    861                  if (   (mDATRead(U1Bit, DefBtonCpeOuv, Default) == cTrue ) // prsFS_DLK-467          
    862                      || (mDATRead(U1Bit, DefBtonCpeFer, Default) == cTrue ) // prsFS_DLK-467         
    863                      )
    864                  {
    865                      mReset(Control, CDLButtonIsEnabled); //prsFS_DLK-826
   \                     ??DLKInputDataManagement_Static_1:
   \   00B3   16....         MOVW      HL,#DLKControlStatus+3
   \   00B6   71D3           CLR1      [HL].5
   \   00B8   FA26           BR        ??DLKLeaveStartingStepState_Static_36
    866                  }
   \                     ??DLKLeaveStartingStepState_Static_35:
   \   00BA   A100           MOV       A,#0
   \   00BC   86             INCW      HL
   \   00BD   97             MOV       [HL],A
   \   00BE   8E....         MOV       A,DATCmnData+22
   \   00C1   51             DEC       A
   \   00C2   BD17           BNZ       ??DLKLeaveStartingStepState_Static_37
   \   00C4   FAED           BR        ??DLKInputDataManagement_Static_1
   \                     ??DLKLeaveStartingStepState_Static_32:
   \   00C6   A100           MOV       A,#0
   \   00C8   16....         MOVW      HL,#DATCmnData+23
   \   00CB   97             MOV       [HL],A
   \   00CC   3113..07       BF        S:DATDinInputBuffers+8.1, ??DLKLeaveStartingStepState_Static_38
   \   00D0   A101           MOV       A,#1
   \   00D2   16....         MOVW      HL,#DATCmnData+22
   \   00D5   FADB           BR        ??DLKInputDataManagement_Static_0
   \                     ??DLKLeaveStartingStepState_Static_38:
   \   00D7   16....         MOVW      HL,#DATCmnData+22
   \   00DA   97             MOV       [HL],A
    867                  else
    868                  {
    869                      mSet(Control, CDLButtonIsEnabled); // prsFS_DLK-468
   \                     ??DLKLeaveStartingStepState_Static_37:
   \   00DB   16....         MOVW      HL,#DLKControlStatus+3
   \   00DE   71D2           SET1      [HL].5
    870                  }
    871          
    872                  // CLR #190
    873                  mDATWrite(U1Bit, DefAirbag, cFalse, Default); // no requirement yet
   \                     ??DLKLeaveStartingStepState_Static_36:
   \   00E0   A100           MOV       A,#0
   \   00E2   16....         MOVW      HL,#DATCmnData+17
   \   00E5   97             MOV       [HL],A
    874              }
    875              
    876              //****************************************************************************
    877              // AutoRelock
    878              //****************************************************************************
    879              if (mDATRead(U1Bit, EEP_CONDATMPO, Default) == cTrue) //AutoRelock function is enabled
   \                     ??DLKLeaveStartingStepState_Static_31:
   \   00E6   16....         MOVW      HL,#DATDbkMirrors+25
   \   00E9   318765         BF        [HL].0, ??DLKLeaveStartingStepState_Static_39
    880              {
    881                  //AutoRelock canceled prsFS_DLK-499
    882                  if (   (mRead(Control, Rising_PWR_IGN_LAP_DLK) == cTrue)
    883                      || (DLKLastCommandRequested == cCDLLock)
    884                      || (DLKLastCommandRequested == cCDLUnlock)
    885                      || (DLKLastCommandRequested == cRfLockAllDoors)
    886                      || ( ((DLKLastCommandRequested == cRfUnlockAllDoors) || (DLKLastCommandRequested == cRfUnlockDriverDoor))
    887                      &&(mRead(Control, AllDoorsAreClosed) == cFalse)
    888                      )
    889                      || (mRead(Control, Changing_FR_DOORS_SW_LAP_DLK) == cTrue) 
    890                      || (mRead(Control, Changing_RR_DOORS_SW_LAP_DLK) == cTrue)  
    891                      ) 
   \   00EC   16....         MOVW      HL,#DLKControlStatus+2
   \   00EF   31B664         BT        [HL].3, ??DLKLeaveStartingStepState_Static_40
   \   00F2   02....         MOVW      AX,DLKLastCommandRequested
   \   00F5   EA0500         CMPW      AX,#5
   \   00F8   AD5C           BZ        ??DLKLeaveStartingStepState_Static_40
   \   00FA   EA0400         CMPW      AX,#4
   \   00FD   AD57           BZ        ??DLKLeaveStartingStepState_Static_40
   \   00FF   EA0100         CMPW      AX,#1
   \   0102   AD52           BZ        ??DLKLeaveStartingStepState_Static_40
   \   0104   EA0200         CMPW      AX,#2
   \   0107   AD05           BZ        ??DLKLeaveStartingStepState_Static_41
   \   0109   EA0300         CMPW      AX,#3
   \   010C   BD06           BNZ       ??DLKLeaveStartingStepState_Static_42
   \                     ??DLKLeaveStartingStepState_Static_41:
   \   010E   16....         MOVW      HL,#DLKControlStatus
   \   0111   318742         BF        [HL].0, ??DLKLeaveStartingStepState_Static_40
   \                     ??DLKLeaveStartingStepState_Static_42:
   \   0114   8E....         MOV       A,DLKControlStatus+2
   \   0117   5D30           AND       A,#48
   \   0119   BD3B           BNZ       ??DLKLeaveStartingStepState_Static_40
    892                  {
    893                      mReset(TimerControl, AutoRelockTimerIsArmed);
    894                  }
    895                  else
    896                  {
    897                      TimeoutTicksL = mReadAutoRelockTimeOutTicks();
   \   011B   8E....         MOV       A,u8EEP_TIMER_RECONDA_AUTOOld
   \   011E   48....         CMP       A,DATPeeCalibrationData+16
   \   0121   BD05           BNZ       ??DLKLeaveStartingStepState_Static_43
   \   0123   02....         MOVW      AX,AutoRelockTimeOutTicks
   \   0126   FA11           BR        ??DLKLeaveStartingStepState_Static_44
   \                     ??DLKLeaveStartingStepState_Static_43:
   \   0128   8E....         MOV       A,DATPeeCalibrationData+16
   \   012B   9E....         MOV       u8EEP_TIMER_RECONDA_AUTOOld,A
   \   012E   12E803         MOVW      BC,#1000
   \   0131   70             MOV       X,A
   \   0132   A100           MOV       A,#0
   \   0134   ..             CALLT     [__T_?I_MUL_L02]
   \   0135   A20A           MOV       C,#10
   \   0137   3182           DIVUW     C
   \                     ??DLKLeaveStartingStepState_Static_44:
   \   0139   03....         MOVW      AutoRelockTimeOutTicks,AX
    898          
    899                      if (  (TOSIsTempoElapsed(&AutoRelockTime, TimeoutTicksL) == cTrue)
    900                          && (mRead(TimerControl, AutoRelockTimerIsArmed) == cTrue)
    901                      ) //AutoRelock demanded
   \   013C   D2             MOVW      BC,AX
   \   013D   10....         MOVW      AX,#AutoRelockTime
   \   0140   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0141   51             DEC       A
   \   0142   BD17           BNZ       ??DLKLeaveStartingStepState_Static_45
   \   0144   16....         MOVW      HL,#DLKTimerControlStatus
   \   0147   318711         BF        [HL].0, ??DLKLeaveStartingStepState_Static_45
    902                      {
    903                          mSet(Arbitration, AutoRelock);
   \   014A   16....         MOVW      HL,#DLKArbitrationStatus
   \   014D   71F2           SET1      [HL].7
    904                          mReset(TimerControl, AutoRelockTimerIsArmed);
   \   014F   FA05           BR        ??DLKLeaveStartingStepState_Static_40
    905                      }
    906                      else
    907                      {
    908                      } 
    909                      //wait TimeOut or RfUnlock
    910                      //AutoRelock is armed after arbitration if RfUnlock (with all doors closed) occured
    911                  }
    912              }
    913              else //AutoRelock function is not enabled
    914              {
    915                  mReset(Arbitration, AutoRelock);
   \                     ??DLKLeaveStartingStepState_Static_39:
   \   0151   16....         MOVW      HL,#DLKArbitrationStatus
   \   0154   71F3           CLR1      [HL].7
    916                  mReset(TimerControl, AutoRelockTimerIsArmed);
   \                     ??DLKLeaveStartingStepState_Static_40:
   \   0156   16....         MOVW      HL,#DLKTimerControlStatus
   \   0159   7183           CLR1      [HL].0
    917              } 	
    918              
    919              //****************************************************************************
    920              // CDLButton Is Authorized/Inhibitted
    921              //****************************************************************************
    922              //Update flag CDLButtonIsAuthorized (other conditions are in function CommandMotorRelays)
    923              // prsFS_DLK-455 must be taken into account
    924              if (   (mRead(Control, Rising_PWR_IGN_LAP_DLK) == cTrue) // prsFS_DLK-455,prsFS_DLK-457
    925                  || (mDATRead(U1Bit, FR_DOORS_SW, Default) == cTrue)  // prsFS_DLK-457, see also CommandMotorRelays
    926                  || (mDATRead(U1Bit, RR_DOORS_SW, Default) == cTrue)  // prsFS_DLK-457, see also CommandMotorRelays
    927                  )
   \                     ??DLKLeaveStartingStepState_Static_45:
   \   015B   16....         MOVW      HL,#DLKControlStatus+2
   \   015E   31B607         BT        [HL].3, ??DLKLeaveStartingStepState_Static_46
   \   0161   BC..04         BT        S:DATDinInputBuffers+6.3, ??DLKLeaveStartingStepState_Static_46
   \   0164   3103..05       BF        S:DATDinInputBuffers+8.0, ??DLKLeaveStartingStepState_Static_47
    928              {
    929                  mSet(Control, CDLButtonIsAuthorized); 
   \                     ??DLKLeaveStartingStepState_Static_46:
   \   0168   16....         MOVW      HL,#DLKControlStatus
   \   016B   71C2           SET1      [HL].4
    930              }
    931              else {} //nothing to do
    932          
    933              //****************************************************************************
    934              // CDLButton management
    935              //****************************************************************************
    936              if ((mRead(Control, CDLButtonIsEnabled) != cFalse) &&
    937                  (mRead(Control, CDLButtonIsAuthorized) != cFalse) )
   \                     ??DLKLeaveStartingStepState_Static_47:
   \   016D   16....         MOVW      HL,#DLKControlStatus+3
   \   0170   31D603         BT        [HL].5, $+6
   \   0173   9B....         BR        N:??DLKLeaveStartingStepState_Static_48
   \   0176   16....         MOVW      HL,#DLKControlStatus
   \   0179   31C751         BF        [HL].4, ??DLKLeaveStartingStepState_Static_49
    938              {
    939                  //Update CDL flags 
    940                  if (mDATRead(U1Bit, EEP_CPE_IMPULS, Default) == cTrue) // CDL button with 2 positions 
   \   017C   16....         MOVW      HL,#DATDbkMirrors+26
   \   017F   319728         BF        [HL].1, ??DLKLeaveStartingStepState_Static_50
    941                  { 
    942                      if ((mDATRead(U1Bit, DOOR_UNLOCK_SW, Default) == cTrue) &&
    943                         (mRead(Control, MotorsAreInOperation) == cFalse))
   \   0182   3113..1D       BF        S:DATDinInputBuffers+8.1, ??DLKLeaveStartingStepState_Static_51
   \   0186   16....         MOVW      HL,#DLKControlStatus
   \   0189   31A617         BT        [HL].2, ??DLKLeaveStartingStepState_Static_51
    944                      {
    945                          mSet(Control, CDLButtonIsPressed);
   \   018C   86             INCW      HL
   \   018D   7182           SET1      [HL].0
    946                          if(mRead(Control, CarSecure) == cTrue) 
   \   018F   16....         MOVW      HL,#DLKControlStatus+3
   \   0192   31B707         BF        [HL].3, ??DLKLeaveStartingStepState_Static_52
    947                          {
    948                              mReset(Control, CDLButtonIsLock);
   \   0195   16....         MOVW      HL,#DLKControlStatus+1
   \   0198   7193           CLR1      [HL].1
   \   019A   FA1A           BR        ??DLKLeaveStartingStepState_Static_53
    949                          }
    950                          else
    951                          {
    952                              mSet(Control, CDLButtonIsLock);
   \                     ??DLKLeaveStartingStepState_Static_52:
   \   019C   16....         MOVW      HL,#DLKControlStatus+1
   \   019F   7192           SET1      [HL].1
   \   01A1   FA13           BR        ??DLKLeaveStartingStepState_Static_53
    953                          }
    954                      }
    955                      else
    956                      {
    957                          mReset(Control, CDLButtonIsPressed);
   \                     ??DLKLeaveStartingStepState_Static_51:
   \   01A3   16....         MOVW      HL,#DLKControlStatus+1
   \   01A6   7183           CLR1      [HL].0
   \   01A8   FA0C           BR        ??DLKLeaveStartingStepState_Static_53
    958                      }
    959                  }
    960                  else // CDL button with 3 positions 
    961                  { 
    962                      if ((mDATRead(U1Bit, DOOR_LOCK_SW, Default) == cTrue) ||
    963                          (mDATRead(U1Bit, DOOR_UNLOCK_SW, Default) == cTrue)
    964                         )
   \                     ??DLKLeaveStartingStepState_Static_50:
   \   01AA   CC..04         BT        S:DATDinInputBuffers+6.4, ??DLKLeaveStartingStepState_Static_54
   \   01AD   3113..F2       BF        S:DATDinInputBuffers+8.1, ??DLKLeaveStartingStepState_Static_51
    965                      {
    966                          mSet(Control, CDLButtonIsPressed);
   \                     ??DLKLeaveStartingStepState_Static_54:
   \   01B1   16....         MOVW      HL,#DLKControlStatus+1
   \   01B4   7182           SET1      [HL].0
    967                      }
    968                      else
    969                      {
    970                          mReset(Control, CDLButtonIsPressed);
    971                      }
    972                  }
    973                  
    974                  if ( (mRead(Control, Rising_DOOR_LOCK_SW) == cTrue)
    975                      || (mRead(Control, Rising_DOOR_UNLOCK_LOCK_SW) == cTrue)
    976                     )
   \                     ??DLKLeaveStartingStepState_Static_53:
   \   01B6   87             MOV       A,[HL]
   \   01B7   5D0C           AND       A,#12
   \   01B9   AD12           BZ        ??DLKLeaveStartingStepState_Static_49
    977                  {
    978                      if (mRead(Control, Rising_DOOR_LOCK_SW) == cTrue)
   \   01BB   31B704         BF        [HL].3, ??DLKLeaveStartingStepState_Static_55
    979                      {
    980                          mSet(Control, CDLButtonIsLock);
   \   01BE   7192           SET1      [HL].1
   \   01C0   FA02           BR        ??DLKLeaveStartingStepState_Static_56
    981                      }
    982                      else
    983                      {
    984                          mReset(Control, CDLButtonIsLock);
   \                     ??DLKLeaveStartingStepState_Static_55:
   \   01C2   7193           CLR1      [HL].1
    985                      }
    986                      mSet(TimerControl, CDLDebounceTimerIsStarted);
   \                     ??DLKLeaveStartingStepState_Static_56:
   \   01C4   10....         MOVW      AX,#CDLDebounceTime
   \   01C7   16....         MOVW      HL,#DLKTimerControlStatus
   \   01CA   71A2           SET1      [HL].2
    987                      TOSStartTempo(&CDLDebounceTime);  // prsFS_DLK-474
   \   01CC   ..             CALLT     [__T_TOSStartTimer]
    988                  }
    989              }
    990              
    991              if (   (mRead(Control, CDLButtonIsEnabled) == cTrue)  // CDLButton Is Enabled
    992                  && (mRead(Control, CDLButtonIsAuthorized) == cTrue)  // CDLButton Is authorized
    993                  && (TOSIsTempoElapsed(&CDLDebounceTime, mTOSConvMsInTimerTick(cCDLDebounceTimeOut) - (tTOSTimer)1U) == cTrue) // prsFS_DLK-474
    994                  && (mRead(TimerControl, CDLDebounceTimerIsStarted) == cTrue)
    995                  )
   \                     ??DLKLeaveStartingStepState_Static_49:
   \   01CD   16....         MOVW      HL,#DLKControlStatus+3
   \   01D0   31D739         BF        [HL].5, ??DLKLeaveStartingStepState_Static_48
   \   01D3   16....         MOVW      HL,#DLKControlStatus
   \   01D6   31C733         BF        [HL].4, ??DLKLeaveStartingStepState_Static_48
   \   01D9   10....         MOVW      AX,#CDLDebounceTime
   \   01DC   120300         MOVW      BC,#3
   \   01DF   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   01E0   51             DEC       A
   \   01E1   BD29           BNZ       ??DLKLeaveStartingStepState_Static_48
   \   01E3   16....         MOVW      HL,#DLKTimerControlStatus
   \   01E6   31A723         BF        [HL].2, ??DLKLeaveStartingStepState_Static_48
    996              {
    997                  if ((mRead(Control, CDLButtonIsPressed) == cTrue) &&
    998                     (mRead(Control, MotorsAreInOperation) == cFalse))
   \   01E9   16....         MOVW      HL,#DLKControlStatus+1
   \   01EC   31871D         BF        [HL].0, ??DLKLeaveStartingStepState_Static_48
   \   01EF   16....         MOVW      HL,#DLKControlStatus
   \   01F2   31A617         BT        [HL].2, ??DLKLeaveStartingStepState_Static_48
    999                  {
   1000                      mReset(TimerControl, CDLDebounceTimerIsStarted); 
   \   01F5   16....         MOVW      HL,#DLKTimerControlStatus
   \   01F8   71A3           CLR1      [HL].2
   1001                      if (mRead(Control, CDLButtonIsLock) == cTrue)
   \   01FA   16....         MOVW      HL,#DLKControlStatus+1
   \   01FD   319707         BF        [HL].1, ??DLKLeaveStartingStepState_Static_57
   1002                      {
   1003                          mSet(Arbitration, CDLLock); // prsFS_DLK-476
   \   0200   16....         MOVW      HL,#DLKArbitrationStatus
   \   0203   7182           SET1      [HL].0
   \   0205   FA05           BR        ??DLKLeaveStartingStepState_Static_48
   1004                      }
   1005                      else
   1006                      {
   1007                          mSet(Arbitration, CDLUnlock); // prsFS_DLK-476
   \                     ??DLKLeaveStartingStepState_Static_57:
   \   0207   16....         MOVW      HL,#DLKArbitrationStatus
   \   020A   7192           SET1      [HL].1
   1008                      }
   1009                  }
   1010              }		
   1011              
   1012              //****************************************************************************
   1013              // RF reception
   1014              //****************************************************************************
   1015              if (   (mDATRead(U1Bit, PWR_IGN, Default) == cFalse)     // prsFS_DLK-480
   1016                  && (mDATRead(U1Bit, EEP_AUTRECRF, Default) == cTrue) // prsFS_DLK-342, prsFS_DLK-481
   1017                  && (mRead(Control, MotorsAreInOperation) == cFalse) 
   1018                  )
   \                     ??DLKLeaveStartingStepState_Static_48:
   \   020C   3103..03       BF        S:DATDinInputBuffers+6.0, $+7
   \   0210   9B....         BR        N:??DLKLeaveStartingStepState_Static_58
   \   0213   16....         MOVW      HL,#DATDbkMirrors+27
   \   0216   31D603         BT        [HL].5, $+6
   \   0219   9B....         BR        N:??DLKLeaveStartingStepState_Static_58
   \   021C   16....         MOVW      HL,#DLKControlStatus
   \   021F   31A703         BF        [HL].2, $+6
   \   0222   9B....         BR        N:??DLKLeaveStartingStepState_Static_58
   1019              {
   1020                  if (mDATRead(U1Bit, EEP_KEY_BUTTON, Default) == cTrue)
   \   0225   16....         MOVW      HL,#DATDbkMirrors+27
   \   0228   31A603         BT        [HL].2, $+6
   \   022B   9B....         BR        N:??DLKLeaveStartingStepState_Static_59
   1021                  {
   1022                      // RF Key with 2 buttons
   1023                      if (mDATRead(U1Bit, EEP_SDO, Default) == cTrue) // prsFS_DLK-571
   \   022E   86             INCW      HL
   \   022F   318603         BT        [HL].0, $+6
   \   0232   9B....         BR        N:??DLKLeaveStartingStepState_Static_60
   1024                      { 
   1025                          // SDO is enabled
   1026                          TimeoutTicksL = mReadSDOTimeOutTicks();
   \   0235   8E....         MOV       A,u8EEP_TPS_OUVPORTEOld
   \   0238   48....         CMP       A,DATPeeCalibrationData+18
   \   023B   BD05           BNZ       ??DLKLeaveStartingStepState_Static_61
   \   023D   02....         MOVW      AX,SDOTimeOutTicks
   \   0240   FA11           BR        ??DLKLeaveStartingStepState_Static_62
   \                     ??DLKLeaveStartingStepState_Static_61:
   \   0242   8E....         MOV       A,DATPeeCalibrationData+18
   \   0245   9E....         MOV       u8EEP_TPS_OUVPORTEOld,A
   \   0248   12E803         MOVW      BC,#1000
   \   024B   70             MOV       X,A
   \   024C   A100           MOV       A,#0
   \   024E   ..             CALLT     [__T_?I_MUL_L02]
   \   024F   A20A           MOV       C,#10
   \   0251   3182           DIVUW     C
   \                     ??DLKLeaveStartingStepState_Static_62:
   \   0253   03....         MOVW      SDOTimeOutTicks,AX
   1027                          
   1028                          bTimerElapsedL = (BOOL)
   1029                                  (   (mRead(TimerControl, SDOTimerIsStarted) != cFalse)
   1030                                   && (TOSIsTempoElapsed(&SDOTimeOut, TimeoutTicksL) != cFalse));
   \   0256   16....         MOVW      HL,#DLKTimerControlStatus+1
   \   0259   31870E         BF        [HL].0, ??DLKLeaveStartingStepState_Static_63
   \   025C   D2             MOVW      BC,AX
   \   025D   10....         MOVW      AX,#SDOTimeOut
   \   0260   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0261   4D00           CMP       A,#0
   \   0263   AD05           BZ        ??DLKLeaveStartingStepState_Static_63
   1031          
   1032                          if (bTimerElapsedL != cFalse)
   1033                          {
   1034                              // Allow device to go to sleep - Cm006761
   1035                              mReset(TimerControl, SDOTimerIsStarted);
   \   0265   16....         MOVW      HL,#DLKTimerControlStatus+1
   \   0268   7183           CLR1      [HL].0
   1036                          }
   1037          
   1038                          if (mDATRead(U1Bit, DATRfUnlockPush, Default) == cTrue)
   \                     ??DLKLeaveStartingStepState_Static_63:
   \   026A   A102           MOV       A,#2
   \   026C   9A....         CALL      DATRfReadButtonState
   \   026F   51             DEC       A
   \   0270   BD27           BNZ       ??DLKLeaveStartingStepState_Static_64
   1039                          {
   1040                              if (mRead(TimerControl, SDOTimerIsStarted) == cTrue) // not elapsed!
   \   0272   16....         MOVW      HL,#DLKTimerControlStatus+1
   \   0275   31870B         BF        [HL].0, ??DLKLeaveStartingStepState_Static_65
   1041                              {
   1042                                  mReset(TimerControl, SDOTimerIsStarted); 
   \   0278   A102           MOV       A,#2
   \   027A   7183           CLR1      [HL].0
   1043                                  mSet(Arbitration, RfUnlockAllDoors);
   \   027C   16....         MOVW      HL,#DLKArbitrationStatus
   \   027F   71B2           SET1      [HL].3
   1044                                  DATRfMemorisePush(cDATRfDiagUnlockAll);
   \   0281   FA10           BR        ??DLKLeaveStartingStepState_Static_66
   1045                              }
   1046                              else
   1047                              {
   1048                                  // SDO
   1049                                  TOSStartTempo(&SDOTimeOut); 
   \                     ??DLKLeaveStartingStepState_Static_65:
   \   0283   10....         MOVW      AX,#SDOTimeOut
   \   0286   ..             CALLT     [__T_TOSStartTimer]
   1050                                  mSet(Arbitration, RfUnlockDriverDoor); // prsFS_DLK-577
   \   0287   A101           MOV       A,#1
   \   0289   16....         MOVW      HL,#DLKArbitrationStatus
   \   028C   71C2           SET1      [HL].4
   1051                                  mSet(TimerControl, SDOTimerIsStarted); 
   \   028E   16....         MOVW      HL,#DLKTimerControlStatus+1
   \   0291   7182           SET1      [HL].0
   1052                                  DATRfMemorisePush(cDATRfDiagUnlockDrDoor);
   \                     ??DLKLeaveStartingStepState_Static_66:
   \   0293   16....         MOVW      HL,#LWRD(DATRfArmerNbAlarmITForDiag)
   \   0296   A4..           MOV       E,#BYTE3(DATRfArmerNbAlarmITForDiag)
   \   0298   ..             CALLT     [__T_?FAR_CALL_L07]
   1053                              }
   1054                          }
   1055          
   1056                          if (mDATRead(U1Bit, DATRfLockPush, Default) == cTrue)
   \                     ??DLKLeaveStartingStepState_Static_64:
   \   0299   A101           MOV       A,#1
   \   029B   9A....         CALL      DATRfReadButtonState
   \   029E   51             DEC       A
   \   029F   BD12           BNZ       ??DLKLeaveStartingStepState_Static_58
   1057                          {
   1058                              mSet(Arbitration, RfLockAllDoors); // prsFS_DLK-486
   \   02A1   A104           MOV       A,#4
   \   02A3   16....         MOVW      HL,#DLKArbitrationStatus
   \   02A6   71A2           SET1      [HL].2
   1059                              mReset(TimerControl, SDOTimerIsStarted); 
   \   02A8   16....         MOVW      HL,#DLKTimerControlStatus+1
   \   02AB   7183           CLR1      [HL].0
   1060                              DATRfMemorisePush(cDATRfDiagLockAll);
   \                     ??DLKInputDataManagement_Static_2:
   \   02AD   16....         MOVW      HL,#LWRD(DATRfArmerNbAlarmITForDiag)
   \   02B0   A4..           MOV       E,#BYTE3(DATRfArmerNbAlarmITForDiag)
   \   02B2   ..             CALLT     [__T_?FAR_CALL_L07]
   1061                          }
   1062                      }
   1063                      else
   1064                      {
   1065                          // SDO is disabled.
   1066                          mReset(TimerControl, SDOTimerIsStarted); 
   1067                          if (mDATRead(U1Bit, DATRfLockPush, Default) == cTrue)
   1068                          {
   1069                              mSet(Arbitration, RfLockAllDoors); // prsFS_DLK-486
   1070                              DATRfMemorisePush(cDATRfDiagLockAll);
   1071                          }
   1072                          else if (mDATRead(U1Bit, DATRfUnlockPush, Default) == cTrue)
   1073                          {
   1074                              mSet(Arbitration, RfUnlockAllDoors); // prsFS_DLK-489
   1075                              DATRfMemorisePush(cDATRfDiagUnlockAll);
   1076                          }
   1077                      }
   1078                  }
   1079                  else
   1080                  {
   1081                      // RF Key with 1 button(Lock push button), 
   1082                      // NO SDO
   1083                      // NO Unlock push button
   1084                      if(mDATRead(U1Bit, DATRfLockPush, Default) == cTrue)
   1085                      {
   1086                          if(mDATRead(U1Bit, EEP_CAR_SECURE, Default) == cTrue) 
   1087                          {
   1088                              mSet(Arbitration, RfUnlockAllDoors);
   1089                              DATRfMemorisePush(cDATRfDiagUnlockAll);
   1090                          }
   1091                          else
   1092                          {
   1093                              mSet(Arbitration, RfLockAllDoors);
   1094                              DATRfMemorisePush(cDATRfDiagLockAll);
   1095                          }
   1096                      }
   1097                      else
   1098                      {
   1099                          // no unlock button when EEP_KEY_BUTTON = 0
   1100                      }
   1101                  }
   1102              }
   1103              
   1104              //****************************************************************************
   1105              // Activation and deactivation of Lock With Speed (LWS)
   1106              //****************************************************************************
   1107              if (mDATRead(U1Bit, EEP_CONDAROU, Default) == cTrue) // prsFS_DLK-506
   \                     ??DLKLeaveStartingStepState_Static_58:
   \   02B3   16....         MOVW      HL,#DATDbkMirrors+25
   \   02B6   31A603         BT        [HL].2, $+6
   \   02B9   9B....         BR        N:??DLKLeaveStartingStepState_Static_67
   1108              {
   1109                  if ((mDATRead(U1Bit, PWR_IGN, Default) == cTrue) &&
   1110                      (mRead(Control, CDLButtonIsEnabled) != cFalse) )
   \   02BC   8C..03         BT        S:DATDinInputBuffers+6.0, $+6
   \   02BF   9B....         BR        N:??DLKLeaveStartingStepState_Static_68
   \   02C2   16....         MOVW      HL,#DLKControlStatus+3
   \   02C5   31D603         BT        [HL].5, $+6
   \   02C8   9B....         BR        N:??DLKLeaveStartingStepState_Static_68
   1111                  {
   1112                      if(mDATRead(U1Bit, EEP_CPE_IMPULS, Default) == cTrue) // CDL button with 2 positions 
   \   02CB   16....         MOVW      HL,#DATDbkMirrors+26
   \   02CE   319603         BT        [HL].1, $+6
   \   02D1   9B....         BR        N:??DLKLeaveStartingStepState_Static_69
   1113                      { 
   1114                          if (mRead(Control, Rising_DOOR_UNLOCK_LOCK_SW) == cTrue)
   \   02D4   16....         MOVW      HL,#DLKControlStatus+1
   \   02D7   31A755         BF        [HL].2, ??DLKLeaveStartingStepState_Static_70
   1115                          {
   1116                              if (mDATRead(U1Bit, EEP_CARCLIENT,Default) == cTrue)
   \   02DA   10....         MOVW      AX,#LWSActivationTime
   \   02DD   16....         MOVW      HL,#DATDbkMirrors+25
   \   02E0   31B741         BF        [HL].3, ??DLKLeaveStartingStepState_Static_71
   1117                              {
   1118                                  TOSStartTempo(&LWSActivationTime); 
   \   02E3   ..             CALLT     [__T_TOSStartTimer]
   1119                                  mReset(TimerControl, LWSActivationTimerIsStarted); 
   1120                                  mSet(TimerControl, LWSDeativationTimerIsStarted); 
   \   02E4   8E....         MOV       A,DLKTimerControlStatus
   \   02E7   5DF7           AND       A,#247
   \   02E9   6D10           OR        A,#16
   \   02EB   FA3F           BR        ??DLKLeaveStartingStepState_Static_72
   1121                              }
   \                     ??DLKLeaveStartingStepState_Static_60:
   \   02ED   A101           MOV       A,#1
   \   02EF   16....         MOVW      HL,#DLKTimerControlStatus+1
   \   02F2   7183           CLR1      [HL].0
   \   02F4   9A....         CALL      DATRfReadButtonState
   \   02F7   51             DEC       A
   \   02F8   BD09           BNZ       ??DLKLeaveStartingStepState_Static_73
   \                     ??DLKInputDataManagement_Static_3:
   \   02FA   A104           MOV       A,#4
   \   02FC   16....         MOVW      HL,#DLKArbitrationStatus
   \   02FF   71A2           SET1      [HL].2
   \   0301   FAAA           BR        ??DLKInputDataManagement_Static_2
   \                     ??DLKLeaveStartingStepState_Static_73:
   \   0303   A102           MOV       A,#2
   \   0305   9A....         CALL      DATRfReadButtonState
   \   0308   51             DEC       A
   \   0309   BDA8           BNZ       ??DLKLeaveStartingStepState_Static_58
   \                     ??DLKInputDataManagement_Static_4:
   \   030B   A102           MOV       A,#2
   \   030D   16....         MOVW      HL,#DLKArbitrationStatus
   \   0310   71B2           SET1      [HL].3
   \   0312   FA99           BR        ??DLKInputDataManagement_Static_2
   \                     ??DLKLeaveStartingStepState_Static_59:
   \   0314   A101           MOV       A,#1
   \   0316   9A....         CALL      DATRfReadButtonState
   \   0319   51             DEC       A
   \   031A   BD97           BNZ       ??DLKLeaveStartingStepState_Static_58
   \   031C   16....         MOVW      HL,#DATDbkMirrors+27
   \   031F   31F6E9         BT        [HL].7, ??DLKInputDataManagement_Static_4
   \   0322   FAD6           BR        ??DLKInputDataManagement_Static_3
   1122                              else
   1123                              {
   1124                                  TOSStartTempo(&LWSActivationTime); 
   \                     ??DLKLeaveStartingStepState_Static_71:
   \   0324   ..             CALLT     [__T_TOSStartTimer]
   1125                                  mSet(TimerControl, LWSActivationTimerIsStarted); 
   1126                                  mReset(TimerControl, LWSDeativationTimerIsStarted); 
   \   0325   8E....         MOV       A,DLKTimerControlStatus
   \   0328   5DEF           AND       A,#239
   \   032A   6D08           OR        A,#8
   \                     ??DLKLeaveStartingStepState_Static_72:
   \   032C   9E....         MOV       DLKTimerControlStatus,A
   1127                              }
   1128                          }
   1129                          
   1130                          if (   (mRead(TimerControl, LWSActivationTimerIsStarted) == cTrue) 
   1131                              && (TOSIsTempoElapsed(&LWSActivationTime, mTOSConvMsEnTickHorloge(cLWSActivationTimeOut)) == cTrue)
   1132                              && (mDATRead(U1Bit, DOOR_UNLOCK_SW, Default) == cTrue)  
   1133                              )
   \                     ??DLKLeaveStartingStepState_Static_70:
   \   032F   16....         MOVW      HL,#DLKTimerControlStatus
   \   0332   31B727         BF        [HL].3, ??DLKLeaveStartingStepState_Static_74
   \   0335   10....         MOVW      AX,#LWSActivationTime
   \   0338   129001         MOVW      BC,#400
   \   033B   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   033C   51             DEC       A
   \   033D   BD1D           BNZ       ??DLKLeaveStartingStepState_Static_74
   \   033F   3113..19       BF        S:DATDinInputBuffers+8.1, ??DLKLeaveStartingStepState_Static_74
   1134                          {
   1135                              mDATWrite(U1Bit, EEP_CARCLIENT , cTrue, Default); // prsFS_DLK-514, prsFS_DLK-521
   \   0343   16....         MOVW      HL,#DATDbkMirrors+25
   \   0346   31B607         BT        [HL].3, ??DLKLeaveStartingStepState_Static_75
   \   0349   A101           MOV       A,#1
   \   034B   71B2           SET1      [HL].3
   \   034D   9A....         CALL      DATDbkStartUpdate
   1136                              mDATWriteTable(U1Bit, BUZZER, eBUZZER_LockWithSpeed, cTrue, Default); // prsFS_DLK-522
   \                     ??DLKLeaveStartingStepState_Static_75:
   \   0350   A103           MOV       A,#3
   \   0352   A301           MOV       B,#1
   \   0354   9A....         CALL      DATBuzSetBuzzRequest
   1137                              mReset(TimerControl, LWSActivationTimerIsStarted); 
   \   0357   16....         MOVW      HL,#DLKTimerControlStatus
   \   035A   71B3           CLR1      [HL].3
   1138                          }
   1139                          
   1140                          if (   (mRead(TimerControl, LWSDeativationTimerIsStarted) == cTrue) 
   1141                              && (TOSIsTempoElapsed(&LWSActivationTime, mTOSConvMsEnTickHorloge(cLWSActivationTimeOut)) == cTrue)
   1142                              && (mDATRead(U1Bit, DOOR_UNLOCK_SW, Default) == cTrue)  
   1143                              )
   \                     ??DLKLeaveStartingStepState_Static_74:
   \   035C   16....         MOVW      HL,#DLKTimerControlStatus
   \   035F   31C603         BT        [HL].4, $+6
   \   0362   9B....         BR        N:??DLKLeaveStartingStepState_Static_67
   \   0365   10....         MOVW      AX,#LWSActivationTime
   \   0368   129001         MOVW      BC,#400
   \   036B   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   036C   51             DEC       A
   \   036D   AD03           BZ        $+5
   \   036F   9B....         BR        N:??DLKLeaveStartingStepState_Static_67
   \                     ??DLKInputDataManagement_Static_5:
   \   0372   9C..03         BT        S:DATDinInputBuffers+8.1, $+6
   \   0375   9B....         BR        N:??DLKLeaveStartingStepState_Static_67
   1144                          {
   1145                              mDATWrite(U1Bit, EEP_CARCLIENT , cFalse, Default); // prsFS_DLK-520, prsFS_DLK-521
   \   0378   16....         MOVW      HL,#DATDbkMirrors+25
   \   037B   31B707         BF        [HL].3, ??DLKLeaveStartingStepState_Static_76
   \   037E   A101           MOV       A,#1
   \   0380   71B3           CLR1      [HL].3
   \   0382   9A....         CALL      DATDbkStartUpdate
   1146                              mDATWriteTable(U1Bit, BUZZER, eBUZZER_LockWithSpeed, cTrue, Default); // prsFS_DLK-522
   \                     ??DLKLeaveStartingStepState_Static_76:
   \   0385   A103           MOV       A,#3
   \   0387   A301           MOV       B,#1
   \   0389   9A....         CALL      DATBuzSetBuzzRequest
   1147                              mReset(TimerControl, LWSDeativationTimerIsStarted); 
   \   038C   16....         MOVW      HL,#DLKTimerControlStatus
   \   038F   71C3           CLR1      [HL].4
   \   0391   FA70           BR        ??DLKLeaveStartingStepState_Static_67
   1148                          }
   1149                      }
   1150                      else // CDL button with 3 positions 
   1151                      {
   1152                          if (mRead(Control, Rising_DOOR_LOCK_SW) == cTrue)
   \                     ??DLKLeaveStartingStepState_Static_69:
   \   0393   16....         MOVW      HL,#DLKControlStatus+1
   \   0396   31B70E         BF        [HL].3, ??DLKLeaveStartingStepState_Static_77
   1153                          {
   1154                              TOSStartTempo(&LWSActivationTime); 
   \   0399   10....         MOVW      AX,#LWSActivationTime
   \   039C   ..             CALLT     [__T_TOSStartTimer]
   1155                              mSet(TimerControl, LWSActivationTimerIsStarted); 
   1156                              mReset(TimerControl, LWSDeativationTimerIsStarted); 
   \   039D   8E....         MOV       A,DLKTimerControlStatus
   \   03A0   5DEF           AND       A,#239
   \   03A2   6D08           OR        A,#8
   \   03A4   9E....         MOV       DLKTimerControlStatus,A
   1157                          }
   1158                          if (mRead(Control, Rising_DOOR_UNLOCK_LOCK_SW) == cTrue)
   \                     ??DLKLeaveStartingStepState_Static_77:
   \   03A7   16....         MOVW      HL,#DLKControlStatus+1
   \   03AA   31A70E         BF        [HL].2, ??DLKLeaveStartingStepState_Static_78
   1159                          {
   1160                              TOSStartTempo(&LWSActivationTime); 
   \   03AD   10....         MOVW      AX,#LWSActivationTime
   \   03B0   ..             CALLT     [__T_TOSStartTimer]
   1161                              mReset(TimerControl, LWSActivationTimerIsStarted); 
   1162                              mSet(TimerControl, LWSDeativationTimerIsStarted); 
   \   03B1   8E....         MOV       A,DLKTimerControlStatus
   \   03B4   5DF7           AND       A,#247
   \   03B6   6D10           OR        A,#16
   \   03B8   9E....         MOV       DLKTimerControlStatus,A
   1163                          }
   1164                          
   1165                          if (   (mRead(TimerControl, LWSActivationTimerIsStarted) == cTrue) 
   1166                              && (TOSIsTempoElapsed(&LWSActivationTime, mTOSConvMsEnTickHorloge(cLWSActivationTimeOut)) == cTrue)
   1167                              && (mDATRead(U1Bit, DOOR_LOCK_SW, Default) == cTrue)  
   1168                              )
   \                     ??DLKLeaveStartingStepState_Static_78:
   \   03BB   16....         MOVW      HL,#DLKTimerControlStatus
   \   03BE   31B727         BF        [HL].3, ??DLKLeaveStartingStepState_Static_79
   \   03C1   10....         MOVW      AX,#LWSActivationTime
   \   03C4   129001         MOVW      BC,#400
   \   03C7   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   03C8   51             DEC       A
   \   03C9   BD1D           BNZ       ??DLKLeaveStartingStepState_Static_79
   \   03CB   3143..19       BF        S:DATDinInputBuffers+6.4, ??DLKLeaveStartingStepState_Static_79
   1169                          {
   1170                              mDATWrite(U1Bit, EEP_CARCLIENT , cTrue, Default); // prsFS_DLK-516
   \   03CF   16....         MOVW      HL,#DATDbkMirrors+25
   \   03D2   31B607         BT        [HL].3, ??DLKLeaveStartingStepState_Static_80
   \   03D5   A101           MOV       A,#1
   \   03D7   71B2           SET1      [HL].3
   \   03D9   9A....         CALL      DATDbkStartUpdate
   1171                              mDATWriteTable(U1Bit, BUZZER, eBUZZER_LockWithSpeed, cTrue, Default); // prsFS_DLK-522
   \                     ??DLKLeaveStartingStepState_Static_80:
   \   03DC   A103           MOV       A,#3
   \   03DE   A301           MOV       B,#1
   \   03E0   9A....         CALL      DATBuzSetBuzzRequest
   1172                              mReset(TimerControl, LWSActivationTimerIsStarted); 
   \   03E3   16....         MOVW      HL,#DLKTimerControlStatus
   \   03E6   71B3           CLR1      [HL].3
   1173                          }
   1174                          
   1175                          if (   (mRead(TimerControl, LWSDeativationTimerIsStarted) == cTrue) 
   1176                              && (TOSIsTempoElapsed(&LWSActivationTime, mTOSConvMsEnTickHorloge(cLWSActivationTimeOut)) == cTrue)
   1177                              && (mDATRead(U1Bit, DOOR_UNLOCK_SW, Default) == cTrue)  
   1178                              )
   \                     ??DLKLeaveStartingStepState_Static_79:
   \   03E8   16....         MOVW      HL,#DLKTimerControlStatus
   \   03EB   31C715         BF        [HL].4, ??DLKLeaveStartingStepState_Static_67
   \   03EE   10....         MOVW      AX,#LWSActivationTime
   \   03F1   129001         MOVW      BC,#400
   \   03F4   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   03F5   51             DEC       A
   \   03F6   BD0B           BNZ       ??DLKLeaveStartingStepState_Static_67
   \   03F8   9B....         BR        N:??DLKInputDataManagement_Static_5
   1179                          {
   1180                              mDATWrite(U1Bit, EEP_CARCLIENT , cFalse, Default); // prsFS_DLK-516
   1181                              mDATWriteTable(U1Bit, BUZZER, eBUZZER_LockWithSpeed, cTrue, Default); // prsFS_DLK-522
   1182                              mReset(TimerControl, LWSDeativationTimerIsStarted); 
   1183                          }
   1184                      }
   1185                  }
   1186                  else
   1187                  {
   1188                      mReset(TimerControl, LWSActivationTimerIsStarted); 
   1189                      mReset(TimerControl, LWSDeativationTimerIsStarted); 
   \                     ??DLKLeaveStartingStepState_Static_68:
   \   03FB   8E....         MOV       A,DLKTimerControlStatus
   \   03FE   5DE7           AND       A,#231
   \   0400   9E....         MOV       DLKTimerControlStatus,A
   1190                  }
   1191              }
   1192              else
   1193              {
   1194                  //nothing to-do: the LWS function can never be activated by the client
   1195              }
   1196              
   1197              //****************************************************************************
   1198              // Lock With Speed (LWS)
   1199              //****************************************************************************
   1200              if (TOSReadSignal(cTOSSignalFalling_PWR_IGN_LAP_DLK) == cTrue)  
   \                     ??DLKLeaveStartingStepState_Static_67:
   \   0403   101400         MOVW      AX,#20
   \   0406   ..             CALLT     [__T_TOSReadSignal]
   \   0407   51             DEC       A
   \   0408   BD05           BNZ       ??DLKLeaveStartingStepState_Static_81
   1201              { 
   1202                  NbLWSOpenCloseDoor = 0; // prsFS_DLK-541
   \   040A   A100           MOV       A,#0
   \   040C   9E....         MOV       NbLWSOpenCloseDoor,A
   1203              }
   1204              else
   1205              {}
   1206              
   1207              //Update counter of open/close doors
   1208              if ( (  //any door (with lock) closes
   1209                  (mRead(Control, Falling_FR_DOORS_SW_LAP_DLK) == cTrue)     // prsFS_DLK-539
   1210                  || (mRead(Control, Falling_RR_DOORS_SW_LAP_DLK) == cTrue) // prsFS_DLK-539
   1211                  )
   1212                  && (mDATRead(U8Bit, VEHICLE_SPEED, Default)             // prsFS_DLK-539
   1213                  > mDATRead(U8Bit, NEEP_SEUIL_VIT_CONDAROU, Default)) // prsFS_DLK-539
   1214                  && (NbLWSOpenCloseDoor <= (cNbLWSOpenCloseDoor)) 
   1215                  ) 
   \                     ??DLKLeaveStartingStepState_Static_81:
   \   040F   8E....         MOV       A,DLKControlStatus+1
   \   0412   5D30           AND       A,#48
   \   0414   AD13           BZ        ??DLKLeaveStartingStepState_Static_82
   \   0416   8E....         MOV       A,DATPeeCalibrationData+12
   \   0419   48....         CMP       A,u8DATSpdVEHICLE_SPEED
   \   041C   9D0B           BNC       ??DLKLeaveStartingStepState_Static_82
   \   041E   8E....         MOV       A,NbLWSOpenCloseDoor
   \   0421   4D06           CMP       A,#6
   \   0423   9D04           BNC       ??DLKLeaveStartingStepState_Static_82
   1216              {
   1217                  NbLWSOpenCloseDoor++; // prsFS_DLK-540
   \   0425   41             INC       A
   \   0426   9E....         MOV       NbLWSOpenCloseDoor,A
   1218              }
   1219              else  {} //nothing to do
   1220              
   1221              if (    ( mDATRead(U1Bit, EEP_CARCLIENT, Default) == cTrue )
   1222                  && ( mDATRead(U1Bit, EEP_CONDAROU, Default) == cTrue )   //LWS function is enabled
   1223                  && ( mRead(Control, LWSForbiddenByAirBagMalFunction) == cFalse ) //prsFS_DLK-547
   1224                  && ( mRead(Control, LWSForbiddenAfterCrash) == cFalse ) //prsFS_DLK-549 
   1225                 )
   \                     ??DLKLeaveStartingStepState_Static_82:
   \   0429   8E....         MOV       A,DATDbkMirrors+25
   \   042C   5D0C           AND       A,#12
   \   042E   4D0C           CMP       A,#12
   \   0430   AD03           BZ        $+5
   \   0432   9B....         BR        N:??DLKLeaveStartingStepState_Static_83
   \   0435   16....         MOVW      HL,#DLKControlStatus+2
   \   0438   319703         BF        [HL].1, $+6
   \   043B   9B....         BR        N:??DLKLeaveStartingStepState_Static_83
   \   043E   86             INCW      HL
   \   043F   31A703         BF        [HL].2, $+6
   \   0442   9B....         BR        N:??DLKLeaveStartingStepState_Static_83
   1226              {
   1227                  if (   ( mDATRead(U1Bit, PWR_IGN, Default) == cFalse ) // prsFS_DLK-417
   1228                      || ( mDATRead(U1Bit, ENGINE_RUNNING, Default) == 0 ) // prsFS_DLK-417
   1229                      || ( mRead(Control, KeyIsAuthenticated) == cFalse ) // prsFS_DLK-417
   1230                      || ( mDATRead(U8Bit, VEHICLE_SPEED, Default )
   1231                      <= mDATRead(U8Bit, NEEP_SEUIL_VIT_CONDAROU, Default)) // prsFS_DLK-526
   1232                      || (NbLWSOpenCloseDoor > cNbLWSOpenCloseDoor ) // prsFS_DLK-540
   1233                      || (   (mRead(Control, CarSecure) == cTrue)
   1234                      && (mRead(Control, LWSLockedWithOpenDoor) == cFalse) 
   1235                      ) // prsFS_DLK-417
   1236                      ) 
   \   0445   3103..28       BF        S:DATDinInputBuffers+6.0, ??DLKLeaveStartingStepState_Static_84
   \   0449   8E....         MOV       A,bDATSpdENGINE_RPM
   \   044C   4D00           CMP       A,#0
   \   044E   AD21           BZ        ??DLKLeaveStartingStepState_Static_84
   \   0450   16....         MOVW      HL,#DLKControlStatus
   \   0453   31971B         BF        [HL].1, ??DLKLeaveStartingStepState_Static_84
   \   0456   8E....         MOV       A,DATPeeCalibrationData+12
   \   0459   48....         CMP       A,u8DATSpdVEHICLE_SPEED
   \   045C   9D13           BNC       ??DLKLeaveStartingStepState_Static_84
   \   045E   8E....         MOV       A,NbLWSOpenCloseDoor
   \   0461   4D06           CMP       A,#6
   \   0463   9D0C           BNC       ??DLKLeaveStartingStepState_Static_84
   \   0465   16....         MOVW      HL,#DLKControlStatus+3
   \   0468   31B720         BF        [HL].3, ??DLKLeaveStartingStepState_Static_85
   \   046B   16....         MOVW      HL,#DLKControlStatus+1
   \   046E   31F61A         BT        [HL].7, ??DLKLeaveStartingStepState_Static_85
   1237                  { 
   1238                      //LockWithSpeed to be cancelled
   1239                      mReset(TimerControl, LockWithSpeedTimerIsArmed); 
   \                     ??DLKLeaveStartingStepState_Static_84:
   \   0471   16....         MOVW      HL,#DLKTimerControlStatus
   \   0474   71D3           CLR1      [HL].5
   1240                      if(  (mDATRead(U8Bit, VEHICLE_SPEED, Default)
   1241                        <= mDATRead(U8Bit, NEEP_SEUIL_VIT_CONDAROU, Default))
   1242                         && (mRead(Control, AllDoorsAreClosed) == cFalse)
   1243                        )         
   \   0476   8E....         MOV       A,DATPeeCalibrationData+12
   \   0479   48....         CMP       A,u8DATSpdVEHICLE_SPEED
   \   047C   8D52           BC        ??DLKLeaveStartingStepState_Static_86
   \   047E   16....         MOVW      HL,#DLKControlStatus
   \   0481   31864C         BT        [HL].0, ??DLKLeaveStartingStepState_Static_86
   1244                      {
   1245                          mSet(Control, LWSWithOpenDoorEnabled);
   \   0484   16....         MOVW      HL,#DLKControlStatus+2
   \   0487   71A2           SET1      [HL].2
   \   0489   FA79           BR        ??DLKLeaveStartingStepState_Static_87
   1246                      }
   1247                      else //any other LWS cancel condition
   1248                      {
   1249                          mReset(Control, LWSWithOpenDoorEnabled);
   1250                      }
   1251                  } 
   1252                  //all condition are met
   1253                  else if( ( (mRead(TimerControl, LockWithSpeedTimerIsArmed) == cTrue)
   1254                          && (TOSIsTempoElapsed(&LockWithSpeedTime, mTOSConvMsEnTickHorloge(cLockWithSpeedTimeOut)) == cTrue)
   1255                          )
   1256                          || ((mRead(Control, LWSMustLockOverThreshold) == cTrue)
   1257                              && (mRead(Control, AllDoorsAreClosed) == cTrue) 
   1258                             )
   1259                         )
   \                     ??DLKLeaveStartingStepState_Static_85:
   \   048B   16....         MOVW      HL,#DLKTimerControlStatus
   \   048E   31D70A         BF        [HL].5, ??DLKLeaveStartingStepState_Static_88
   \   0491   10....         MOVW      AX,#LockWithSpeedTime
   \   0494   126400         MOVW      BC,#100
   \   0497   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0498   51             DEC       A
   \   0499   AD0C           BZ        ??DLKLeaveStartingStepState_Static_89
   \                     ??DLKLeaveStartingStepState_Static_88:
   \   049B   16....         MOVW      HL,#DLKControlStatus+1
   \   049E   31E736         BF        [HL].6, ??DLKLeaveStartingStepState_Static_90
   \   04A1   16....         MOVW      HL,#DLKControlStatus
   \   04A4   318730         BF        [HL].0, ??DLKLeaveStartingStepState_Static_90
   1260                  {
   1261                      mReset(TimerControl, LockWithSpeedTimerIsArmed);
   \                     ??DLKLeaveStartingStepState_Static_89:
   \   04A7   A101           MOV       A,#1
   \   04A9   16....         MOVW      HL,#DLKTimerControlStatus
   \   04AC   71D3           CLR1      [HL].5
   1262                      mDATWrite(U1Bit, VehiculeHasBeenMoving, cTrue, Default);
   \   04AE   16....         MOVW      HL,#DATCmnData+27
   \   04B1   97             MOV       [HL],A
   1263                      mSet(Control, LWSSpeedConditionsAreMet);
   \   04B2   16....         MOVW      HL,#DLKControlStatus+2
   \   04B5   71F2           SET1      [HL].7
   1264                      if((mRead(Control, LWSWithOpenDoorEnabled) == cTrue)
   1265                         || (mRead(Control, AllDoorsAreClosed)== cTrue)
   1266                        )
   \   04B7   31A606         BT        [HL].2, ??DLKLeaveStartingStepState_Static_91
   \   04BA   16....         MOVW      HL,#DLKControlStatus
   \   04BD   318710         BF        [HL].0, ??DLKLeaveStartingStepState_Static_86
   1267                      {
   1268                         mSet(Arbitration, LockWithSpeed);
   \                     ??DLKLeaveStartingStepState_Static_91:
   \   04C0   16....         MOVW      HL,#DLKArbitrationStatus
   \   04C3   71E2           SET1      [HL].6
   1269                         mReset(Control, LWSMustLockOverThreshold);
   \   04C5   16....         MOVW      HL,#DLKControlStatus+1
   \   04C8   71E3           CLR1      [HL].6
   1270                      }
   1271                      if(mRead(Control, AllDoorsAreClosed) == cFalse) //a door is open
   \   04CA   16....         MOVW      HL,#DLKControlStatus
   \   04CD   318634         BT        [HL].0, ??DLKLeaveStartingStepState_Static_87
   1272                      {
   1273                          mReset(Control, LWSWithOpenDoorEnabled);
   1274                      }
   1275                  }
   \                     ??DLKLeaveStartingStepState_Static_86:
   \   04D0   16....         MOVW      HL,#DLKControlStatus+2
   \   04D3   71A3           CLR1      [HL].2
   \   04D5   FA2D           BR        ??DLKLeaveStartingStepState_Static_87
   1276                  else if (  (mRead(Control, LWSSpeedConditionsAreMet) == cTrue)
   1277                           &&(mRead(Control, LWSMustLockOverThreshold) == cTrue)
   1278                          )
   \                     ??DLKLeaveStartingStepState_Static_90:
   \   04D7   16....         MOVW      HL,#DLKControlStatus+2
   \   04DA   31F712         BF        [HL].7, ??DLKLeaveStartingStepState_Static_92
   \   04DD   16....         MOVW      HL,#DLKControlStatus+1
   \   04E0   31E70C         BF        [HL].6, ??DLKLeaveStartingStepState_Static_92
   1279                  {
   1280                         mSet(Arbitration, LockWithSpeed);
   \   04E3   16....         MOVW      HL,#DLKArbitrationStatus
   \   04E6   71E2           SET1      [HL].6
   1281                         mReset(Control, LWSMustLockOverThreshold);
   \   04E8   16....         MOVW      HL,#DLKControlStatus+1
   \   04EB   71E3           CLR1      [HL].6
   \   04ED   FA15           BR        ??DLKLeaveStartingStepState_Static_87
   1282                  }
   1283                  else if ((mRead(TimerControl, LockWithSpeedTimerIsArmed) == cFalse) 
   1284                           && (mRead(Control, LWSNewConfirmationRequested) == cFalse)    
   1285                          )
   \                     ??DLKLeaveStartingStepState_Static_92:
   \   04EF   16....         MOVW      HL,#DLKTimerControlStatus
   \   04F2   31D60F         BT        [HL].5, ??DLKLeaveStartingStepState_Static_87
   \   04F5   16....         MOVW      HL,#DLKControlStatus
   \   04F8   31B609         BT        [HL].3, ??DLKLeaveStartingStepState_Static_87
   1286                  {       
   1287                      mSet(TimerControl, LockWithSpeedTimerIsArmed);
   \   04FB   10....         MOVW      AX,#LockWithSpeedTime
   \   04FE   16....         MOVW      HL,#DLKTimerControlStatus
   \   0501   71D2           SET1      [HL].5
   1288                      TOSStartTempo(&LockWithSpeedTime);
   \   0503   ..             CALLT     [__T_TOSStartTimer]
   1289                  }
   1290                  else
   1291                  {} //wait for TimeOut
   1292                  
   1293                  if (   (mRead(Control,Rising_FR_DOORS_SW_LAP_DLK) == cTrue) 
   1294                      || (TOSReadSignal(cTOSSignalRising_RR_DOORS_SW_LAP_DLK) == cTrue )
   1295                      )
   \                     ??DLKLeaveStartingStepState_Static_87:
   \   0504   16....         MOVW      HL,#DLKControlStatus+2
   \   0507   31E607         BT        [HL].6, ??DLKLeaveStartingStepState_Static_93
   \   050A   101800         MOVW      AX,#24
   \   050D   ..             CALLT     [__T_TOSReadSignal]
   \   050E   51             DEC       A
   \   050F   BD05           BNZ       ??DLKLeaveStartingStepState_Static_94
   1296                  {
   1297                      mSet(Control, LWSLockedWithOpenDoor); 
   \                     ??DLKLeaveStartingStepState_Static_93:
   \   0511   16....         MOVW      HL,#DLKControlStatus+1
   \   0514   71F2           SET1      [HL].7
   1298                  }
   1299                  
   1300                  if (  (mRead(Control, LWSLockedWithOpenDoor) == cTrue )
   1301                      &&
   1302                      (   ( mRead(Control, Falling_FR_DOORS_SW_LAP_DLK) == cTrue )
   1303                      || ( mRead(Control, Falling_RR_DOORS_SW_LAP_DLK) == cTrue )
   1304                      )
   1305                     )
   \                     ??DLKLeaveStartingStepState_Static_94:
   \   0516   16....         MOVW      HL,#DLKControlStatus+1
   \   0519   31F707         BF        [HL].7, ??DLKLeaveStartingStepState_Static_95
   \   051C   87             MOV       A,[HL]
   \   051D   5D30           AND       A,#48
   \   051F   AD02           BZ        ??DLKLeaveStartingStepState_Static_95
   1306                  {
   1307                      // Relock when a door is closed
   1308                      mSet(Control, LWSMustLockOverThreshold); 
   \   0521   71E2           SET1      [HL].6
   1309                  }
   1310                  
   1311                  if (mDATRead(U8Bit, VEHICLE_SPEED, Default)
   1312                      <= mDATRead(U8Bit, NEEP_SEUIL_VIT_CONDAROU, Default)) // prsFS_DLK-544
   \                     ??DLKLeaveStartingStepState_Static_95:
   \   0523   8E....         MOV       A,DATPeeCalibrationData+12
   \   0526   48....         CMP       A,u8DATSpdVEHICLE_SPEED
   \   0529   8D14           BC        ??DLKLeaveStartingStepState_Static_96
   1313                  {
   1314                      mReset(Control, LWSSpeedConditionsAreMet); 
   \   052B   86             INCW      HL
   \   052C   71F3           CLR1      [HL].7
   1315                      mReset(Control, LWSNewConfirmationRequested);
   \   052E   16....         MOVW      HL,#DLKControlStatus
   \   0531   71B3           CLR1      [HL].3
   \   0533   FA0A           BR        ??DLKLeaveStartingStepState_Static_96
   1316                  }
   1317                  
   1318              }
   1319              else //function not authorized, reset all
   1320              {
   1321                  mReset(TimerControl, LockWithSpeedTimerIsArmed);
   \                     ??DLKLeaveStartingStepState_Static_83:
   \   0535   16....         MOVW      HL,#DLKTimerControlStatus
   \   0538   71D3           CLR1      [HL].5
   1322                  mReset(Control, LWSSpeedConditionsAreMet); 
   \   053A   16....         MOVW      HL,#DLKControlStatus+2
   \   053D   71F3           CLR1      [HL].7
   1323              } 
   1324          
   1325              //****************************************************************************
   1326              // Master Front Doors
   1327              //****************************************************************************
   1328              if (  (mDATRead(U1Bit, EEP_SDO, Default) == cFalse) // prsFS_DLK-570
   1329                  &&( (mRead(Control, KeyIsAuthenticated) == cTrue) ||
   1330                      (mRead(Control, LastRFActionIsUnlock) == cTrue)
   1331                    ) // prsFS_DLK-545
   1332                  &&(mRead(Control, Rising_FR_DOORS_SW_LAP_DLK ) == cTrue) // prsFS_DLK-544
   1333                  &&(mRead(Control, LWSSpeedConditionsAreMet ) == cFalse )// prsFS_DLK-544
   1334                  &&(
   1335                       (DLKLastCommandRequested == cCDLLock)        // prsFS_DLK-544 locked with CDL
   1336                     ||(DLKLastCommandRequested == cLockWithSpeed)  // prsFS_DLK-544 locked with LWS
   1337                    )
   1338                 )
   \                     ??DLKLeaveStartingStepState_Static_96:
   \   053F   16....         MOVW      HL,#DATDbkMirrors+28
   \   0542   318627         BT        [HL].0, ??DLKLeaveStartingStepState_Static_97
   \   0545   16....         MOVW      HL,#DLKControlStatus
   \   0548   319606         BT        [HL].1, ??DLKLeaveStartingStepState_Static_98
   \   054B   16....         MOVW      HL,#DLKControlStatus+3
   \   054E   31971B         BF        [HL].1, ??DLKLeaveStartingStepState_Static_97
   \                     ??DLKLeaveStartingStepState_Static_98:
   \   0551   8E....         MOV       A,DLKControlStatus+2
   \   0554   5DC0           AND       A,#192
   \   0556   4D40           CMP       A,#64
   \   0558   BD12           BNZ       ??DLKLeaveStartingStepState_Static_97
   \   055A   02....         MOVW      AX,DLKLastCommandRequested
   \   055D   EA0500         CMPW      AX,#5
   \   0560   AD05           BZ        ??DLKLeaveStartingStepState_Static_99
   \   0562   EA0700         CMPW      AX,#7
   \   0565   BD05           BNZ       ??DLKLeaveStartingStepState_Static_97
   1339              {
   1340                  mSet(Arbitration, CDLUnlock);
   \                     ??DLKLeaveStartingStepState_Static_99:
   \   0567   16....         MOVW      HL,#DLKArbitrationStatus
   \   056A   7192           SET1      [HL].1
   1341              }
   1342              else
   1343              {
   1344                  // MFD is inhibited
   1345              }
   1346              
   1347              //Update flag VehiculeHasBeenMovingTime created for Diagnostic function:
   1348              if(mDATRead(U1Bit, PWR_IGN, Default) == cFalse)
   \                     ??DLKLeaveStartingStepState_Static_97:
   \   056C   8C..0D         BT        S:DATDinInputBuffers+6.0, ??DLKLeaveStartingStepState_Static_100
   1349              { //reset flags
   1350                  mDATWrite(U1Bit, VehiculeHasBeenMoving, cFalse, Default);
   \   056F   A100           MOV       A,#0
   \                     ??DLKInputDataManagement_Static_6:
   \   0571   16....         MOVW      HL,#DATCmnData+27
   \   0574   97             MOV       [HL],A
   1351                  mReset(TimerControl, VehiculeHasBeenMovingTimerIsArmed);
   \   0575   16....         MOVW      HL,#DLKTimerControlStatus
   \                     ??DLKInputDataManagement_Static_7:
   \   0578   7193           CLR1      [HL].1
   \   057A   FA33           BR        ??DLKLeaveStartingStepState_Static_101
   1352              }
   1353              else if(  ( mRead(TimerControl, VehiculeHasBeenMovingTimerIsArmed) == cTrue )
   1354                   && ( mDATRead(U8Bit, VEHICLE_SPEED, Default)
   1355                         <= mDATRead(U8Bit, NEEP_SEUIL_VIT_CONDAROU, Default) )
   1356                   )
   \                     ??DLKLeaveStartingStepState_Static_100:
   \   057C   16....         MOVW      HL,#DLKTimerControlStatus
   \   057F   319708         BF        [HL].1, ??DLKLeaveStartingStepState_Static_102
   \   0582   8E....         MOV       A,DATPeeCalibrationData+12
   \   0585   48....         CMP       A,u8DATSpdVEHICLE_SPEED
   \   0588   9DEE           BNC       ??DLKInputDataManagement_Static_7
   1357              {
   1358                  mReset(TimerControl, VehiculeHasBeenMovingTimerIsArmed);
   1359              }
   1360              else if(  (TOSIsTempoElapsed( &VehiculeHasBeenMovingTime,
   1361                                         mTOSConvMsEnTickHorloge(cLockWithSpeedTimeOut) ) == cTrue)
   1362                   && ( mRead(TimerControl, VehiculeHasBeenMovingTimerIsArmed) == cTrue )
   1363                   )
   \                     ??DLKLeaveStartingStepState_Static_102:
   \   058A   10....         MOVW      AX,#VehiculeHasBeenMovingTime
   \   058D   126400         MOVW      BC,#100
   \   0590   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0591   51             DEC       A
   \   0592   16....         MOVW      HL,#DLKTimerControlStatus
   \   0595   BD07           BNZ       ??DLKLeaveStartingStepState_Static_103
   \   0597   319707         BF        [HL].1, ??DLKLeaveStartingStepState_Static_104
   1364              {
   1365                  mDATWrite(U1Bit, VehiculeHasBeenMoving, cTrue, Default);
   \   059A   A101           MOV       A,#1
   \   059C   FAD3           BR        ??DLKInputDataManagement_Static_6
   1366                  mReset(TimerControl, VehiculeHasBeenMovingTimerIsArmed);
   1367              }
   1368              else if(  ( mRead(TimerControl, VehiculeHasBeenMovingTimerIsArmed) == cFalse )
   1369                   && ( mDATRead(U8Bit, VEHICLE_SPEED, Default)
   1370                         > mDATRead(U8Bit, NEEP_SEUIL_VIT_CONDAROU, Default) )
   1371                   )
   \                     ??DLKLeaveStartingStepState_Static_103:
   \   059E   31960E         BT        [HL].1, ??DLKLeaveStartingStepState_Static_101
   \                     ??DLKLeaveStartingStepState_Static_104:
   \   05A1   8E....         MOV       A,DATPeeCalibrationData+12
   \   05A4   48....         CMP       A,u8DATSpdVEHICLE_SPEED
   \   05A7   9D06           BNC       ??DLKLeaveStartingStepState_Static_101
   1372              {
   1373                  mSet(TimerControl, VehiculeHasBeenMovingTimerIsArmed);
   \   05A9   10....         MOVW      AX,#VehiculeHasBeenMovingTime
   \   05AC   7192           SET1      [HL].1
   1374                  TOSStartTempo(&VehiculeHasBeenMovingTime);
   \   05AE   ..             CALLT     [__T_TOSStartTimer]
   1375              }
   1376              else 
   1377              {} //wait time out
   1378              //end Diagnostic function
   1379          
   1380              mReset(Control, Rising_DOOR_UNLOCK_LOCK_SW);
   1381              mReset(Control, Rising_DOOR_LOCK_SW);
   1382              mReset(Control, Falling_FR_DOORS_SW_LAP_DLK);
   \                     ??DLKLeaveStartingStepState_Static_101:
   \   05AF   8E....         MOV       A,DLKControlStatus+1
   \   05B2   5DE3           AND       A,#227
   \   05B4   9E....         MOV       DLKControlStatus+1,A
   1383              mReset(Control, Rising_FR_DOORS_SW_LAP_DLK);
   \   05B7   16....         MOVW      HL,#DLKControlStatus+2
   \   05BA   71E3           CLR1      [HL].6
   1384              mReset(Control, Falling_RR_DOORS_SW_LAP_DLK);
   \   05BC   16....         MOVW      HL,#DLKControlStatus+1
   \   05BF   71D3           CLR1      [HL].5
   1385              mReset(Control, Rising_PWR_IGN_LAP_DLK);
   1386              mReset(Control, Rising_FR_DOORS_SW_LAP_DLK);
   1387              mReset(Control, Changing_FR_DOORS_SW_LAP_DLK);
   1388              mReset(Control, Changing_RR_DOORS_SW_LAP_DLK);
   \   05C1   8E....         MOV       A,DLKControlStatus+2
   \   05C4   5D87           AND       A,#135
   \   05C6   9E....         MOV       DLKControlStatus+2,A
   1389          }
   \   05C9   B2             POP       BC
   \   05CA   AF             RET       
   \   05CB                  REQUIRE ?CL78K_V4_6_L00
   1390          
   1391          //--------------------------------------------------------------------------
   1392          // DESCRIPTION : DLKOutputDataManagement
   1393          //
   1394          // PARAMETERS (Type,Name,Min,Max) :   none
   1395          //  
   1396          // RETURN VALUE :   none
   1397          //    
   1398          // DESIGN INFORMATION :   refer to Detailed Design Document
   1399          //      
   1400          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   1401          void DLKOutputDataManagement(void)
   \                     DLKOutputDataManagement:
   1402          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1403          #ifdef X90_PROJECT
   1404              DLKOutputDataManagement_Static();
   \   0001   16....         MOVW      HL,#LWRD(DLKOutputDataManagement_Static)
   \   0004   A4..           MOV       E,#BYTE3(DLKOutputDataManagement_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1405          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1406          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1407          static MEM_TYPE void DLKOutputDataManagement_Static(void)
   \                     DLKOutputDataManagement_Static:
   1408          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   10....         MOVW      AX,#LedActivationTime
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
   1409          #endif
   1410          
   1411              if ( (TOSIsTempoElapsed(&LedActivationTime, mTOSConvMsEnTickHorloge(cLedActivationTimeOut)) == cTrue) 
   1412                  && (mRead(TimerControl, LedActivationTimerIsStarted) == cTrue)
   1413                  )
   \   0004   127017         MOVW      BC,#6000
   \   0007   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0008   51             DEC       A
   \   0009   BD0D           BNZ       ??DLKLeaveStartingStepState_Static_105
   \   000B   16....         MOVW      HL,#DLKTimerControlStatus
   \   000E   31E707         BF        [HL].6, ??DLKLeaveStartingStepState_Static_105
   1414              {
   1415                  mReset(TimerControl, LedActivationTimerIsStarted);
   \   0011   A100           MOV       A,#0
   \   0013   71E3           CLR1      [HL].6
   1416                  LEDCommandRequested = cLEDOffRequested;
   \   0015   9E....         MOV       LEDCommandRequested,A
   1417              }
   1418          
   1419              if (   (mDATRead(U1Bit, FR_DOORS_SW, Default) == cTrue)
   1420                  || (mDATRead(U1Bit, RR_DOORS_SW, Default) == cTrue)
   1421                  )
   \                     ??DLKLeaveStartingStepState_Static_105:
   \   0018   BC..04         BT        S:DATDinInputBuffers+6.3, ??DLKLeaveStartingStepState_Static_106
   \   001B   3103..0C       BF        S:DATDinInputBuffers+8.0, ??DLKLeaveStartingStepState_Static_107
   1422              {
   1423                  mReset(TimerControl, LedActivationTimerIsStarted);
   \                     ??DLKLeaveStartingStepState_Static_106:
   \   001F   A100           MOV       A,#0
   \   0021   16....         MOVW      HL,#DLKTimerControlStatus
   \   0024   71E3           CLR1      [HL].6
   1424                  LEDCommandRequested = cLEDOffRequested;
   \   0026   9E....         MOV       LEDCommandRequested,A
   \   0029   FA43           BR        ??DLKLeaveStartingStepState_Static_108
   1425              }
   1426              
   1427              if (LEDCommandRequested == cLEDOnRequested)
   \                     ??DLKLeaveStartingStepState_Static_107:
   \   002B   8E....         MOV       A,LEDCommandRequested
   \   002E   51             DEC       A
   \   002F   BD14           BNZ       ??DLKLeaveStartingStepState_Static_109
   1428              {
   1429                  mDATWrite(U1Bit, OPEN_DOOR_LED, (U1)(cTrue), Default);
   \   0031   3A..           SET1      S:DATPouSoftOutputBuffer.3
   1430                  mReset(TimerControl, LedActivationTimerIsStarted);
   \   0033   16....         MOVW      HL,#DLKTimerControlStatus
   \   0036   71E3           CLR1      [HL].6
   1431          
   1432                  mDATWrite(U1Bit, EEP_DoorlockLedActivation, cTrue, Default);
   \   0038   16....         MOVW      HL,#DATDbkMirrors+28
   \   003B   31A644         BT        [HL].2, ??DLKLeaveStartingStepState_Static_110
   \   003E   A101           MOV       A,#1
   \   0040   71A2           SET1      [HL].2
   \   0042   9A....         CALL      DATDbkStartUpdate
   1433              }
   1434              
   1435              if (   (LEDCommandRequested == cLEDOneMinOnRequested )
   1436                  && (mRead(TimerControl, LedActivationTimerIsStarted) == cFalse) )
   \                     ??DLKLeaveStartingStepState_Static_109:
   \   0045   8E....         MOV       A,LEDCommandRequested
   \   0048   4D02           CMP       A,#2
   \   004A   BD1B           BNZ       ??DLKLeaveStartingStepState_Static_111
   \   004C   16....         MOVW      HL,#DLKTimerControlStatus
   \   004F   31E630         BT        [HL].6, ??DLKLeaveStartingStepState_Static_110
   1437              {
   1438                  mDATWrite(U1Bit, OPEN_DOOR_LED, (U1)(cTrue), Default);
   \   0052   10....         MOVW      AX,#LedActivationTime
   \   0055   3A..           SET1      S:DATPouSoftOutputBuffer.3
   1439                  mSet(TimerControl, LedActivationTimerIsStarted);
   \   0057   71E2           SET1      [HL].6
   1440                  TOSStartTempo(&LedActivationTime); 
   \   0059   ..             CALLT     [__T_TOSStartTimer]
   1441          
   1442                  mDATWrite(U1Bit, EEP_DoorlockLedActivation, cTrue, Default);
   \   005A   16....         MOVW      HL,#DATDbkMirrors+28
   \   005D   31A607         BT        [HL].2, ??DLKLeaveStartingStepState_Static_111
   \   0060   A101           MOV       A,#1
   \   0062   71A2           SET1      [HL].2
   \   0064   9A....         CALL      DATDbkStartUpdate
   1443              }
   1444          
   1445              
   1446              if (LEDCommandRequested == cLEDOffRequested)
   \                     ??DLKLeaveStartingStepState_Static_111:
   \   0067   8E....         MOV       A,LEDCommandRequested
   \   006A   4D00           CMP       A,#0
   \   006C   BD14           BNZ       ??DLKLeaveStartingStepState_Static_110
   1447              {
   1448                  mDATWrite(U1Bit, OPEN_DOOR_LED, (U1)(cFalse), Default);
   \                     ??DLKLeaveStartingStepState_Static_108:
   \   006E   3B..           CLR1      S:DATPouSoftOutputBuffer.3
   1449                  mReset(TimerControl, LedActivationTimerIsStarted);
   \   0070   16....         MOVW      HL,#DLKTimerControlStatus
   \   0073   71E3           CLR1      [HL].6
   1450          
   1451                  mDATWrite(U1Bit, EEP_DoorlockLedActivation, cFalse, Default);
   \   0075   16....         MOVW      HL,#DATDbkMirrors+28
   \   0078   31A707         BF        [HL].2, ??DLKLeaveStartingStepState_Static_110
   \   007B   A101           MOV       A,#1
   \   007D   71A3           CLR1      [HL].2
   \   007F   9A....         CALL      DATDbkStartUpdate
   1452              }
   1453              
   1454              //****************************************************************************
   1455              // For diagnostic purposes
   1456              //****************************************************************************
   1457              if(  (DLKLastCommandRequested == cRfUnlockAllDoors    )
   1458                 ||(DLKLastCommandRequested == cRfLockAllDoors     )
   1459                 ||(DLKLastCommandRequested == cRfUnlockDriverDoor )
   1460                 ||(DLKLastCommandRequested == cAutoRelock         )  
   1461                )
   \                     ??DLKLeaveStartingStepState_Static_110:
   \   0082   02....         MOVW      AX,DLKLastCommandRequested
   \   0085   EA0200         CMPW      AX,#2
   \   0088   AD0F           BZ        ??DLKLeaveStartingStepState_Static_112
   \   008A   EA0100         CMPW      AX,#1
   \   008D   AD0A           BZ        ??DLKLeaveStartingStepState_Static_112
   \   008F   EA0300         CMPW      AX,#3
   \   0092   AD05           BZ        ??DLKLeaveStartingStepState_Static_112
   \   0094   EA0800         CMPW      AX,#8
   \   0097   BD04           BNZ       ??DLKLeaveStartingStepState_Static_113
   1462              {
   1463                  mDATWrite(U1Bit, LastCommandOrigin, cTrue, Default);
   \                     ??DLKLeaveStartingStepState_Static_112:
   \   0099   A101           MOV       A,#1
   \   009B   FA0C           BR        ??DLKLeaveStartingStepState_Static_114
   1464              }
   1465              else if (  (DLKLastCommandRequested == cCDLLock )
   1466                       ||(DLKLastCommandRequested == cCDLUnlock )
   1467                  )
   \                     ??DLKLeaveStartingStepState_Static_113:
   \   009D   EA0500         CMPW      AX,#5
   \   00A0   AD05           BZ        ??DLKLeaveStartingStepState_Static_115
   \   00A2   EA0400         CMPW      AX,#4
   \   00A5   BD06           BNZ       ??DLKLeaveStartingStepState_Static_116
   1468              {
   1469                  mDATWrite(U1Bit, LastCommandOrigin, cFalse, Default);
   \                     ??DLKLeaveStartingStepState_Static_115:
   \   00A7   A100           MOV       A,#0
   \                     ??DLKLeaveStartingStepState_Static_114:
   \   00A9   16....         MOVW      HL,#DATCmnData+24
   \   00AC   97             MOV       [HL],A
   1470              }
   1471              else
   1472              {
   1473                  // nothing to do
   1474                  // cCrashUnlock and cLockWithSpeed 
   1475              }
   1476          
   1477              //****************************************************************************
   1478              // For diagnostic purposes / Safety unlock control
   1479              //****************************************************************************
   1480              if(DLKLastCommandRequested == cLockWithSpeed)
   \                     ??DLKLeaveStartingStepState_Static_116:
   \   00AD   8E....         MOV       A,DLKLastCommandRequested+1
   \   00B0   EA0700         CMPW      AX,#7
   \   00B3   BD53           BNZ       ??DLKLeaveStartingStepState_Static_117
   1481              {
   1482                  mDATWrite(U1Bit, VehicleIsLockedWithSpeed, cTrue, Default);
   \   00B5   A101           MOV       A,#1
   \   00B7   16....         MOVW      HL,#DATCmnData+26
   \   00BA   97             MOV       [HL],A
   1483          
   1484                  mSet(Control, SafetyUnlockAllowed);
   \   00BB   16....         MOVW      HL,#DLKControlStatus+3
   \   00BE   71C2           SET1      [HL].4
   1485              }
   1486              else
   1487              {
   1488                  mDATWrite(U1Bit, VehicleIsLockedWithSpeed, cFalse, Default);
   1489          
   1490                  if (  (mRead(Control, SafetyUnlockAllowed) != cFalse)
   1491                      &&(DLKLastCommandRequested == cCDLLock))
   1492                  {
   1493                      // do not clear SafetyUnlockAllowed flag
   1494                  }
   1495                  else
   1496                  {
   1497                      mReset(Control, SafetyUnlockAllowed);
   1498                  }
   1499              }
   1500          
   1501              //****************************************************************************
   1502              // For diagnostic purposes
   1503              //****************************************************************************
   1504              if(DLKLastCommandRequested == cAutoRelock)
   1505              {
   1506                  mDATWrite(U1Bit, VehicleIsAutoRelocked, cTrue, Default);
   1507              }
   1508              else
   1509              {
   1510                  mDATWrite(U1Bit, VehicleIsAutoRelocked, cFalse, Default);
   \                     ??DLKOutputDataManagement_Static_0:
   \   00C0   A100           MOV       A,#0
   \   00C2   16....         MOVW      HL,#DATCmnData+25
   \   00C5   97             MOV       [HL],A
   1511              }
   1512          
   1513              if ( (DLKLastCommandRequested == cCDLLock )
   1514                  || (DLKLastCommandRequested == cRfLockAllDoors )
   1515                  || (DLKLastCommandRequested == cLockWithSpeed )
   1516                  || (DLKLastCommandRequested == cAutoRelock )
   1517                 )
   \   00C6   02....         MOVW      AX,DLKLastCommandRequested
   \   00C9   EA0500         CMPW      AX,#5
   \   00CC   AD0F           BZ        ??DLKLeaveStartingStepState_Static_118
   \   00CE   EA0100         CMPW      AX,#1
   \   00D1   AD0A           BZ        ??DLKLeaveStartingStepState_Static_118
   \   00D3   EA0700         CMPW      AX,#7
   \   00D6   AD05           BZ        ??DLKLeaveStartingStepState_Static_118
   \   00D8   EA0800         CMPW      AX,#8
   \   00DB   BD06           BNZ       ??DLKLeaveStartingStepState_Static_119
   1518              {
   1519                  mDATWrite(U1Bit, LastOpeningPanelControl, cFalse, Default);
   \                     ??DLKLeaveStartingStepState_Static_118:
   \   00DD   A100           MOV       A,#0
   \   00DF   16....         MOVW      HL,#DATCmnData+28
   \   00E2   97             MOV       [HL],A
   1520              }
   1521              
   1522              if ( (DLKLastCommandRequested == cCDLUnlock )
   1523                  || (DLKLastCommandRequested == cRfUnlockAllDoors )
   1524                  || (DLKLastCommandRequested == cCrashUnlock)
   1525                  || (DLKLastCommandRequested == cRfUnlockDriverDoor)
   1526                 )
   \                     ??DLKLeaveStartingStepState_Static_119:
   \   00E3   02....         MOVW      AX,DLKLastCommandRequested
   \   00E6   EA0400         CMPW      AX,#4
   \   00E9   AD0F           BZ        ??DLKLeaveStartingStepState_Static_120
   \   00EB   EA0200         CMPW      AX,#2
   \   00EE   AD0A           BZ        ??DLKLeaveStartingStepState_Static_120
   \   00F0   EA0600         CMPW      AX,#6
   \   00F3   AD05           BZ        ??DLKLeaveStartingStepState_Static_120
   \   00F5   EA0300         CMPW      AX,#3
   \   00F8   BD06           BNZ       ??DLKLeaveStartingStepState_Static_121
   1527              {
   1528                  mDATWrite(U1Bit, LastOpeningPanelControl, cTrue, Default);
   \                     ??DLKLeaveStartingStepState_Static_120:
   \   00FA   A101           MOV       A,#1
   \   00FC   16....         MOVW      HL,#DATCmnData+28
   \   00FF   97             MOV       [HL],A
   1529              }
   1530          
   1531              //****************************************************************************
   1532              // DOORLOCK LED / VERLOG LED HW protection
   1533              //****************************************************************************
   1534              DLKProtectionTask();
   \                     ??DLKLeaveStartingStepState_Static_121:
   \   0100   16....         MOVW      HL,#LWRD(DLKProtectionTask)
   \   0103   A4..           MOV       E,#BYTE3(DLKProtectionTask)
   \   0105   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1535          
   1536          }
   \   0106   B2             POP       BC
   \   0107   AF             RET       
   \                     ??DLKLeaveStartingStepState_Static_117:
   \   0108   A100           MOV       A,#0
   \   010A   16....         MOVW      HL,#DATCmnData+26
   \   010D   97             MOV       [HL],A
   \   010E   16....         MOVW      HL,#DLKControlStatus+3
   \   0111   31C708         BF        [HL].4, ??DLKLeaveStartingStepState_Static_122
   \   0114   02....         MOVW      AX,DLKLastCommandRequested
   \   0117   EA0500         CMPW      AX,#5
   \   011A   ADA4           BZ        ??DLKOutputDataManagement_Static_0
   \                     ??DLKLeaveStartingStepState_Static_122:
   \   011C   71C3           CLR1      [HL].4
   \   011E   02....         MOVW      AX,DLKLastCommandRequested
   \   0121   EA0800         CMPW      AX,#8
   \   0124   BD9A           BNZ       ??DLKOutputDataManagement_Static_0
   \   0126   A101           MOV       A,#1
   \   0128   16....         MOVW      HL,#DATCmnData+25
   \   012B   97             MOV       [HL],A
   \   012C   FAAF           BR        ??DLKLeaveStartingStepState_Static_118
   \   012E                  REQUIRE ?CL78K_V4_6_L00
   1537                  
   1538          /* [GRAPH_FUNCTIONS_END] */
   1539          
   1540          //=============================================================================
   1541          //  DESCRIPTION : Verlog LED Protection Callback for Sleep Mode
   1542          //  
   1543          //  PARAMETERS (Type,Name,Min,Max) :   none
   1544          //
   1545          //  RETURN VALUE :   none
   1546          // 
   1547          //  DESIGN INFORMATION :   refer to Detailed Design Document
   1548          //=============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   1549          void DLKProtectionSleepModeCallBack(void)
   \                     DLKProtectionSleepModeCallBack:
   1550          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1551          #ifdef X90_PROJECT
   1552              static MEM_TYPE void DLKProtectionSleepModeCallBack_Static(void);
   1553              DLKProtectionSleepModeCallBack_Static();
   \   0001   16....         MOVW      HL,#LWRD(DLKProtectionSleepModeCallBack_Static)
   \   0004   A4..           MOV       E,#BYTE3(DLKProtectionSleepModeCallBack_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1554          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1555          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1556          static MEM_TYPE void DLKProtectionSleepModeCallBack_Static(void)
   \                     DLKProtectionSleepModeCallBack_Static:
   1557          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1558          #endif
   1559              
   1560              // This function is called periodically synchronous with analog inputs 
   1561              // reading in sleep mode (on 40 ms)
   1562          
   1563              // Flag for output turned on and unprotected:
   1564              const BOOL bVerlogLedOn = (BOOL)
   1565                  (  (cFalse != mDATRead(U1Bit, VERLOG_LED, Default))
   1566                   &&(mDATRead(U1Bit, VERLOG_LEDProtection, Default) == cFalse) );
   \   0000   3123..11       BF        S:DATPouSoftOutputBuffer.2, ??DLKLeaveStartingStepState_Static_123
   1567          
   1568              if (bVerlogLedOn != cFalse)
   \   0004   AC..0E         BT        S:DATPouHardMaskBuffer.2, ??DLKLeaveStartingStepState_Static_123
   1569              {
   1570                  // VERLOG LED active
   1571                  if (mDATRead(U1Bit, DIAG_DRIVER_ULQ_SCBat, Default) != cFalse)
   \   0007   02....         MOVW      AX,DATAnaBufferFromLDB+10
   \   000A   EAC700         CMPW      AX,#199
   \   000D   8D06           BC        ??DLKLeaveStartingStepState_Static_123
   1572                  {
   1573                      // SC VERLOG LED found
   1574                      SetVerlogLedDefect();
   \   000F   16....         MOVW      HL,#LWRD(SetVerlogLedDefect)
   \   0012   A4..           MOV       E,#BYTE3(SetVerlogLedDefect)
   \   0014   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   1575                  }
   1576                  else
   1577                  {
   1578                      // No SC
   1579                  }
   1580              }
   1581              else
   1582              {
   1583                  // output not enabled or already protected
   1584              }
   1585          }
   \                     ??DLKLeaveStartingStepState_Static_123:
   \   0015   AF             RET       
   \   0016                  REQUIRE ?CL78K_V4_6_L00
   1586                  
   1587          //--------------------------------------------------------------------------
   1588          //  DESCRIPTION : DLKInitialize
   1589          //        
   1590          //  PARAMETERS (Type,Name,Min,Max) :   none
   1591          //          
   1592          //  RETURN VALUE :   none
   1593          //            
   1594          //  DESIGN INFORMATION :   refer to Detailed Design Document
   1595          //              
   1596          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   1597          void DLKInitialize(void)
   \                     DLKInitialize:
   1598          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1599          #ifdef X90_PROJECT
   1600              DLKInitialize_Static();
   \   0001   16....         MOVW      HL,#LWRD(DLKInitialize_Static)
   \   0004   A4..           MOV       E,#BYTE3(DLKInitialize_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1601          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1602          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1603          static MEM_TYPE void DLKInitialize_Static(void)
   \                     DLKInitialize_Static:
   1604          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1605          #endif
   1606              CommandRequested     = cNothingRequested;
   \   0000   100000         MOVW      AX,#0
   \   0003   03....         MOVW      CommandRequested,AX
   1607              DLKLastCommandRequested = cNothingRequested;
   \   0006   03....         MOVW      DLKLastCommandRequested,AX
   1608              
   1609              MotorPattern         = cRelayRestPosition;
   \   0009   9E....         MOV       MotorPattern,A
   1610              
   1611              NbLWSOpenCloseDoor = 0;    //init for LockWithSpeed
   \   000C   9E....         MOV       NbLWSOpenCloseDoor,A
   1612              
   1613              //Reset all flags
   1614              DLKControlStatus.DLKControlFlags         = (U16)0;
   \   000F   03....         MOVW      DLKControlStatus+2,AX
   \   0012   03....         MOVW      DLKControlStatus,AX
   1615              DLKArbitrationStatus.DLKArbitrationFlags = (U16)0;
   \   0015   9E....         MOV       DLKArbitrationStatus,A
   1616          
   1617              bPWR_IGNOld = cFalse;
   \   0018   9E....         MOV       bPWR_IGNOld,A
   1618          
   1619              //Exceptions, flags to be set to cTrue:
   1620              //for CentralDoorLockButton authorization
   1621              mSet(Control, CDLButtonIsAuthorized);               // prsFS_DLK-455
   \   001B   10....         MOVW      AX,#LockWithSpeedTime
   \   001E   16....         MOVW      HL,#DLKControlStatus
   \   0021   71C2           SET1      [HL].4
   1622              
   1623              // after reset button shall be enabled
   1624              mSet(Control, CDLButtonIsEnabled);
   \   0023   16....         MOVW      HL,#DLKControlStatus+3
   \   0026   71D2           SET1      [HL].5
   1625              
   1626              TOSStopTempo(&LockWithSpeedTime);
   \   0028   ..             CALLT     [__T_TOSStopTimer]
   1627              TOSStopTempo(&SevereAbuseTime);
   \   0029   10....         MOVW      AX,#SevereAbuseTime
   \   002C   ..             CALLT     [__T_TOSStopTimer]
   1628              SevereAbuseTimeOut = 0;
   \   002D   100000         MOVW      AX,#0
   \   0030   03....         MOVW      SevereAbuseTimeOut,AX
   1629              TOSStopTempo(&DebounceTime);
   \   0033   10....         MOVW      AX,#DebounceTime
   \   0036   ..             CALLT     [__T_TOSStopTimer]
   1630              TOSStopTempo(&MotorActivationTime);
   \   0037   10....         MOVW      AX,#MotorActivationTime
   \   003A   ..             CALLT     [__T_TOSStopTimer]
   1631              TOSStopTempo(&AutoRelockTime);
   \   003B   10....         MOVW      AX,#AutoRelockTime
   \   003E   ..             CALLT     [__T_TOSStopTimer]
   1632              TOSStopTempo(&CDLDebounceTime);
   \   003F   10....         MOVW      AX,#CDLDebounceTime
   \   0042   ..             CALLT     [__T_TOSStopTimer]
   1633              TOSStopTempo(&LWSActivationTime);
   \   0043   10....         MOVW      AX,#LWSActivationTime
   \   0046   ..             CALLT     [__T_TOSStopTimer]
   1634              TOSStopTempo(&LedActivationTime);
   \   0047   10....         MOVW      AX,#LedActivationTime
   \   004A   ..             CALLT     [__T_TOSStopTimer]
   1635              TOSStopTempo(&VehiculeHasBeenMovingTime);//for diagnostic
   \   004B   10....         MOVW      AX,#VehiculeHasBeenMovingTime
   \   004E   ..             CALLT     [__T_TOSStopTimer]
   1636              TOSStopTempo(&SDOTimeOut);
   \   004F   10....         MOVW      AX,#SDOTimeOut
   \   0052   ..             CALLT     [__T_TOSStopTimer]
   1637             
   1638              mReset(TimerControl, AutoRelockTimerIsArmed);
   1639              mReset(TimerControl, VehiculeHasBeenMovingTimerIsArmed);
   1640              mReset(TimerControl, CDLDebounceTimerIsStarted);
   1641              mReset(TimerControl, LWSActivationTimerIsStarted);            
   1642              mReset(TimerControl, LWSDeativationTimerIsStarted);         
   1643              mReset(TimerControl, LockWithSpeedTimerIsArmed);               
   1644              mReset(TimerControl, LedActivationTimerIsStarted);             
   1645              mReset(TimerControl, AbuseTimerIsStarted);                    
   \   0053   A100           MOV       A,#0
   \   0055   9E....         MOV       DLKTimerControlStatus,A
   1646              mReset(TimerControl, SDOTimerIsStarted);                    
   \   0058   16....         MOVW      HL,#DLKTimerControlStatus+1
   \   005B   7183           CLR1      [HL].0
   1647          
   1648              MotorActionCounter = 0;
   \   005D   9E....         MOV       MotorActionCounter,A
   1649              
   1650              LEDCommandRequested = cLEDOffRequested;
   \   0060   9E....         MOV       LEDCommandRequested,A
   1651          }
   \   0063   AF             RET       
   \   0064                  REQUIRE ?CL78K_V4_6_L00
   1652                  
   1653          //--------------------------------------------------------------------------
   1654          // DESCRIPTION         : DLKIsAnybodyMaintainActiveState
   1655          //        
   1656          // PARAMETERS (Type,Name,Min,Max) :   none
   1657          //          
   1658          // RETURN VALUE        : none
   1659          //            
   1660          // DESIGN INFORMATION  : Refer to Detailed Design Document
   1661          //              
   1662          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   1663          void DLKIsAnybodyMaintainActiveState(void)
   \                     DLKIsAnybodyMaintainActiveState:
   1664          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1665              if (   ( mRead(TimerControl, AutoRelockTimerIsArmed) == cTrue )
   1666                  || ( mRead(Control, MotorsAreInOperation)   == cTrue )
   1667                  || ( mRead(TimerControl, LockWithSpeedTimerIsArmed) == cTrue )
   1668                  || ( mRead(TimerControl, AbuseTimerIsStarted) == cTrue ) 
   1669                  || ( mRead(TimerControl, LedActivationTimerIsStarted) == cTrue)
   1670                  || ( mRead(TimerControl, CDLDebounceTimerIsStarted) == cTrue)
   1671                  || ( mRead(TimerControl, LWSActivationTimerIsStarted) == cTrue)
   1672                  || ( mRead(TimerControl, LWSDeativationTimerIsStarted) == cTrue)
   1673                  || ( mRead(TimerControl, SDOTimerIsStarted) == cTrue)
   1674                  )
   \   0000   16....         MOVW      HL,#DLKTimerControlStatus
   \   0003   318613         BT        [HL].0, ??DLKLeaveStartingStepState_Static_184
   \   0006   16....         MOVW      HL,#DLKControlStatus
   \   0009   31A60D         BT        [HL].2, ??DLKLeaveStartingStepState_Static_184
   \   000C   8E....         MOV       A,DLKTimerControlStatus
   \   000F   5DFC           AND       A,#252
   \   0011   BD06           BNZ       ??DLKLeaveStartingStepState_Static_184
   \   0013   16....         MOVW      HL,#DLKTimerControlStatus+1
   \   0016   318704         BF        [HL].0, ??DLKLeaveStartingStepState_Static_185
   1675              {
   1676                  TOSWriteSignal(cTOSSignalSomebodyMaintainActiveState);
   \                     ??DLKLeaveStartingStepState_Static_184:
   \   0019   102900         MOVW      AX,#41
   \   001C   ..             CALLT     [__T_TOSWriteSignal]
   1677              }  
   1678          }
   \                     ??DLKLeaveStartingStepState_Static_185:
   \   001D   AF             RET       
   \   001E                  REQUIRE ?CL78K_V4_6_L00
   1679          
   1680          //--------------------------------------------------------------------------
   1681          // DESCRIPTION         : DLKEnterActiveState
   1682          //        
   1683          // PARAMETERS (Type,Name,Min,Max) :   none
   1684          //          
   1685          // RETURN VALUE        : none
   1686          //            
   1687          // DESIGN INFORMATION  : control coming from LAP_SUP
   1688          //              
   1689          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   1690          void DLKEnterActiveState(void)
   \                     DLKEnterActiveState:
   1691          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1692              TOSSeqActivateGraph(cTOSSeqGraphIdDLKInputData);
   \   0000   A109           MOV       A,#9
   \   0002   ..             CALLT     [__T_TOSSeqActivateGraph]
   1693              TOSSeqActivateGraph(cTOSSeqGraphIdDLKOutputData);
   \   0003   A10A           MOV       A,#10
   \   0005   ..             CALLT     [__T_TOSSeqActivateGraph]
   1694              TOSSeqActivateGraph(cTOSSeqGraphIdDLKMotorCommand);
   \   0006   A10B           MOV       A,#11
   \   0008   ..             CALLT     [__T_TOSSeqActivateGraph]
   1695              TOSSeqActivateGraph(cTOSSeqGraphIdDLKAirbagManagement);
   \   0009   A10C           MOV       A,#12
   \   000B   ..             CALLT     [__T_TOSSeqActivateGraph]
   1696              bPWR_IGNOld = cFalse;
   \   000C   A100           MOV       A,#0
   \   000E   9E....         MOV       bPWR_IGNOld,A
   1697          }
   \   0011   AF             RET       
   \   0012                  REQUIRE ?CL78K_V4_6_L00
   1698          
   1699          //--------------------------------------------------------------------------
   1700          //  DESCRIPTION         : DLKLeaveActiveState
   1701          //        
   1702          //  PARAMETERS (Type,Name,Min,Max) :   none
   1703          //          
   1704          //  RETURN VALUE        : none
   1705          //            
   1706          //  DESIGN INFORMATION  : control coming from LAP_SUP
   1707          //              
   1708          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   1709          void DLKLeaveActiveState(void)
   \                     DLKLeaveActiveState:
   1710          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1711              TOSSeqDeactivateGraph(cTOSSeqGraphIdDLKInputData);
   \   0000   A109           MOV       A,#9
   \   0002   ..             CALLT     [__T_TOSSeqDeactivateGraph]
   1712              TOSSeqDeactivateGraph(cTOSSeqGraphIdDLKOutputData);  
   \   0003   A10A           MOV       A,#10
   \   0005   ..             CALLT     [__T_TOSSeqDeactivateGraph]
   1713              TOSSeqDeactivateGraph(cTOSSeqGraphIdDLKMotorCommand);  
   \   0006   A10B           MOV       A,#11
   \   0008   ..             CALLT     [__T_TOSSeqDeactivateGraph]
   1714              TOSSeqDeactivateGraph(cTOSSeqGraphIdDLKAirbagManagement);
   \   0009   A10C           MOV       A,#12
   \   000B   ..             CALLT     [__T_TOSSeqDeactivateGraph]
   1715          }
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
   1716                  
   1717          //--------------------------------------------------------------------------
   1718          // DESCRIPTION : DLKCommandCPERelay
   1719          //
   1720          // PARAMETERS (Type,Name,Min,Max) :   none
   1721          //
   1722          // RETURN VALUE :   none
   1723          //
   1724          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1725          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   1726          void DLKCommandCPERelay(void)
   \                     DLKCommandCPERelay:
   1727          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1728              mReset(Control, NewCommandToBeDone); 
   \   0000   10....         MOVW      AX,#MotorActivationTime
   \   0003   16....         MOVW      HL,#DLKControlStatus
   \   0006   71D3           CLR1      [HL].5
   1729              TOSStartTempo(&MotorActivationTime);
   \   0008   ..             CALLT     [__T_TOSStartTimer]
   1730          }
   \   0009   AF             RET       
   \   000A                  REQUIRE ?CL78K_V4_6_L00
   1731                  
   1732          //--------------------------------------------------------------------------
   1733          // DESCRIPTION : DLKCommandIsPending
   1734          //
   1735          // PARAMETERS (Type,Name,Min,Max) :   none
   1736          //
   1737          // RETURN VALUE :   none 
   1738          //
   1739          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1740          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   1741          BOOL DLKCommandIsPending(void)
   \                     DLKCommandIsPending:
   1742          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1743          #ifdef X90_PROJECT
   1744              return DLKCommandIsPending_Static();
   \   0001   16....         MOVW      HL,#LWRD(DLKCommandIsPending_Static)
   \   0004   A4..           MOV       E,#BYTE3(DLKCommandIsPending_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1745          }
   1746          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1747          static MEM_TYPE BOOL DLKCommandIsPending_Static(void)
   \                     DLKCommandIsPending_Static:
   1748          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   1749          #endif
   1750              BOOL bReturnValueL;	 
   1751              
   1752              if (DLKArbitrationStatus.DLKArbitrationFlags == 0) 
   \   0001   8E....         MOV       A,DLKArbitrationStatus
   \   0004   4D00           CMP       A,#0
   \   0006   BD04           BNZ       ??DLKLeaveStartingStepState_Static_124
   1753              {
   1754                  bReturnValueL = cFalse;
   \   0008   A400           MOV       E,#0
   \   000A   FA7D           BR        ??DLKLeaveStartingStepState_Static_125
   1755              }
   1756              else  //Command Is Pending
   1757              {
   1758                  if( mRead(Arbitration, CrashUnlock) == cTrue) // CrashUnlock
   \                     ??DLKLeaveStartingStepState_Static_124:
   \   000C   16....         MOVW      HL,#DLKArbitrationStatus
   \   000F   31D705         BF        [HL].5, ??DLKLeaveStartingStepState_Static_126
   1759                  {
   1760                      CommandRequested = cCrashUnlock; 
   \   0012   100600         MOVW      AX,#6
   \   0015   FA33           BR        ??DLKLeaveStartingStepState_Static_127
   1761                  }
   1762                  else if (mRead(Arbitration, RfLockAllDoors) == cTrue) // RfLockAllDoors
   \                     ??DLKLeaveStartingStepState_Static_126:
   \   0017   31A705         BF        [HL].2, ??DLKLeaveStartingStepState_Static_128
   1763                  {
   1764                      CommandRequested = cRfLockAllDoors;
   \   001A   100100         MOVW      AX,#1
   \   001D   FA2B           BR        ??DLKLeaveStartingStepState_Static_127
   1765                  }
   1766                  else if (mRead(Arbitration, RfUnlockAllDoors) == cTrue) // RfUnlockAllDoors
   \                     ??DLKLeaveStartingStepState_Static_128:
   \   001F   31B705         BF        [HL].3, ??DLKLeaveStartingStepState_Static_129
   1767                  {
   1768                      CommandRequested = cRfUnlockAllDoors;
   \   0022   100200         MOVW      AX,#2
   \   0025   FA23           BR        ??DLKLeaveStartingStepState_Static_127
   1769                  }
   1770                  else if (mRead(Arbitration, RfUnlockDriverDoor) == cTrue) // RfUnlockDriverDoor
   \                     ??DLKLeaveStartingStepState_Static_129:
   \   0027   31C705         BF        [HL].4, ??DLKLeaveStartingStepState_Static_130
   1771                  {
   1772                      CommandRequested = cRfUnlockDriverDoor;
   \   002A   100300         MOVW      AX,#3
   \   002D   FA1B           BR        ??DLKLeaveStartingStepState_Static_127
   1773                  }
   1774                  else if (mRead(Arbitration, AutoRelock) == cTrue) //AutoRelock
   \                     ??DLKLeaveStartingStepState_Static_130:
   \   002F   31F705         BF        [HL].7, ??DLKLeaveStartingStepState_Static_131
   1775                  {
   1776                      CommandRequested = cAutoRelock; 
   \   0032   100800         MOVW      AX,#8
   \   0035   FA13           BR        ??DLKLeaveStartingStepState_Static_127
   1777                  }
   1778                  else if (mRead(Arbitration, LockWithSpeed) == cTrue) //LockWithSpeed
   \                     ??DLKLeaveStartingStepState_Static_131:
   \   0037   31E705         BF        [HL].6, ??DLKLeaveStartingStepState_Static_132
   1779                  {
   1780                      CommandRequested = cLockWithSpeed; 
   \   003A   100700         MOVW      AX,#7
   \   003D   FA0B           BR        ??DLKLeaveStartingStepState_Static_127
   1781                  }
   1782                  else if (mRead(Arbitration, CDLUnlock) == cTrue) //CDLUnlock
   \                     ??DLKLeaveStartingStepState_Static_132:
   \   003F   319705         BF        [HL].1, ??DLKLeaveStartingStepState_Static_133
   1783                  {
   1784                      CommandRequested = cCDLUnlock; 
   \   0042   100400         MOVW      AX,#4
   \   0045   FA03           BR        ??DLKLeaveStartingStepState_Static_127
   1785                  }
   1786                  else  //CDLLock
   1787                  {
   1788                      CommandRequested = cCDLLock; 
   \                     ??DLKLeaveStartingStepState_Static_133:
   \   0047   100500         MOVW      AX,#5
   \                     ??DLKLeaveStartingStepState_Static_127:
   \   004A   03....         MOVW      CommandRequested,AX
   1789                      mLIBassert(mRead(Arbitration, CDLLock) == cTrue);
   1790                  }
   1791                  
   1792                  //Update flags
   1793                  DLKArbitrationStatus.DLKArbitrationFlags = (U16)0;
   \   004D   9E....         MOV       DLKArbitrationStatus,A
   1794                  bReturnValueL = cTrue;
   \   0050   A401           MOV       E,#1
   1795              }
   1796              
   1797              //****************************************************************************
   1798              // SevereAbuse function
   1799              //****************************************************************************
   1800              if ( bReturnValueL == cTrue ) //a command is requested
   1801              {
   1802                  if (  (MotorActionCounter < mDATRead(U8Bit, NEEP_NBCOM_MAX, Default)) 
   1803                      ||(CommandRequested == cCrashUnlock )	// prsFS_DLK-585
   1804                      || (   (mRead(Control, CarSecure) == cTrue) // prsFS_DLK-584
   1805                         && (   (CommandRequested == cRfUnlockAllDoors) 
   1806                             || (CommandRequested == cRfUnlockDriverDoor) 
   1807                             || (CommandRequested == cCDLUnlock) 
   1808                            )
   1809                      )
   1810                      ) 
   \   0052   8E....         MOV       A,MotorActionCounter
   \   0055   48....         CMP       A,DATPeeCalibrationData+14
   \   0058   8D45           BC        ??DLKLeaveStartingStepState_Static_134
   \   005A   8E....         MOV       A,CommandRequested+1
   \   005D   EA0600         CMPW      AX,#6
   \   0060   AD41           BZ        ??DLKLeaveStartingStepState_Static_135
   \   0062   16....         MOVW      HL,#DLKControlStatus+3
   \   0065   31B70F         BF        [HL].3, ??DLKLeaveStartingStepState_Static_136
   \   0068   EA0200         CMPW      AX,#2
   \   006B   AD36           BZ        ??DLKLeaveStartingStepState_Static_135
   \   006D   EA0300         CMPW      AX,#3
   \   0070   AD31           BZ        ??DLKLeaveStartingStepState_Static_135
   \   0072   EA0400         CMPW      AX,#4
   \   0075   AD2C           BZ        ??DLKLeaveStartingStepState_Static_135
   1811                  {
   1812                      if (MotorActionCounter < mDATRead(U8Bit, NEEP_NBCOM_MAX, Default))
   1813                      {
   1814                          MotorActionCounter++;  // prsFS_DLK-581
   1815                      }
   1816                      else
   1817                      {} //nothing to do
   1818                      TOSStartTempo(&SevereAbuseTime);
   1819                      mSet(TimerControl, AbuseTimerIsStarted);
   1820                      mSet(Control, WaitLongSevereAbuseTimeOut);
   1821                      mSet(Control, MotorsAreInOperation);
   1822                  }
   1823                  else // No motor actions are authorized
   1824                  {
   1825                      // prsFS_DLK-582
   1826                      CommandRequested = cNothingRequested; 
   \                     ??DLKLeaveStartingStepState_Static_136:
   \   0077   70             MOV       X,A
   \   0078   03....         MOVW      CommandRequested,AX
   1827                      //Restart timer
   1828          
   1829                      TOSStartTempo(&SevereAbuseTime);
   \   007B   10....         MOVW      AX,#SevereAbuseTime
   \   007E   ..             CALLT     [__T_TOSStartTimer]
   1830                      mSet(TimerControl, AbuseTimerIsStarted);
   \   007F   16....         MOVW      HL,#DLKTimerControlStatus
   \   0082   71F2           SET1      [HL].7
   1831                      mSet(Control, WaitLongSevereAbuseTimeOut);
   \   0084   16....         MOVW      HL,#DLKControlStatus+3
   \   0087   7182           SET1      [HL].0
   1832                 }
   1833              }
   1834          
   1835              //Set TimeOut value
   1836              if( mRead(Control, WaitLongSevereAbuseTimeOut) == cFalse )
   \                     ??DLKLeaveStartingStepState_Static_125:
   \   0089   8E....         MOV       A,DATPeeCalibrationData+15
   \   008C   70             MOV       X,A
   \   008D   16....         MOVW      HL,#DLKControlStatus+3
   \   0090   318638         BT        [HL].0, ??DLKLeaveStartingStepState_Static_137
   1837              {
   1838                  SevereAbuseTimeOut = mReadSevereAbuseTimeOutShortTicks();
   \   0093   8E....         MOV       A,u8EEP_TPS_REFShort
   \   0096   6148           CMP       A,X
   \   0098   BD1E           BNZ       ??DLKLeaveStartingStepState_Static_138
   \   009A   02....         MOVW      AX,SevereAbuseTimeOutShortTicks
   \   009D   FA27           BR        ??DLKLeaveStartingStepState_Static_139
   1839              }
   \                     ??DLKLeaveStartingStepState_Static_134:
   \   009F   41             INC       A
   \   00A0   9E....         MOV       MotorActionCounter,A
   \                     ??DLKLeaveStartingStepState_Static_135:
   \   00A3   10....         MOVW      AX,#SevereAbuseTime
   \   00A6   ..             CALLT     [__T_TOSStartTimer]
   \   00A7   16....         MOVW      HL,#DLKTimerControlStatus
   \   00AA   71F2           SET1      [HL].7
   \   00AC   16....         MOVW      HL,#DLKControlStatus+3
   \   00AF   7182           SET1      [HL].0
   \   00B1   16....         MOVW      HL,#DLKControlStatus
   \   00B4   71A2           SET1      [HL].2
   \   00B6   FAD1           BR        ??DLKLeaveStartingStepState_Static_125
   \                     ??DLKLeaveStartingStepState_Static_138:
   \   00B8   60             MOV       A,X
   \   00B9   9E....         MOV       u8EEP_TPS_REFShort,A
   \   00BC   A100           MOV       A,#0
   \   00BE   12F401         MOVW      BC,#500
   \   00C1   ..             CALLT     [__T_?I_MUL_L02]
   \   00C2   A20A           MOV       C,#10
   \   00C4   3182           DIVUW     C
   \                     ??DLKLeaveStartingStepState_Static_139:
   \   00C6   03....         MOVW      SevereAbuseTimeOutShortTicks,AX
   \   00C9   FA1D           BR        ??DLKLeaveStartingStepState_Static_140
   1840              else
   1841              {
   1842                  SevereAbuseTimeOut = mReadSevereAbuseTimeOutLongTicks();
   \                     ??DLKLeaveStartingStepState_Static_137:
   \   00CB   8E....         MOV       A,u8EEP_TPS_REFLong
   \   00CE   6148           CMP       A,X
   \   00D0   BD05           BNZ       ??DLKLeaveStartingStepState_Static_141
   \   00D2   02....         MOVW      AX,SevereAbuseTimeOutLongTicks
   \   00D5   FA0E           BR        ??DLKLeaveStartingStepState_Static_142
   \                     ??DLKLeaveStartingStepState_Static_141:
   \   00D7   60             MOV       A,X
   \   00D8   9E....         MOV       u8EEP_TPS_REFLong,A
   \   00DB   A100           MOV       A,#0
   \   00DD   12E803         MOVW      BC,#1000
   \   00E0   ..             CALLT     [__T_?I_MUL_L02]
   \   00E1   A20A           MOV       C,#10
   \   00E3   3182           DIVUW     C
   \                     ??DLKLeaveStartingStepState_Static_142:
   \   00E5   03....         MOVW      SevereAbuseTimeOutLongTicks,AX
   \                     ??DLKLeaveStartingStepState_Static_140:
   \   00E8   03....         MOVW      SevereAbuseTimeOut,AX
   1843              }
   1844              
   1845              //Verify TimeOut to decrease counter if need to be
   1846              if (  (mRead(TimerControl, AbuseTimerIsStarted) == cTrue)
   1847                  &&(TOSIsTempoElapsed(&SevereAbuseTime, SevereAbuseTimeOut) == cTrue)
   1848                 )
   \   00EB   16....         MOVW      HL,#DLKTimerControlStatus
   \   00EE   31F725         BF        [HL].7, ??DLKLeaveStartingStepState_Static_143
   \   00F1   D2             MOVW      BC,AX
   \   00F2   10....         MOVW      AX,#SevereAbuseTime
   \   00F5   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   00F6   51             DEC       A
   \   00F7   BD1D           BNZ       ??DLKLeaveStartingStepState_Static_143
   1849              {
   1850                  mReset(Control, WaitLongSevereAbuseTimeOut);
   \   00F9   10....         MOVW      AX,#SevereAbuseTime
   \   00FC   16....         MOVW      HL,#DLKControlStatus+3
   \   00FF   7183           CLR1      [HL].0
   1851                  TOSStartTempo(&SevereAbuseTime);
   \   0101   ..             CALLT     [__T_TOSStartTimer]
   1852                  mSet(TimerControl, AbuseTimerIsStarted);
   \   0102   16....         MOVW      HL,#DLKTimerControlStatus
   \   0105   71F2           SET1      [HL].7
   1853                  if(MotorActionCounter >0)
   \   0107   8E....         MOV       A,MotorActionCounter
   \   010A   4D00           CMP       A,#0
   \   010C   AD06           BZ        ??DLKLeaveStartingStepState_Static_144
   1854                  {
   1855                      MotorActionCounter--;
   \   010E   51             DEC       A
   \   010F   9E....         MOV       MotorActionCounter,A
   \   0112   FA02           BR        ??DLKLeaveStartingStepState_Static_143
   1856                  }
   1857                  else
   1858                  {
   1859                      mReset(TimerControl, AbuseTimerIsStarted);
   \                     ??DLKLeaveStartingStepState_Static_144:
   \   0114   71F3           CLR1      [HL].7
   1860                  } //nothing to do
   1861              }
   1862              else
   1863              {} 
   1864              
   1865              return bReturnValueL;
   \                     ??DLKLeaveStartingStepState_Static_143:
   \   0116   64             MOV       A,E
   \   0117   B2             POP       BC
   \   0118   AF             RET       
   \   0119                  REQUIRE ?CL78K_V4_6_L00
   1866          }
   1867                  
   1868          //--------------------------------------------------------------------------
   1869          // DESCRIPTION : DLKCommandMotorRelays
   1870          //
   1871          // PARAMETERS (Type,Name,Min,Max) :   none
   1872          //
   1873          // RETURN VALUE :   none
   1874          //
   1875          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   1876          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   1877          void DLKCommandMotorRelays(void)
   \                     DLKCommandMotorRelays:
   1878          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   1879          #ifdef X90_PROJECT
   1880              DLKCommandMotorRelays_Static();
   \   0001   16....         MOVW      HL,#LWRD(DLKCommandMotorRelays_Static)
   \   0004   A4..           MOV       E,#BYTE3(DLKCommandMotorRelays_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   1881          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   1882          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   1883          static MEM_TYPE void DLKCommandMotorRelays_Static(void)
   \                     DLKCommandMotorRelays_Static:
   1884          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   1885          #endif
   1886              //****************************************************************************
   1887              // CDLButton Is Authorized/Inhibitted
   1888              //****************************************************************************
   1889              //Update flag CDLButtonIsAuthorized
   1890              if (   (CommandRequested == cRfUnlockAllDoors )         // prsFS_DLK-457
   1891                  || (CommandRequested == cRfUnlockDriverDoor )       // prsFS_DLK-457 
   1892                  )
   \   0000   02....         MOVW      AX,CommandRequested
   \   0003   EA0200         CMPW      AX,#2
   \   0006   AD05           BZ        ??DLKLeaveStartingStepState_Static_145
   \   0008   EA0300         CMPW      AX,#3
   \   000B   BD07           BNZ       ??DLKLeaveStartingStepState_Static_146
   1893              { 
   1894                  // forbidden -> authorized   
   1895                  mSet(Control, CDLButtonIsAuthorized); 
   \                     ??DLKLeaveStartingStepState_Static_145:
   \   000D   16....         MOVW      HL,#DLKControlStatus
   \   0010   71C2           SET1      [HL].4
   \   0012   FA0F           BR        ??DLKLeaveStartingStepState_Static_147
   1896              }
   1897              else if (   (CommandRequested == cAutoRelock)      // prsFS_DLK-456
   1898                  || (CommandRequested == cRfLockAllDoors)       // prsFS_DLK-456    
   1899                  ) 
   \                     ??DLKLeaveStartingStepState_Static_146:
   \   0014   EA0800         CMPW      AX,#8
   \   0017   AD05           BZ        ??DLKLeaveStartingStepState_Static_148
   \   0019   EA0100         CMPW      AX,#1
   \   001C   BD05           BNZ       ??DLKLeaveStartingStepState_Static_147
   1900              {
   1901                  // authorized -> forbidden    
   1902                  mReset(Control, CDLButtonIsAuthorized); 
   \                     ??DLKLeaveStartingStepState_Static_148:
   \   001E   16....         MOVW      HL,#DLKControlStatus
   \   0021   71C3           CLR1      [HL].4
   1903              }
   1904              else 
   1905              {} //nothing to do
   1906              
   1907              
   1908              if (CommandRequested != cNothingRequested)
   \                     ??DLKLeaveStartingStepState_Static_147:
   \   0023   6168           OR        A,X
   \   0025   AD06           BZ        ??DLKLeaveStartingStepState_Static_149
   1909              {
   1910                  DLKLastCommandRequested = CommandRequested;
   \   0027   8E....         MOV       A,CommandRequested+1
   \   002A   03....         MOVW      DLKLastCommandRequested,AX
   1911              }
   1912              else
   1913              {} //nothing to do because code is "no request"
   1914              
   1915              
   1916              //****************************************************************************
   1917              // Rearm AutoRelock function
   1918              //****************************************************************************
   1919              if (mDATRead(U1Bit, EEP_CONDATMPO, Default) == cTrue) // AutoRelock function is enabled
   \                     ??DLKLeaveStartingStepState_Static_149:
   \   002D   16....         MOVW      HL,#DATDbkMirrors+25
   \   0030   31871C         BF        [HL].0, ??DLKLeaveStartingStepState_Static_150
   1920              {
   1921                  if( (
   1922                        (CommandRequested == cRfUnlockAllDoors) ||                 // prsFS_DLK-500
   1923                        (CommandRequested == cRfUnlockDriverDoor)
   1924                      ) 
   1925                      && (mDATRead(U1Bit, FR_DOORS_SW, Default) == cFalse)        // prsFS_DLK-500
   1926                      && (mDATRead(U1Bit, RR_DOORS_SW, Default) == cFalse)        // prsFS_DLK-500 
   1927                      )  
   \   0033   8E....         MOV       A,CommandRequested+1
   \   0036   EA0200         CMPW      AX,#2
   \   0039   AD05           BZ        ??DLKLeaveStartingStepState_Static_151
   \   003B   EA0300         CMPW      AX,#3
   \   003E   BD0F           BNZ       ??DLKLeaveStartingStepState_Static_150
   \                     ??DLKLeaveStartingStepState_Static_151:
   \   0040   BC..0C         BT        S:DATDinInputBuffers+6.3, ??DLKLeaveStartingStepState_Static_150
   \   0043   8C..09         BT        S:DATDinInputBuffers+8.0, ??DLKLeaveStartingStepState_Static_150
   1928                  {
   1929                      //Rearm AutoRelock timer if RfUnlock with all doors closed
   1930                      TOSStartTempo(&AutoRelockTime);
   \   0046   10....         MOVW      AX,#AutoRelockTime
   \   0049   ..             CALLT     [__T_TOSStartTimer]
   1931                      mSet(TimerControl, AutoRelockTimerIsArmed);
   \   004A   16....         MOVW      HL,#DLKTimerControlStatus
   \   004D   7182           SET1      [HL].0
   1932                  }
   1933              }
   1934              else {} //nothing to do
   1935              
   1936              //MotorPattern = cRelayRestPosition;
   1937              switch(CommandRequested)
   \                     ??DLKLeaveStartingStepState_Static_150:
   \   004F   02....         MOVW      AX,CommandRequested
   \   0052   EA0100         CMPW      AX,#1
   \   0055   BD03           BNZ       $+5
   \   0057   9B....         BR        N:??DLKLeaveStartingStepState_Static_152
   \   005A   EA0200         CMPW      AX,#2
   \   005D   BD03           BNZ       $+5
   \   005F   9B....         BR        N:??DLKLeaveStartingStepState_Static_153
   \   0062   EA0300         CMPW      AX,#3
   \   0065   BD03           BNZ       $+5
   \   0067   9B....         BR        N:??DLKLeaveStartingStepState_Static_154
   \   006A   EA0400         CMPW      AX,#4
   \   006D   AD17           BZ        ??DLKLeaveStartingStepState_Static_155
   \   006F   EA0500         CMPW      AX,#5
   \   0072   AD4B           BZ        ??DLKLeaveStartingStepState_Static_156
   \   0074   EA0600         CMPW      AX,#6
   \   0077   AD0D           BZ        ??DLKLeaveStartingStepState_Static_155
   \   0079   EA0700         CMPW      AX,#7
   \   007C   AD56           BZ        ??DLKLeaveStartingStepState_Static_157
   \   007E   EA0800         CMPW      AX,#8
   \   0081   AD25           BZ        ??DLKLeaveStartingStepState_Static_158
   \   0083   9B....         BR        N:??DLKLeaveStartingStepState_Static_159
   1938              {
   1939                  //****************************************************************************
   1940                  // Crash Unlock
   1941                  //****************************************************************************
   1942              case cCrashUnlock:  //graph must be the last, just before Command graph
   1943                  MotorPattern = cUnlockAll;
   \                     ??DLKLeaveStartingStepState_Static_155:
   \   0086   A102           MOV       A,#2
   \   0088   9E....         MOV       MotorPattern,A
   1944                  CommandRequested = cNothingRequested; 
   \   008B   100000         MOVW      AX,#0
   \   008E   03....         MOVW      CommandRequested,AX
   1945                  LEDCommandRequested = cLEDOffRequested; // prsFS_DLK-562
   \   0091   9E....         MOV       LEDCommandRequested,A
   1946                  break;
   1947                  
   1948                  //****************************************************************************
   1949                  // AutoRelock
   1950                  //****************************************************************************
   1951              case cAutoRelock :  //flasher pattern
   1952                  // Cm006153:According to IR_A43, when the vehicle is locked following 
   1953                  // an auto relock, No flashing feedback requested
   1954                  TOSSendControl(cTOSControlAutoRelock); 
   1955                  MotorPattern = cLockAll;
   1956                  CommandRequested = cNothingRequested; 
   1957                  LEDCommandRequested = cLEDOneMinOnRequested; // prsFS_DLK-567
   1958                  break;
   1959                  
   1960                  //****************************************************************************
   1961                  // CDLLock
   1962                  //****************************************************************************
   1963              case cCDLLock : //no flasher pattern to be requested 
   1964                  MotorPattern = cLockAll; // prsFS_DLK-469
   1965                  CommandRequested = cNothingRequested;
   1966                  if (mRead(Control, AllDoorsAreClosed) == cTrue)
   1967                  {
   1968                      LEDCommandRequested = cLEDOnRequested; // prsFS_DLK-564
   1969                  }
   1970                  break;
   1971                  
   1972                  //****************************************************************************
   1973                  // CDLUnlock
   1974                  //****************************************************************************
   1975              case cCDLUnlock :   //no flasher pattern to be requested
   1976                  MotorPattern = cUnlockAll; // prsFS_DLK-470 
   1977                  CommandRequested = cNothingRequested;
   1978                  LEDCommandRequested = cLEDOffRequested; // prsFS_DLK-562
   1979                  break;
   1980                  
   1981                  //****************************************************************************
   1982                  // LockWithSpeed
   1983                  //****************************************************************************
   1984              case cLockWithSpeed : //no flasher pattern to be requested
   1985                  MotorPattern = cLockAll; 
   1986                  CommandRequested = cNothingRequested;
   1987                  if (mRead(Control, AllDoorsAreClosed) == cFalse)
   1988                  {  	
   1989                      mSet(Control, LWSLockedWithOpenDoor);
   1990                  }
   1991                  else
   1992                  {
   1993                      mReset(Control, LWSLockedWithOpenDoor);
   1994                  }
   1995                  LEDCommandRequested = cLEDOnRequested; // prsFS_DLK-565
   1996                  break;
   1997                  
   1998                  //****************************************************************************
   1999                  // RfLockAllDoors
   2000                  //****************************************************************************
   2001              case cRfLockAllDoors :
   2002                  if (mRead(Control, AllDoorsAreClosed) == cTrue)
   2003                  {
   2004                      // prsFS_DLK-488
   2005                      TOSSendControl(cTOSControlRKE_LOCK_REQUEST); // flashing feedback is requested  
   2006                      LEDCommandRequested = cLEDOneMinOnRequested; // prsFS_DLK-566
   2007                  }
   2008                  else
   2009                  {
   2010                      // prsFS_DLK-492
   2011                      // nothing to do
   2012                  }
   2013                  MotorPattern = cLockAll;
   2014                  CommandRequested   = cNothingRequested;
   2015                  mReset(Control, LastRFActionIsUnlock);
   2016                  break;
   2017                  
   2018                  //****************************************************************************
   2019                  // RfUnlockAllDoors
   2020                  //****************************************************************************
   2021              case cRfUnlockAllDoors :         
   2022                  if (mRead(Control, AllDoorsAreClosed) == cTrue)
   2023                  {
   2024                      // prsFS_DLK-490
   2025                      TOSSendControl(cTOSControlRKE_UNLOCK_REQUEST); // flashing feedback is requested 
   2026                  }
   2027                  else
   2028                  {
   2029                      // prsFS_DLK-492
   2030                      // nothing to do
   2031                  }
   2032                  MotorPattern = cUnlockAll;
   2033                  CommandRequested   = cNothingRequested;
   2034                  LEDCommandRequested = cLEDOffRequested; // prsFS_DLK-562
   2035                  mSet(Control, LastRFActionIsUnlock);
   2036                  break;
   2037                  
   2038                  //****************************************************************************
   2039                  // RfUnlockDriverDoor
   2040                  //****************************************************************************
   2041              case cRfUnlockDriverDoor :         
   2042                  TOSSendControl(cTOSControlRKE_UNLOCK_REQUEST); // flashing feedback is requested
   2043                  MotorPattern = cUnlockDriverDoor;
   2044                  CommandRequested   = cNothingRequested;
   2045                  LEDCommandRequested = cLEDOffRequested; // prsFS_DLK-562
   2046                  mSet(Control, LastRFActionIsUnlock);
   2047                  break;
   2048                  
   2049              default:
   2050                  MotorPattern = cRelayRestPosition;
   2051                  break;
   2052              } //end switch (CommandRequested)
   2053              
   2054              //****************************************************************************
   2055              // Motor Commands
   2056              //****************************************************************************
   2057              if (MotorPattern == cLockAll)
   2058              {
   2059                  mDATWrite(U1Bit, LOCK_DOORS, (U1)(cTrue), Default);
   2060              }
   2061          
   2062              if (MotorPattern == cUnlockAll)
   2063              {
   2064                  // wrong spec (see TCR Cm004888)
   2065                  mDATWrite(U1Bit, UNLOCK_DOORS, (U1)(cTrue), Default);
   2066                  mDATWrite(U1Bit, UNLOCK_DRIVER_DOOR, (U1)(cTrue), Default);
   \                     ??DLKCommandMotorRelays_Static_0:
   \   0094   E8..0A         OR        S:DATPouSoftOutputBuffer+3,#10
   2067              }
   2068              
   2069              if (MotorPattern == cUnlockDriverDoor)
   2070              {
   2071                  mDATWrite(U1Bit, UNLOCK_DRIVER_DOOR, (U1)(cTrue), Default);
   2072              }
   2073              
   2074              if(mRead(Control, LWSSpeedConditionsAreMet) == cTrue) //prsFS_DLK-529
   \                     ??DLKCommandMotorRelays_Static_1:
   \   0097   16....         MOVW      HL,#DLKControlStatus+2
   \   009A   31F603         BT        [HL].7, $+6
   \   009D   9B....         BR        N:??DLKLeaveStartingStepState_Static_160
   2075              {
   2076                 mSet(Control, LWSNewConfirmationRequested);   
   \   00A0   16....         MOVW      HL,#DLKControlStatus
   \   00A3   71B2           SET1      [HL].3
   \   00A5   9B....         BR        N:??DLKLeaveStartingStepState_Static_161
   2077              }
   \                     ??DLKLeaveStartingStepState_Static_158:
   \   00A8   A125           MOV       A,#37
   \   00AA   ..             CALLT     [__T_TOSSendControl]
   \   00AB   A101           MOV       A,#1
   \   00AD   9E....         MOV       MotorPattern,A
   \   00B0   100000         MOVW      AX,#0
   \   00B3   03....         MOVW      CommandRequested,AX
   \   00B6   A102           MOV       A,#2
   \                     ??DLKCommandMotorRelays_Static_2:
   \   00B8   9E....         MOV       LEDCommandRequested,A
   \                     ??DLKCommandMotorRelays_Static_3:
   \   00BB   0A..           SET1      S:DATPouSoftOutputBuffer+3.0
   \   00BD   FAD8           BR        ??DLKCommandMotorRelays_Static_1
   \                     ??DLKLeaveStartingStepState_Static_156:
   \   00BF   A101           MOV       A,#1
   \   00C1   9E....         MOV       MotorPattern,A
   \   00C4   100000         MOVW      AX,#0
   \   00C7   03....         MOVW      CommandRequested,AX
   \   00CA   16....         MOVW      HL,#DLKControlStatus
   \   00CD   3187EB         BF        [HL].0, ??DLKCommandMotorRelays_Static_3
   \                     ??DLKCommandMotorRelays_Static_4:
   \   00D0   A101           MOV       A,#1
   \   00D2   FAE4           BR        ??DLKCommandMotorRelays_Static_2
   \                     ??DLKLeaveStartingStepState_Static_157:
   \   00D4   A101           MOV       A,#1
   \   00D6   9E....         MOV       MotorPattern,A
   \   00D9   100000         MOVW      AX,#0
   \   00DC   03....         MOVW      CommandRequested,AX
   \   00DF   16....         MOVW      HL,#DLKControlStatus
   \   00E2   318605         BT        [HL].0, ??DLKLeaveStartingStepState_Static_162
   \   00E5   86             INCW      HL
   \   00E6   71F2           SET1      [HL].7
   \   00E8   FAE6           BR        ??DLKCommandMotorRelays_Static_4
   \                     ??DLKLeaveStartingStepState_Static_162:
   \   00EA   86             INCW      HL
   \   00EB   71F3           CLR1      [HL].7
   \   00ED   FAE1           BR        ??DLKCommandMotorRelays_Static_4
   \                     ??DLKLeaveStartingStepState_Static_152:
   \   00EF   16....         MOVW      HL,#DLKControlStatus
   \   00F2   318708         BF        [HL].0, ??DLKLeaveStartingStepState_Static_163
   \   00F5   A121           MOV       A,#33
   \   00F7   ..             CALLT     [__T_TOSSendControl]
   \   00F8   A102           MOV       A,#2
   \   00FA   9E....         MOV       LEDCommandRequested,A
   \                     ??DLKLeaveStartingStepState_Static_163:
   \   00FD   A101           MOV       A,#1
   \   00FF   9E....         MOV       MotorPattern,A
   \   0102   100000         MOVW      AX,#0
   \   0105   03....         MOVW      CommandRequested,AX
   \   0108   16....         MOVW      HL,#DLKControlStatus+3
   \   010B   7193           CLR1      [HL].1
   \   010D   FAAC           BR        ??DLKCommandMotorRelays_Static_3
   \                     ??DLKLeaveStartingStepState_Static_153:
   \   010F   16....         MOVW      HL,#DLKControlStatus
   \   0112   318703         BF        [HL].0, ??DLKLeaveStartingStepState_Static_164
   \   0115   A122           MOV       A,#34
   \   0117   ..             CALLT     [__T_TOSSendControl]
   \                     ??DLKLeaveStartingStepState_Static_164:
   \   0118   A102           MOV       A,#2
   \   011A   9E....         MOV       MotorPattern,A
   \   011D   100000         MOVW      AX,#0
   \   0120   03....         MOVW      CommandRequested,AX
   \   0123   9E....         MOV       LEDCommandRequested,A
   \   0126   16....         MOVW      HL,#DLKControlStatus+3
   \   0129   7192           SET1      [HL].1
   \   012B   9B....         BR        N:??DLKCommandMotorRelays_Static_0
   \                     ??DLKLeaveStartingStepState_Static_154:
   \   012E   A122           MOV       A,#34
   \   0130   ..             CALLT     [__T_TOSSendControl]
   \   0131   A103           MOV       A,#3
   \   0133   9E....         MOV       MotorPattern,A
   \   0136   100000         MOVW      AX,#0
   \   0139   03....         MOVW      CommandRequested,AX
   \   013C   9E....         MOV       LEDCommandRequested,A
   \   013F   16....         MOVW      HL,#DLKControlStatus+3
   \   0142   7192           SET1      [HL].1
   \   0144   3A..           SET1      S:DATPouSoftOutputBuffer+3.3
   \   0146   9B....         BR        N:??DLKCommandMotorRelays_Static_1
   \                     ??DLKLeaveStartingStepState_Static_159:
   \   0149   A100           MOV       A,#0
   \   014B   9E....         MOV       MotorPattern,A
   \   014E   9B....         BR        N:??DLKCommandMotorRelays_Static_1
   2078              else
   2079              {
   2080                 mReset(Control, LWSNewConfirmationRequested);   
   \                     ??DLKLeaveStartingStepState_Static_160:
   \   0151   16....         MOVW      HL,#DLKControlStatus
   \   0154   71B3           CLR1      [HL].3
   2081              }
   2082          
   2083              mSet(Control, NewCommandToBeDone); 
   \                     ??DLKLeaveStartingStepState_Static_161:
   \   0156   10....         MOVW      AX,#DebounceTime
   \   0159   71D2           SET1      [HL].5
   2084              TOSStartTempo(&DebounceTime);
   \   015B   ..             CALLT     [__T_TOSStartTimer]
   2085          }
   \   015C   AF             RET       
   \   015D                  REQUIRE ?CL78K_V4_6_L00
   2086          
   2087          //--------------------------------------------------------------------------
   2088          // DESCRIPTION : DLKDeCommandMotorRelays
   2089          //
   2090          // PARAMETERS (Type,Name,Min,Max) :   none
   2091          //
   2092          // RETURN VALUE :   none
   2093          //
   2094          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2095          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   2096          void DLKDeCommandMotorRelays(void)
   \                     DLKDeCommandMotorRelays:
   2097          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2098          #ifdef X90_PROJECT
   2099              DLKDeCommandMotorRelays_Static();
   \   0001   16....         MOVW      HL,#LWRD(DLKDeCommandMotorRelays_Static)
   \   0004   A4..           MOV       E,#BYTE3(DLKDeCommandMotorRelays_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2100          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2101          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2102          static MEM_TYPE void DLKDeCommandMotorRelays_Static(void)
   \                     DLKDeCommandMotorRelays_Static:
   2103          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2104          #endif
   2105              //All relays off
   2106              mDATWrite(U1Bit, LOCK_DOORS, (U1)(0), Default);
   2107              mDATWrite(U1Bit, UNLOCK_DOORS, (U1)(0), Default);
   2108              mDATWrite(U1Bit, UNLOCK_DRIVER_DOOR, (U1)(0), Default);
   \   0000   102100         MOVW      AX,#33
   \   0003   D8..F4         AND       S:DATPouSoftOutputBuffer+3,#244
   2109              
   2110              if (TOSReadSignal(cTOSSignalCrashUnlockStarted) != cFalse)
   \   0006   ..             CALLT     [__T_TOSReadSignal]
   \   0007   4D00           CMP       A,#0
   \   0009   AD08           BZ        ??DLKLeaveStartingStepState_Static_165
   2111              {
   2112                  TOSSendControl(cTOSControlCrashUnlockFinished);
   \   000B   A126           MOV       A,#38
   \   000D   ..             CALLT     [__T_TOSSendControl]
   2113                  // Start flashers crash unlock signalization
   2114                  
   2115                  mSet(Control, LWSForbiddenAfterCrash);
   \   000E   16....         MOVW      HL,#DLKControlStatus+3
   \   0011   71A2           SET1      [HL].2
   2116                  // flag is reset after BCM reset with APC on: it is set again for that case
   2117              }
   2118          
   2119              //****************************************************************************
   2120              // CAR_SECURE
   2121              //****************************************************************************
   2122              if (MotorPattern == cLockAll) // prsFS_DLK-497, prsFS_DLK-487
   \                     ??DLKLeaveStartingStepState_Static_165:
   \   0013   8E....         MOV       A,MotorPattern
   \   0016   51             DEC       A
   \   0017   BD07           BNZ       ??DLKLeaveStartingStepState_Static_166
   2123              {
   2124                  mSet(Control, CarSecure);
   \   0019   16....         MOVW      HL,#DLKControlStatus+3
   \   001C   71B2           SET1      [HL].3
   \   001E   FA12           BR        ??DLKLeaveStartingStepState_Static_167
   2125              }
   2126              else if (MotorPattern == cUnlockAll)  // prsFS_DLK-470, prsFS_DLK-491
   \                     ??DLKLeaveStartingStepState_Static_166:
   \   0020   8E....         MOV       A,MotorPattern
   \   0023   4D02           CMP       A,#2
   \   0025   BD07           BNZ       ??DLKLeaveStartingStepState_Static_168
   2127              {
   2128                  mReset(Control, CarSecure);
   \                     ??DLKDeCommandMotorRelays_Static_0:
   \   0027   16....         MOVW      HL,#DLKControlStatus+3
   \   002A   71B3           CLR1      [HL].3
   \   002C   FA04           BR        ??DLKLeaveStartingStepState_Static_167
   2129              }
   2130              //CCOV: ailievb: Cannot be covered in normal operating conditions,
   2131              else if ( MotorPattern == cUnlockDriverDoor)
   \                     ??DLKLeaveStartingStepState_Static_168:
   \   002E   4D03           CMP       A,#3
   \   0030   ADF5           BZ        ??DLKDeCommandMotorRelays_Static_0
   2132              {
   2133                  
   2134                  mReset(Control, CarSecure);
   2135              }
   2136              else
   2137              {
   2138                  mLIBassert(cFalse);
   2139              }
   2140          
   2141              if (  (DLKLastCommandRequested == cRfLockAllDoors)         // prsFS_DLK-487
   2142                  ||(DLKLastCommandRequested == cAutoRelock)             // prsFS_DLK-497  
   2143                 )
   \                     ??DLKLeaveStartingStepState_Static_167:
   \   0032   02....         MOVW      AX,DLKLastCommandRequested
   \   0035   EA0100         CMPW      AX,#1
   \   0038   AD05           BZ        ??DLKLeaveStartingStepState_Static_169
   \   003A   EA0800         CMPW      AX,#8
   \   003D   BD12           BNZ       ??DLKLeaveStartingStepState_Static_170
   2144              {
   2145                  mDATWrite(U1Bit, EEP_CAR_SECURE, cTrue, Default);
   \                     ??DLKLeaveStartingStepState_Static_169:
   \   003F   16....         MOVW      HL,#DATDbkMirrors+27
   \   0042   31F607         BT        [HL].7, ??DLKLeaveStartingStepState_Static_171
   \   0045   A101           MOV       A,#1
   \   0047   71F2           SET1      [HL].7
   \   0049   9A....         CALL      DATDbkStartUpdate
   2146                  TOSSendControl(cTOSControlRfLockAllForAlarm); // Control for Alarm
   \                     ??DLKLeaveStartingStepState_Static_171:
   \   004C   A123           MOV       A,#35
   \   004E   ..             CALLT     [__T_TOSSendControl]
   \   004F   FA1A           BR        ??DLKLeaveStartingStepState_Static_172
   2147              }
   2148              else if (  (DLKLastCommandRequested == cRfUnlockAllDoors)    // prsFS_DLK-491  
   2149                       ||(DLKLastCommandRequested == cRfUnlockDriverDoor) 
   2150                      ) 
   \                     ??DLKLeaveStartingStepState_Static_170:
   \   0051   EA0200         CMPW      AX,#2
   \   0054   AD05           BZ        ??DLKLeaveStartingStepState_Static_173
   \   0056   EA0300         CMPW      AX,#3
   \   0059   BD10           BNZ       ??DLKLeaveStartingStepState_Static_172
   2151              {
   2152                  mDATWrite(U1Bit, EEP_CAR_SECURE, cFalse, Default);
   \                     ??DLKLeaveStartingStepState_Static_173:
   \   005B   16....         MOVW      HL,#DATDbkMirrors+27
   \   005E   31F707         BF        [HL].7, ??DLKLeaveStartingStepState_Static_174
   \   0061   A101           MOV       A,#1
   \   0063   71F3           CLR1      [HL].7
   \   0065   9A....         CALL      DATDbkStartUpdate
   2153                  TOSSendControl(cTOSControlRfUnlockAllForAlarm); // Control for Alarm
   \                     ??DLKLeaveStartingStepState_Static_174:
   \   0068   A124           MOV       A,#36
   \   006A   ..             CALLT     [__T_TOSSendControl]
   2154              }
   2155              mReset(Control, MotorsAreInOperation); //to authorise Sleep
   \                     ??DLKLeaveStartingStepState_Static_172:
   \   006B   16....         MOVW      HL,#DLKControlStatus
   \   006E   71A3           CLR1      [HL].2
   2156          }
   \   0070   AF             RET       
   \   0071                  REQUIRE ?CL78K_V4_6_L00
   2157          
   2158          //--------------------------------------------------------------------------
   2159          // DESCRIPTION : DLKDebounceTimeOut
   2160          //
   2161          // PARAMETERS (Type,Name,Min,Max) :   none
   2162          //
   2163          // RETURN VALUE :   none 
   2164          //
   2165          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2166          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   2167          BOOL DLKDebounceTimeOut(void)
   \                     DLKDebounceTimeOut:
   2168          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   10....         MOVW      AX,#DebounceTime
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
   2169              //StabilizationTime = 10ms when connecting and 1ms when disconnecting
   2170              //due to hardware restrictions and to avoid sparks
   2171              return( TOSIsTempoElapsed(&DebounceTime,  mTOSConvMsInTimerTick(cDebounceTimeOut) - (tTOSTimer)1U) == cTrue );
   \   0004   120000         MOVW      BC,#0
   \   0007   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0008   51             DEC       A
   \   0009   BD04           BNZ       ??DLKLeaveStartingStepState_Static_186
   \   000B   A101           MOV       A,#1
   \   000D   FA02           BR        ??DLKLeaveStartingStepState_Static_187
   \                     ??DLKLeaveStartingStepState_Static_186:
   \   000F   A100           MOV       A,#0
   \                     ??DLKLeaveStartingStepState_Static_187:
   \   0011   B2             POP       BC
   \   0012   AF             RET       
   \   0013                  REQUIRE ?CL78K_V4_6_L00
   2172          }
   2173          
   2174          //--------------------------------------------------------------------------
   2175          // DESCRIPTION : DLKMotorActivationTimeOut
   2176          //
   2177          // PARAMETERS (Type,Name,Min,Max) :   none
   2178          //
   2179          // RETURN VALUE :   none 
   2180          //
   2181          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2182          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   2183          BOOL DLKMotorActivationTimeOut(void)
   \                     DLKMotorActivationTimeOut:
   2184          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
   2185              tTOSTempo TimeoutTicksL = mReadMotorActivationTimeoutTicks();
   \   0001   8E....         MOV       A,u8EEP_TPS_COM_MOTEUROld
   \   0004   48....         CMP       A,DATPeeCalibrationData+13
   \   0007   BD05           BNZ       ??DLKLeaveStartingStepState_Static_188
   \   0009   02....         MOVW      AX,MotorActivationTimeoutTicks
   \   000C   FA0E           BR        ??DLKLeaveStartingStepState_Static_189
   \                     ??DLKLeaveStartingStepState_Static_188:
   \   000E   8E....         MOV       A,DATPeeCalibrationData+13
   \   0011   9E....         MOV       u8EEP_TPS_COM_MOTEUROld,A
   \   0014   A00A           MOV       X,#10
   \   0016   3188           MULU      X
   \   0018   A20A           MOV       C,#10
   \   001A   3182           DIVUW     C
   \                     ??DLKLeaveStartingStepState_Static_189:
   \   001C   03....         MOVW      MotorActivationTimeoutTicks,AX
   2186              BOOL bResultL = TOSIsTempoElapsed(&MotorActivationTime, TimeoutTicksL);
   2187          
   2188              return bResultL;
   \   001F   D2             MOVW      BC,AX
   \   0020   10....         MOVW      AX,#MotorActivationTime
   \   0023   ..             CALLT     [__T_TOSIsTimerElapsed]
   \   0024   B2             POP       BC
   \   0025   AF             RET       
   \   0026                  REQUIRE ?CL78K_V4_6_L00
   2189          }
   2190          
   2191          //--------------------------------------------------------------------------
   2192          // DESCRIPTION : DLKNoRequest
   2193          //
   2194          // PARAMETERS (Type,Name,Min,Max) :   none
   2195          //
   2196          // RETURN VALUE :   none 
   2197          //
   2198          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2199          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   2200          BOOL DLKNoRequest(void)
   \                     DLKNoRequest:
   2201          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2202              BOOL bReturnValueL;
   2203              
   2204              if (MotorPattern == cRelayRestPosition)
   \   0000   8E....         MOV       A,MotorPattern
   \   0003   4D00           CMP       A,#0
   \   0005   BD08           BNZ       ??DLKLeaveStartingStepState_Static_190
   2205              {
   2206                  mReset(Control, MotorsAreInOperation); //to authorise Sleep
   \   0007   A101           MOV       A,#1
   \   0009   16....         MOVW      HL,#DLKControlStatus
   \   000C   71A3           CLR1      [HL].2
   2207                  bReturnValueL = cTrue;
   \   000E   AF             RET       
   2208              }
   2209              else
   2210              {
   2211                  bReturnValueL = cFalse;
   \                     ??DLKLeaveStartingStepState_Static_190:
   \   000F   A100           MOV       A,#0
   2212              }
   2213              
   2214              return(bReturnValueL);
   \   0011   AF             RET       
   \   0012                  REQUIRE ?CL78K_V4_6_L00
   2215          }
   2216          
   2217          //--------------------------------------------------------------------------
   2218          // DESCRIPTION :      DLKUpdateByVerlogOfKeyIsAuthenticated
   2219          //
   2220          // PARAMETERS (Type,Name,Min,Max) :   none
   2221          //
   2222          // RETURN VALUE :   none 
   2223          //
   2224          // DESIGN INFORMATION : control coming from carimmo:KeyIsAuthenticated
   2225          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   2226          void DLKUpdateByVerlogOfKeyIsAuthenticated(void)
   \                     DLKUpdateByVerlogOfKeyIsAuthenticated:
   2227          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2228              mSet(Control, KeyIsAuthenticated);
   \   0000   16....         MOVW      HL,#DLKControlStatus
   \   0003   7192           SET1      [HL].1
   2229          }
   \   0005   AF             RET       
   \   0006                  REQUIRE ?CL78K_V4_6_L00
   2230          
   2231          //--------------------------------------------------------------------------
   2232          // DESCRIPTION : DLKAirbagInformationManagement
   2233          //
   2234          // PARAMETERS (Type,Name,Min,Max) :   none
   2235          //
   2236          // RETURN VALUE :   none
   2237          //
   2238          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2239          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   2240          void DLKAirbagInformationManagement(void)
   \                     DLKAirbagInformationManagement:
   2241          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2242          #ifdef X90_PROJECT
   2243              DLKAirbagInformationManagement_Static();
   \   0001   16....         MOVW      HL,#LWRD(DLKAirbagInformationManagement_Static)
   \   0004   A4..           MOV       E,#BYTE3(DLKAirbagInformationManagement_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2244          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2245          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2246          static MEM_TYPE void DLKAirbagInformationManagement_Static(void)
   \                     DLKAirbagInformationManagement_Static:
   2247          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   102000         MOVW      AX,#32
   \   0003   B3             PUSH      BC
   \   0004                  ; Total Auto size: 0
   2248          #endif
   2249              BOOL bCrashByAirbagL;
   2250              U8 u8CrashCountL;
   2251              bCrashByAirbagL =   (BOOL)(TOSReadSignal(cTOSSignalCrashIsDetectedByAirbag) == cTrue); //crash coming from serial line
   \   0004   ..             CALLT     [__T_TOSReadSignal]
   \   0005   51             DEC       A
   \   0006   BD41           BNZ       ??DLKLeaveStartingStepState_Static_175
   \   0008   16....         MOVW      HL,#DLKControlStatus+3
   \   000B   31A63B         BT        [HL].2, ??DLKLeaveStartingStepState_Static_175
   2252              
   2253              if ((bCrashByAirbagL == cTrue) && 
   2254                  (mRead(Control, LWSForbiddenAfterCrash) == cFalse) ) // prsFS_DLK-757
   2255              {
   2256                  // prsFS_DLK-549: Crash
   2257                  mSet(Arbitration, CrashUnlock);
   \   000E   16....         MOVW      HL,#DLKArbitrationStatus
   \   0011   71D2           SET1      [HL].5
   2258                  mDATWrite(U1Bit, EEP_CrashHazardIsRequested, cTrue, Immediate);
   \   0013   16....         MOVW      HL,#DATDbkMirrors+24
   \   0016   31A60B         BT        [HL].2, ??DLKLeaveStartingStepState_Static_176
   \   0019   87             MOV       A,[HL]
   \   001A   6D04           OR        A,#4
   \   001C   9E....         MOV       DATDbkMirrors+24,A
   \   001F   A101           MOV       A,#1
   \   0021   9A....         CALL      DATDbkStartUpdate
   2259                  mSet(Control, LWSForbiddenAfterCrash);
   \                     ??DLKLeaveStartingStepState_Static_176:
   \   0024   102100         MOVW      AX,#33
   \   0027   16....         MOVW      HL,#DLKControlStatus+3
   \   002A   71A2           SET1      [HL].2
   2260                  TOSWriteSignal(cTOSSignalCrashUnlockStarted); // Cm006968
   \   002C   ..             CALLT     [__T_TOSWriteSignal]
   2261          
   2262                  // crash counter
   2263                  u8CrashCountL = mDATRead(U8Bit, EEP_CrashCount, Default);
   \   002D   8E....         MOV       A,DATDbkMirrors+6
   \   0030   72             MOV       C,A
   2264                  if (u8CrashCountL < cMaxU8)
   \   0031   41             INC       A
   \   0032   AD35           BZ        ??DLKLeaveStartingStepState_Static_177
   2265                  {
   2266                      mDATWrite(U8Bit, EEP_CrashCount, (u8CrashCountL + (U8)1U), Default);
   \   0034   62             MOV       A,C
   \   0035   70             MOV       X,A
   \   0036   A100           MOV       A,#0
   \   0038   80             INCW      AX
   \   0039   5DFF           AND       A,#255
   \   003B   BD05           BNZ       ??DLKLeaveStartingStepState_Static_178
   \   003D   42             INC       C
   \   003E   62             MOV       A,C
   \   003F   9E....         MOV       DATDbkMirrors+6,A
   \                     ??DLKLeaveStartingStepState_Static_178:
   \   0042   A100           MOV       A,#0
   \   0044   9A....         CALL      DATDbkStartUpdate
   \   0047   FA20           BR        ??DLKLeaveStartingStepState_Static_177
   2267                  }
   2268              }
   2269              else if (mDATRead(U1Bit, DefAirbag, Default) == cTrue) //malfunction serial line
   \                     ??DLKLeaveStartingStepState_Static_175:
   \   0049   8E....         MOV       A,DATCmnData+17
   \   004C   51             DEC       A
   \   004D   16....         MOVW      HL,#DLKControlStatus+2
   \   0050   BD15           BNZ       ??DLKLeaveStartingStepState_Static_179
   2270                  //airbag malfunction
   2271              {
   2272                  if (mRead(Control, AirBagMalFunctionDetected) == cFalse) //to detect a raising edge
   \   0052   318614         BT        [HL].0, ??DLKLeaveStartingStepState_Static_177
   2273                  {
   2274                      mSet(Control, AirBagMalFunctionDetected);
   \   0055   7182           SET1      [HL].0
   2275          
   2276                      if (mRead(Control, SafetyUnlockAllowed) != cFalse) //Cm006989, Cm007440
   \   0057   86             INCW      HL
   \   0058   31C70E         BF        [HL].4, ??DLKLeaveStartingStepState_Static_177
   2277                      {
   2278                          mSet(Control, LWSForbiddenByAirBagMalFunction);
   \   005B   16....         MOVW      HL,#DLKControlStatus+2
   \   005E   7192           SET1      [HL].1
   2279                          mSet(Arbitration, CrashUnlock); // Safety unlock
   \   0060   16....         MOVW      HL,#DLKArbitrationStatus
   \   0063   71D2           SET1      [HL].5
   \   0065   FA02           BR        ??DLKLeaveStartingStepState_Static_177
   2280                      }
   2281                      else
   2282                      {
   2283                          // do not perform safety unlock
   2284                      }
   2285                  }
   2286                  else
   2287                  {
   2288                      // do nothing
   2289                  }
   2290              }
   2291              else
   2292              {
   2293                  mReset(Control, AirBagMalFunctionDetected);
   \                     ??DLKLeaveStartingStepState_Static_179:
   \   0067   7183           CLR1      [HL].0
   2294              }
   2295          }
   \                     ??DLKLeaveStartingStepState_Static_177:
   \   0069   B2             POP       BC
   \   006A   AF             RET       
   \   006B                  REQUIRE ?CL78K_V4_6_L00
   2296          
   2297          //--------------------------------------------------------------------------
   2298          // DESCRIPTION : DLKIgnitionIsOff
   2299          //
   2300          // PARAMETERS (Type,Name,Min,Max) :   none
   2301          //
   2302          // RETURN VALUE :   none 
   2303          //
   2304          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2305          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   2306          BOOL DLKIgnitionIsOff(void)
   \                     DLKIgnitionIsOff:
   2307          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2308              return( (BOOL)(   (mDATRead(U1Bit, EEP_AUTCRASH, Default) == cFalse) // prsFS_DLK-423
   2309                  || (mDATRead(U1Bit, PWR_IGN, Default) == cFalse) // prsFS_DLK-558
   2310                  )
   2311                  );
   \   0000   16....         MOVW      HL,#DATDbkMirrors+26
   \   0003   31F708         BF        [HL].7, ??DLKLeaveStartingStepState_Static_191
   \   0006   A100           MOV       A,#0
   \   0008   7104..         MOV1      CY,S:DATDinInputBuffers+6.0
   \   000B   01             NOT1      CY
   \   000C   27             ROLC      A,0x1
   \   000D   AF             RET       
   \                     ??DLKLeaveStartingStepState_Static_191:
   \   000E   A101           MOV       A,#1
   \   0010   AF             RET       
   \   0011                  REQUIRE ?CL78K_V4_6_L00
   2312          }
   2313          
   2314          //--------------------------------------------------------------------------
   2315          // DESCRIPTION : DLKStopAirbag
   2316          //
   2317          // PARAMETERS (Type,Name,Min,Max) :   none
   2318          //
   2319          // RETURN VALUE :   none
   2320          //
   2321          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2322          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   2323          void DLKStopAirbag(void)
   \                     DLKStopAirbag:
   2324          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2325              mDATControl(Rbag, Stop);
   \   0001   16....         MOVW      HL,#LWRD(DATRbgStop)
   \   0004   A4..           MOV       E,#BYTE3(DATRbgStop)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2326              mReset(Control, AirBagMalFunctionDetected);
   \   0007   16....         MOVW      HL,#DLKControlStatus+2
   \   000A   7183           CLR1      [HL].0
   2327          }
   \   000C   B4             POP       DE
   \   000D   AF             RET       
   \   000E                  REQUIRE ?CL78K_V4_6_L00
   2328          
   2329          //--------------------------------------------------------------------------
   2330          // DESCRIPTION : DLKIgnitionIsOnAndKeyWasRecognizedAndLWS
   2331          //
   2332          // PARAMETERS (Type,Name,Min,Max) :   none
   2333          //
   2334          // RETURN VALUE :   none 
   2335          //
   2336          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2337          //--------------------------------------------------------------------------

   \                                 In  segment CODE, align 1, keep-with-next
   2338          BOOL DLKIgnitionIsOnAndKeyWasRecognizedAndLWS(void)
   \                     DLKIgnitionIsOnAndKeyWasRecognizedAndLWS:
   2339          { 
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2340              return( (BOOL)(   (mDATRead(U1Bit, EEP_AUTCRASH, Default) == cTrue) // prsFS_DLK-423
   2341                  && (mDATRead(U1Bit, PWR_IGN, Default) == cTrue) // prsFS_DLK-558
   2342                  && (mRead(Control, KeyIsAuthenticated) == cTrue) // prsFS_DLK-558
   2343                  )
   2344                  );
   \   0000   16....         MOVW      HL,#DATDbkMirrors+26
   \   0003   31F710         BF        [HL].7, ??DLKLeaveStartingStepState_Static_192
   \   0006   3103..0C       BF        S:DATDinInputBuffers+6.0, ??DLKLeaveStartingStepState_Static_192
   \   000A   16....         MOVW      HL,#DLKControlStatus
   \   000D   319703         BF        [HL].1, ??DLKLeaveStartingStepState_Static_193
   \   0010   A101           MOV       A,#1
   \   0012   AF             RET       
   \                     ??DLKLeaveStartingStepState_Static_193:
   \   0013   A100           MOV       A,#0
   \   0015   AF             RET       
   \                     ??DLKLeaveStartingStepState_Static_192:
   \   0016   A100           MOV       A,#0
   \   0018   AF             RET       
   \   0019                  REQUIRE ?CL78K_V4_6_L00
   2345          }
   2346          
   2347          //==============================================================================
   2348          // DESCRIPTION : DLKStartAirbag
   2349          //
   2350          // PARAMETERS (Type,Name,Min,Max) :   none
   2351          //
   2352          // RETURN VALUE :   none
   2353          //
   2354          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2355          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   2356          void DLKStartAirbag(void)
   \                     DLKStartAirbag:
   2357          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2358              mDATControl(Rbag, Start);
   \   0001   16....         MOVW      HL,#LWRD(DATRbgStart)
   \   0004   A4..           MOV       E,#BYTE3(DATRbgStart)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2359              TOSReadSignal(cTOSSignalCrashIsDetectedByAirbag); //crash coming from serial line
   \   0007   102000         MOVW      AX,#32
   \   000A   ..             CALLT     [__T_TOSReadSignal]
   2360          }
   \   000B   B4             POP       DE
   \   000C   AF             RET       
   \   000D                  REQUIRE ?CL78K_V4_6_L00
   2361          
   2362          //==============================================================================
   2363          // DESCRIPTION : DLKLeaveStartingStepState
   2364          //
   2365          // PARAMETERS (Type,Name,Min,Max) :   none
   2366          //
   2367          // RETURN VALUE :   none
   2368          //
   2369          // DESIGN INFORMATION : (pseudo code, algorithm ... )
   2370          //==============================================================================

   \                                 In  segment CODE, align 1, keep-with-next
   2371          void DLKLeaveStartingStepState(void)
   \                     DLKLeaveStartingStepState:
   2372          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
   2373          #ifdef X90_PROJECT
   2374              static MEM_TYPE void DLKLeaveStartingStepState_Static(void);
   2375              DLKLeaveStartingStepState_Static();
   \   0001   16....         MOVW      HL,#LWRD(DLKLeaveStartingStepState_Static)
   \   0004   A4..           MOV       E,#BYTE3(DLKLeaveStartingStepState_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
   2376          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
   2377          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
   2378          static MEM_TYPE void DLKLeaveStartingStepState_Static(void)
   \                     DLKLeaveStartingStepState_Static:
   2379          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
   2380          #endif
   2381          
   2382              if ( mDATRead(U1Bit, EEP_CAR_SECURE, Default) == cTrue)
   \   0000   16....         MOVW      HL,#DATDbkMirrors+27
   \   0003   31F707         BF        [HL].7, ??DLKLeaveStartingStepState_Static_180
   2383              {
   2384                  mSet(Control, CarSecure);
   \   0006   16....         MOVW      HL,#DLKControlStatus+3
   \   0009   71B2           SET1      [HL].3
   \   000B   FA05           BR        ??DLKLeaveStartingStepState_Static_181
   2385              }
   2386              else
   2387              {
   2388                  mReset(Control, CarSecure);
   \                     ??DLKLeaveStartingStepState_Static_180:
   \   000D   16....         MOVW      HL,#DLKControlStatus+3
   \   0010   71B3           CLR1      [HL].3
   2389              }
   2390              
   2391              if ( mDATRead(U1Bit, EEP_CrashHazardIsRequested, Default) == cTrue)
   \                     ??DLKLeaveStartingStepState_Static_181:
   \   0012   16....         MOVW      HL,#DATDbkMirrors+24
   \   0015   31A70C         BF        [HL].2, ??DLKLeaveStartingStepState_Static_182
   2392              {
   2393                  mSet(Arbitration, CrashUnlock);
   \   0018   A102           MOV       A,#2
   \   001A   16....         MOVW      HL,#DLKArbitrationStatus
   \   001D   71D2           SET1      [HL].5
   2394                  TOSSendControl(cTOSControlWakeUpRequest);
   \   001F   ..             CALLT     [__T_TOSSendControl]
   2395                  TOSWriteSignal(cTOSSignalCrashUnlockStarted); // Cm006968
   \   0020   102100         MOVW      AX,#33
   \   0023   ..             CALLT     [__T_TOSWriteSignal]
   2396              }
   2397          
   2398              // Cm006152: DLK: IR_A07 according to Cm006108
   2399              //doorlock LED after power ON reset is set according to EEP flag
   2400              if (mDATRead(U1Bit, EEP_DoorlockLedActivation, Default) != cFalse)
   \                     ??DLKLeaveStartingStepState_Static_182:
   \   0024   16....         MOVW      HL,#DATDbkMirrors+28
   \   0027   31A710         BF        [HL].2, ??DLKLeaveStartingStepState_Static_183
   2401              {
   2402                  LEDCommandRequested = cLEDOnRequested;
   \   002A   A101           MOV       A,#1
   \   002C   9E....         MOV       LEDCommandRequested,A
   2403                  mDATWrite(U1Bit, OPEN_DOOR_LED, cTrue, Immediate);
   \   002F   BC..08         BT        S:DATPouSoftOutputBuffer.3, ??DLKLeaveStartingStepState_Static_183
   \   0032   101000         MOVW      AX,#16
   \   0035   3A..           SET1      S:DATPouSoftOutputBuffer.3
   \   0037   9A....         CALL      TOSActivateTask
   2404              }
   2405              else
   2406              {
   2407                  // Nothing to do: LED is off by default
   2408              }
   2409          }
   \                     ??DLKLeaveStartingStepState_Static_183:
   \   003A   AF             RET       
   \   003B                  REQUIRE ?CL78K_V4_6_L00

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSStartTimer:
   \   0000   ....           DW       TOSStartTimer

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSStopTimer:
   \   0000   ....           DW       TOSStopTimer

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSIsTimerElapsed:
   \   0000   ....           DW       TOSIsTimerElapsed

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_CALL_L07:
   \   0000   ....           DW       ?FAR_CALL_L07

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_FAST_CALL_L07:
   \   0000   ....           DW       ?FAR_FAST_CALL_L07

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSReadSignal:
   \   0000   ....           DW       TOSReadSignal

   \                                 In  segment CLTVEC, align 2
   \                     __T_?I_MUL_L02:
   \   0000   ....           DW       ?I_MUL_L02

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSWriteSignal:
   \   0000   ....           DW       TOSWriteSignal

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSSeqActivateGraph:
   \   0000   ....           DW       TOSSeqActivateGraph

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSSeqDeactivateGraph:
   \   0000   ....           DW       TOSSeqDeactivateGraph

   \                                 In  segment CLTVEC, align 2
   \                     __T_TOSSendControl:
   \   0000   ....           DW       TOSSendControl
   2410          
   2411          /* [EXPORTED_FUNCTIONS_END] */
   2412          

   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     DLKMotorCommand                  36
     DLKAirbagManagement              24
     DLKOutputData                     6
     DLKInputData                      6
     DLKControlStatus                  4
     DLKArbitrationStatus              1
     DLKTimerControlStatus             2
     NbLWSOpenCloseDoor                1
     MotorPattern                      1
     MotorActionCounter                1
     LEDCommandRequested               1
     DLKLastCommandRequested           2
     CommandRequested                  2
     LockWithSpeedTime                 2
     SevereAbuseTime                   2
     SevereAbuseTimeOut                2
     DebounceTime                      2
     MotorActivationTime               2
     AutoRelockTime                    2
     CDLDebounceTime                   2
     LWSActivationTime                 2
     LedActivationTime                 2
     VehiculeHasBeenMovingTime         2
     SDOTimeOut                        2
     AutoRelockTimeOutTicks            2
     u8EEP_TIMER_RECONDA_AUTOOld       1
     MotorActivationTimeoutTicks       2
     u8EEP_TPS_COM_MOTEUROld           1
     SevereAbuseTimeOutShortTicks      2
     u8EEP_TPS_REFShort                1
     SevereAbuseTimeOutLongTicks       2
     u8EEP_TPS_REFLong                 1
     SDOTimeOutTicks                   2
     u8EEP_TPS_OUVPORTEOld             1
     bPWR_IGNOld                       1
     ProtectionState                   1
     ImmoEcmProtection                 2
     bLED_VERLOGStopped                1
     DLKProtectionTask               257
     SetVerlogLedDefect               45
     SetDoorlockLedDefect             42
     DLKInputDataManagement            9
     DLKInputDataManagement_Static  1483
     DLKOutputDataManagement           9
     DLKOutputDataManagement_Static  302
     DLKProtectionSleepModeCallBack    9
     DLKProtectionSleepModeCallBack_Static
                                      22
     DLKInitialize                     9
     DLKInitialize_Static            100
     DLKIsAnybodyMaintainActiveState
                                      30
     DLKEnterActiveState              18
     DLKLeaveActiveState              13
     DLKCommandCPERelay               10
     DLKCommandIsPending               9
     DLKCommandIsPending_Static      281
     DLKCommandMotorRelays             9
     DLKCommandMotorRelays_Static    349
     DLKDeCommandMotorRelays           9
     DLKDeCommandMotorRelays_Static  113
     DLKDebounceTimeOut               19
     DLKMotorActivationTimeOut        38
     DLKNoRequest                     18
     DLKUpdateByVerlogOfKeyIsAuthenticated
                                       6
     DLKAirbagInformationManagement    9
     DLKAirbagInformationManagement_Static
                                     107
     DLKIgnitionIsOff                 17
     DLKStopAirbag                    14
     DLKIgnitionIsOnAndKeyWasRecognizedAndLWS
                                      25
     DLKStartAirbag                   13
     DLKLeaveStartingStepState         9
     DLKLeaveStartingStepState_Static
                                      59
     __T_TOSStartTimer                 2
     __T_TOSStopTimer                  2
     __T_TOSIsTimerElapsed             2
     __T_?FAR_CALL_L07                 2
     __T_?FAR_FAST_CALL_L07            2
     __T_TOSReadSignal                 2
     __T_?I_MUL_L02                    2
     __T_TOSWriteSignal                2
     __T_TOSSeqActivateGraph           2
     __T_TOSSeqDeactivateGraph         2
     __T_TOSSendControl                2

 
 3 160 bytes in segment BCODE
    22 bytes in segment CLTVEC
   302 bytes in segment CODE
    72 bytes in segment CONST
    57 bytes in segment NEAR_Z
 
 3 462 bytes of CODE  memory (+ 22 bytes shared)
    72 bytes of CONST memory
    57 bytes of DATA  memory

Errors: none
Warnings: none
