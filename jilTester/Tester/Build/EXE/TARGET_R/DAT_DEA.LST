###############################################################################
#                                                                             #
# IAR C/C++ Compiler V4.61A/W32 for 78K0 and 78K0S      15/Feb/2011  13:26:22 #
# Copyright 1992-2008 IAR Systems AB.                                         #
#                                                                             #
#    Core         =  78k0                                                     #
#    Code model   =  Standard                                                 #
#                 =                                                           #
#    Source file  =  D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\DAT\D #
#                    AT_DEA.C                                                 #
#    Command line =  --code_model standard --core 78k0 -e                     #
#                    -DMEM_TYPE=__banked -DMEM_FAST=__saddr                   #
#                    -DCALLT_TYPE=__callt -DX90_PROJECT                       #
#                    --generate_callt_runtime_library_calls -Ohs              #
#                    "-IC:\Program Files\IAR Systems\Embedded Workbench       #
#                    5.0\78k\inc" "-IC:\Program Files\IAR Systems\Embedded    #
#                    Workbench 5.0\78k\inc\clib" -I. -I..\EXE\GEN\            #
#                    -I..\SOURCES\DAT -I..\SOURCES\LAP -I..\SOURCES\LDB_API   #
#                    -I..\SOURCES\LIB -I..\SOURCES\TOS -I.\LDB -DROM          #
#                    -DUSE_LIBSTK -DDONT_KEEP_OLD_TYPE_COMPATIBILITY -l       #
#                    ..\EXE\TARGET_R\DAT_DEA.LST -o                           #
#                    ..\EXE\TARGET_R\DAT_DEA.R26                              #
#                    D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\DAT\D #
#                    AT_DEA.C                                                 #
#    List file    =  ..\EXE\TARGET_R\DAT_DEA.LST                              #
#    Object file  =  ..\EXE\TARGET_R\DAT_DEA.R26                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\X90_BCM\DEVELOPMENT\X90_BCM\K0\L7\BUILD\SOURCES\DAT\DAT_DEA.C
      1          /*=========================================================================
      2            Fonction ........................ dat
      3            Composant ....................... dat_dea
      4            Revision PVCS du fichier ........ :   1.3  $
      5            Date de derniere modification ... $Modtime:   Apr 25 2009 20:57:34  $
      6            ------------------------------------------------------------------------- 
      7            Copyright ...... Ce logiciel est la propriete de JCI. Il ne peut etre
      8                             reproduit ni communique en totalite ou partie sans son
      9                             autorisation ecrite.
     10            ------------------------------------------------------------------------- 
     11            Definition des fonctions exportees par le composant dat_dea:
     12          
     13            Ce fichier dat_dea.c sera compile en un fichier dat_dea.o,
     14            contenant le code objet des fonctions exportees par le composant.
     15          
     16            - Les  macros, constantes et types qui ne sont pas destines a etre
     17              exportes sont definis dans ce fichier.
     18            - Les variables et fonctions qui ne sont pas destinees a etre exportees
     19              sont definies dans ce fichier et precedees du mot-cle static.
     20          
     21            -------------------------------------------------------------------------
     22            Reference a la documentation: voir le fichier dat_dea.h
     23            ------------------------------------------------------------------------- 
     24            Presentation du composant: voir le fichier dat_dea.h
     25            -------------------------------------------------------------------------
     26            Commentaires sur le fonctionnement interne du composant:
     27              (structures de donnees, algorithmes, limitations, ...)
     28          
     29            -------------------------------------------------------------------------
     30            Historique PVCS du fichier dat_dea.c:
     31          
     32            :   //45s3/standard/Composants standards/pvcs/archives/Sources/DAT/EEP/DAT_DEA/Dat_dea.c-arc  $
     33           * 
     34           *    Rev 1.3   Mar 11 2002 21:42:20   lelabous
     35           * Complément de la correction de l'EPT PON URD 42  EPT96
     36           * 
     37           *    Rev 1.2   Mar 11 2002 21:10:14   lelabous
     38           * Correction de l'EPT PON URD42 EPT96 (Impossible d'accéder au dernier octet de l'Eeprom). 
     39           * 
     40           *    Rev 1.1   Feb 21 2002 15:32:22   lelabous
     41           * Suppression des commentaires au niveau de l'entête des fichiers
     42           * 
     43           *    Rev 1.0   Feb 11 2002 09:57:44   barbaux
     44           * Initial revision.
     45           * 
     46           
     47            REsumE des modifications:
     48            -------------------------
     49          
     50            ModifiE par XXX le XX:XX:XX  (EPT Pris en compte : XXX) :
     51                          XXXXXXXXXXXXXXXXXXXXXXXXXX
     52                          XXXXXXXXXXXXXXXXXXXXX
     53          
     54          
     55            =========================================================================*/
     56          
     57          /*-------------------------------------------------------------------------
     58            Identification du corps
     59            -------------------------------------------------------------------------*/
     60          #define dat_dea  "dat_dea"
     61          
     62          /*-------------------------------------------------------------------------
     63            Fichiers inclus
     64          
     65            #include <nom_du_ficher_systeme.h>
     66            #include "nom_du_ficher_utilisateur.h"
     67            -------------------------------------------------------------------------*/ 
     68          #include "deftypes.h"  
     69          #include "lib.h"
     70          #include "dat_dea.h"
     71          
     72          /*-------------------------------------------------------------------------
     73            Constantes locales
     74          
     75            #define cNomConstante   ValeurDeLaConstante
     76            -------------------------------------------------------------------------*/  
     77          
     78          /*-------------------------------------------------------------------------
     79            Macro locales
     80          
     81            #define mNomMacro   (DefinitionDeLaMacro)
     82            -------------------------------------------------------------------------*/  
     83          #define mConvAdress8ToAdr16( Adr8 ) (U16)(Adr8 >> 1U)
     84          #define mConvNumberByteToNumberWord( NumberByte ) (tDATEepOffset)(NumberByte >> 1U)
     85          
     86          /*-------------------------------------------------------------------------
     87            Types locaux
     88          
     89            struct  sNomStructure { ... };
     90            union   uNomUnion { ... };
     91            enum    eNomEnumeration { ... };
     92            typedef Expression tNomType;
     93            -------------------------------------------------------------------------*/
     94          typedef enum
     95          {
     96              cProcessRequest=0,
     97              cActionRequest
     98          } tCallBackRequest;
     99          
    100          typedef enum
    101          {
    102              cWriteByAddress=0,
    103              cReadByAddress
    104          } tActionRequest;
    105          
    106          /*-------------------------------------------------------------------------
    107            Variables locales
    108          
    109            static  tType   NomVariable;
    110            static  tType*  pNomVariable; 
    111            -------------------------------------------------------------------------*/
    112          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    113          static tCallBackRequest   CallBackRequest;
   \                     CallBackRequest:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    114          static tActionRequest     ActionRequest;
   \                     ActionRequest:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    115          static BOOL           WriteToEEPROM;
   \                     WriteToEEPROM:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    116          static BOOL           ProcessSupervisorIsActive;
   \                     ProcessSupervisorIsActive:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    117          /*-------------------------------------------------------------------------
    118            Donnees constantes locales
    119          
    120            static const tType  NomVariable;
    121            -------------------------------------------------------------------------*/  
    122          
    123          /*-------------------------------------------------------------------------
    124            Variables exportees
    125          
    126            tType   COMNomVariable;          (COM: 3 lettres identifiant ce composant)
    127            tType*  pCOMNomVariable;         (COM: 3 lettres identifiant ce composant)
    128            -------------------------------------------------------------------------*/ 
    129          

   \                                 In  segment NEAR_Z, align 1, align-sorted
    130          U8    DATDeaBufferU8Bit[cDATDeaMaxByte];
   \                     DATDeaBufferU8Bit:
   \   0000                  DS 16
   \   0010                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 2, align-sorted
    131          U16   DATDeaAddressInByte;
   \                     DATDeaAddressInByte:
   \   0000                  DS 2
   \   0002                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    132          U8    DATDeaSizeBufferInByte;
   \                     DATDeaSizeBufferInByte:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    133          BOOL  DATDeaWriteIsOk;
   \                     DATDeaWriteIsOk:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z

   \                                 In  segment NEAR_Z, align 1, align-sorted
    134          BOOL  DATDeaActionIsFinished;
   \                     DATDeaActionIsFinished:
   \   0000                  DS 1
   \   0001                  REQUIRE __INIT_NEAR_Z
    135          
    136          /*-------------------------------------------------------------------------
    137            Donnees constantes exportees
    138           
    139            const tType   COMNomVariable;    (COM: 3 lettres identifiant ce composant)
    140            -------------------------------------------------------------------------*/ 
    141          
    142          /*-------------------------------------------------------------------------
    143            Prototypes des fonctions locales
    144          
    145            static tTypeRetour NomFonction(tTypeArgument1 NomArgument1, ... );
    146            -------------------------------------------------------------------------*/
    147          static BOOL AddressAndNumberOfByteIsEven(void);
    148          static MEM_TYPE void StartAction(void);
    149          static MEM_TYPE BOOL CheckConditionBeforeStartAction(void);
    150          
    151          #ifdef X90_PROJECT
    152          static MEM_TYPE void DATDeaCallBackEep_Static(tDATEepProcessHandle ProcessHandle, BOOL StatutOK);
    153          static MEM_TYPE void DATDeaStartReadEepromByAddress_Static(void);
    154          static MEM_TYPE void DATDeaStartWriteEepromByAddress_Static(void);
    155          #endif    
    156          
    157          /*.........................................................................
    158            ........................... FONCTIONS LOCALES ...........................
    159            .........................................................................*/
    160          //****************************************************************************
    161          //   Function Name :
    162          //     static BOOL AddressAndNumberOfByteIsEven(void)
    163          //****************************************************************************
    164          // This function is only used in an assert call.
    165          // So, this function cannot be covered by the unitary test.
    166          static BOOL AddressAndNumberOfByteIsEven(void)
    167          {
    168              BOOL  Even;
    169          
    170              Even = ((DATDeaAddressInByte    & 0x01) == 0) &&
    171                     ((DATDeaSizeBufferInByte & 0x01) == 0);
    172          
    173              return Even;
    174          }
    175          
    176          //****************************************************************************
    177          //   Function Name :
    178          //     static BOOL CheckConditionBeforeStartAction(void)
    179          //****************************************************************************

   \                                 In  segment BCODE, align 1, keep-with-next
    180          static MEM_TYPE BOOL CheckConditionBeforeStartAction(void)
   \                     CheckConditionBeforeStartAction:
    181          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
    182              BOOL Status;
    183          
    184              Status = cFalse;
   \   0001   A200           MOV       C,#0
    185          
    186              if(  (AddressAndNumberOfByteIsEven())
    187                 &&((U16)((U16)DATDeaSizeBufferInByte+DATDeaAddressInByte)<=cDATDeaSizeEeprom)
    188                 &&(DATDeaActionIsFinished == cTrue)
    189                 &&(DATDeaSizeBufferInByte != 0))
   \   0003   16....         MOVW      HL,#DATDeaSizeBufferInByte
   \   0006   70             MOV       X,A
   \   0007   87             MOV       A,[HL]
   \   0008   5D01           AND       A,#1
   \   000A   30             XCH       A,X
   \   000B   16....         MOVW      HL,#DATDeaAddressInByte
   \   000E   D4             MOVW      DE,AX
   \   000F   100000         MOVW      AX,#0
   \   0012   7184           MOV1      CY,[HL].0
   \   0014   2D00           ADDC      A,#0
   \   0016   30             XCH       A,X
   \   0017   E4             XCHW      AX,DE
   \   0018   64             MOV       A,E
   \   0019   6168           OR        A,X
   \   001B   BD20           BNZ       ??DATDeaInitialize_0
   \   001D   8E....         MOV       A,DATDeaSizeBufferInByte
   \   0020   A000           MOV       X,#0
   \   0022   08....         ADD       A,DATDeaAddressInByte
   \   0025   30             XCH       A,X
   \   0026   28....         ADDC      A,DATDeaAddressInByte+1
   \   0029   EA0102         CMPW      AX,#513
   \   002C   9D0F           BNC       ??DATDeaInitialize_0
   \   002E   8E....         MOV       A,DATDeaActionIsFinished
   \   0031   51             DEC       A
   \   0032   BD09           BNZ       ??DATDeaInitialize_0
   \   0034   8E....         MOV       A,DATDeaSizeBufferInByte
   \   0037   4D00           CMP       A,#0
   \   0039   AD02           BZ        ??DATDeaInitialize_0
    190              {
    191                  // Check that the address and the number of byte are even
    192                  // Check that the Eeprom area to access is OK
    193                  // Check that the previous action is finished
    194                  // Check that the Length is not null
    195                  Status = cTrue;
   \   003B   A201           MOV       C,#1
    196              }
    197              else
    198              {
    199                  mLIBassert(cFalse);
    200              }
    201          
    202              return(Status);
   \                     ??DATDeaInitialize_0:
   \   003D   62             MOV       A,C
   \   003E   B2             POP       BC
   \   003F   AF             RET       
   \   0040                  REQUIRE ?CL78K_V4_6_L00
    203          }
    204          
    205          //****************************************************************************
    206          //   Function Name :
    207          //     static void StartAction(void)
    208          //****************************************************************************

   \                                 In  segment BCODE, align 1, keep-with-next
    209          static MEM_TYPE void StartAction(void)
   \                     StartAction:
    210          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   A101           MOV       A,#1
   \   0002   B3             PUSH      BC
   \   0003                  ; Total Auto size: 0
    211              CallBackRequest=cActionRequest;
   \   0003   9E....         MOV       CallBackRequest,A
    212          
    213              if (ActionRequest==cWriteByAddress)
   \   0006   8E....         MOV       A,ActionRequest
   \   0009   4D00           CMP       A,#0
   \   000B   8E....         MOV       A,DATDeaSizeBufferInByte
   \   000E   BD23           BNZ       ??DATDeaInitialize_1
    214              {
    215                  // Intialize the Eeprom work Buffer
    216                  mLIBmemcpy( (U8*)DATEepBuffer, DATDeaBufferU8Bit, DATDeaSizeBufferInByte);
   \   0010   74             MOV       E,A
   \   0011   10....         MOVW      AX,#DATEepBuffer
   \   0014   A500           MOV       D,#0
   \   0016   12....         MOVW      BC,#DATDeaBufferU8Bit
   \   0019   9A....         CALL      memcpy
    217                  DATEepAbsoluteWrite (DATEepBuffer, mConvAdress8ToAdr16(DATDeaAddressInByte),mConvNumberByteToNumberWord(DATDeaSizeBufferInByte));
   \   001C   8E....         MOV       A,DATDeaSizeBufferInByte
   \   001F   21             CLR1      CY
   \   0020   25             RORC      A,0x1
   \   0021   75             MOV       D,A
   \   0022   02....         MOVW      AX,DATDeaAddressInByte
   \   0025   21             CLR1      CY
   \   0026   25             RORC      A,0x1
   \   0027   30             XCH       A,X
   \   0028   25             RORC      A,0x1
   \   0029   30             XCH       A,X
   \   002A   D2             MOVW      BC,AX
   \   002B   10....         MOVW      AX,#DATEepBuffer
   \   002E   9A....         CALL      DATEepAbsoluteWrite
   \   0031   FA11           BR        ??DATDeaInitialize_2
    218              }
    219              else
    220              {
    221                  DATEepAbsoluteRead (DATEepBuffer, mConvAdress8ToAdr16(DATDeaAddressInByte), mConvNumberByteToNumberWord(DATDeaSizeBufferInByte));
   \                     ??DATDeaInitialize_1:
   \   0033   25             RORC      A,0x1
   \   0034   75             MOV       D,A
   \   0035   02....         MOVW      AX,DATDeaAddressInByte
   \   0038   21             CLR1      CY
   \   0039   25             RORC      A,0x1
   \   003A   30             XCH       A,X
   \   003B   25             RORC      A,0x1
   \   003C   30             XCH       A,X
   \   003D   D2             MOVW      BC,AX
   \   003E   10....         MOVW      AX,#DATEepBuffer
   \   0041   9A....         CALL      DATEepAbsoluteRead
    222              }
    223          }
   \                     ??DATDeaInitialize_2:
   \   0044   B2             POP       BC
   \   0045   AF             RET       
   \   0046                  REQUIRE ?CL78K_V4_6_L00
    224          
    225          /*.........................................................................
    226            ........................... FONCTIONS EXPORTEES .........................
    227            .........................................................................*/
    228          
    229          //****************************************************************************
    230          //   Function Name :
    231          //     void DATDeaStartWriteEepromByAddress (void)
    232          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    233          void DATDeaStartWriteEepromByAddress (void)
   \                     DATDeaStartWriteEepromByAddress:
    234          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    235          #ifdef X90_PROJECT
    236              DATDeaStartWriteEepromByAddress_Static();
   \   0001   16....         MOVW      HL,#LWRD(DATDeaStartWriteEepromByAddress_Static)
   \   0004   A4..           MOV       E,#BYTE3(DATDeaStartWriteEepromByAddress_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    237          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    238          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    239          static MEM_TYPE void DATDeaStartWriteEepromByAddress_Static(void)
   \                     DATDeaStartWriteEepromByAddress_Static:
    240          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    241          #endif
    242              if(CheckConditionBeforeStartAction() != cFalse)
   \   0000   16....         MOVW      HL,#LWRD(CheckConditionBeforeStartAction)
   \   0003   A4..           MOV       E,#BYTE3(CheckConditionBeforeStartAction)
   \   0005   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   0006   4D00           CMP       A,#0
   \   0008   AD1F           BZ        ??DATDeaInitialize_3
    243              {
    244                  // Init of flags
    245                  ActionRequest=cWriteByAddress;
   \   000A   A100           MOV       A,#0
   \   000C   9E....         MOV       ActionRequest,A
    246                  DATDeaActionIsFinished=cFalse;
   \   000F   9E....         MOV       DATDeaActionIsFinished,A
    247          
    248                  if (ProcessSupervisorIsActive==cFalse)
   \   0012   8E....         MOV       A,ProcessSupervisorIsActive
   \   0015   4D00           CMP       A,#0
   \   0017   BD0A           BNZ       ??DATDeaInitialize_4
    249                  {
    250                      // Open the supervisor process
    251                      CallBackRequest=cProcessRequest;
   \   0019   A100           MOV       A,#0
   \   001B   9E....         MOV       CallBackRequest,A
    252                      DATEepProcessRequest (cDATEepProcessSupervisor);
   \   001E   A10A           MOV       A,#10
   \   0020   9B....         BR        N:DATEepProcessRequest
    253                  }
    254                  else
    255                  {
    256                      StartAction();
   \                     ??DATDeaInitialize_4:
   \   0023   16....         MOVW      HL,#LWRD(StartAction)
   \   0026   A4..           MOV       E,#BYTE3(StartAction)
   \   0028   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
    257                  }
    258              }
    259              else
    260              {
    261                  mLIBassert(cTrue); //For QAC
    262                  //Do nothing
    263              }
    264          }
   \                     ??DATDeaInitialize_3:
   \   0029   AF             RET       
   \   002A                  REQUIRE ?CL78K_V4_6_L00
    265          
    266          
    267          //****************************************************************************
    268          //   Function Name :
    269          //     void DATDeaStartReadEepromByAddress (void)
    270          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    271          void DATDeaStartReadEepromByAddress (void)
   \                     DATDeaStartReadEepromByAddress:
    272          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    273          #ifdef X90_PROJECT
    274              DATDeaStartReadEepromByAddress_Static();
   \   0001   16....         MOVW      HL,#LWRD(DATDeaStartReadEepromByAddress_Static)
   \   0004   A4..           MOV       E,#BYTE3(DATDeaStartReadEepromByAddress_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    275          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    276          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    277          static MEM_TYPE void DATDeaStartReadEepromByAddress_Static(void)
   \                     DATDeaStartReadEepromByAddress_Static:
    278          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    279          #endif
    280          
    281              CheckConditionBeforeStartAction();
   \   0000   16....         MOVW      HL,#LWRD(CheckConditionBeforeStartAction)
   \   0003   A4..           MOV       E,#BYTE3(CheckConditionBeforeStartAction)
   \   0005   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
    282          
    283              // Init of flags
    284              ActionRequest=cReadByAddress;
   \   0006   A101           MOV       A,#1
   \   0008   9E....         MOV       ActionRequest,A
    285              DATDeaActionIsFinished=cFalse;
   \   000B   A100           MOV       A,#0
   \   000D   9E....         MOV       DATDeaActionIsFinished,A
    286          
    287              if (ProcessSupervisorIsActive==cFalse)
   \   0010   8E....         MOV       A,ProcessSupervisorIsActive
   \   0013   4D00           CMP       A,#0
   \   0015   BD0A           BNZ       ??DATDeaInitialize_5
    288              {
    289                  CallBackRequest=cProcessRequest;
   \   0017   A100           MOV       A,#0
   \   0019   9E....         MOV       CallBackRequest,A
    290                  // Open the supervisor process
    291                  DATEepProcessRequest (cDATEepProcessSupervisor);
   \   001C   A10A           MOV       A,#10
   \   001E   9B....         BR        N:DATEepProcessRequest
    292              }
    293              else
    294              {
    295                  StartAction();
   \                     ??DATDeaInitialize_5:
   \   0021   16....         MOVW      HL,#LWRD(StartAction)
   \   0024   A4..           MOV       E,#BYTE3(StartAction)
   \   0026   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
    296              }
    297          }
   \   0027   AF             RET       
   \   0028                  REQUIRE ?CL78K_V4_6_L00
    298          
    299          //****************************************************************************
    300          //   Function Name :
    301          //     void DATDeaCallBackEep (tDATEepProcessHandle ProcessHandle, BOOL StatutOK)
    302          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    303          void DATDeaCallBackEep (tDATEepProcessHandle ProcessHandle, BOOL StatutOK)
   \                     DATDeaCallBackEep:
    304          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B5             PUSH      DE
   \   0001                  ; Total Auto size: 0
    305          #ifdef X90_PROJECT
    306              DATDeaCallBackEep_Static(ProcessHandle, StatutOK);
   \   0001   16....         MOVW      HL,#LWRD(DATDeaCallBackEep_Static)
   \   0004   A4..           MOV       E,#BYTE3(DATDeaCallBackEep_Static)
   \   0006   ..             CALLT     [__T_?FAR_CALL_L07]
    307          }
   \   0007   B4             POP       DE
   \   0008   AF             RET       
   \   0009                  REQUIRE ?CL78K_V4_6_L00
    308          #pragma optimize=no_inline

   \                                 In  segment BCODE, align 1, keep-with-next
    309          static MEM_TYPE void DATDeaCallBackEep_Static(tDATEepProcessHandle ProcessHandle, BOOL StatutOK)
   \                     DATDeaCallBackEep_Static:
    310          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000   B3             PUSH      BC
   \   0001                  ; Total Auto size: 0
    311          #endif    
    312              switch (CallBackRequest)
   \   0001   8E....         MOV       A,CallBackRequest
   \   0004   4D00           CMP       A,#0
   \   0006   AD05           BZ        ??DATDeaInitialize_6
   \   0008   51             DEC       A
   \   0009   AD0F           BZ        ??DATDeaInitialize_7
   \   000B   FA4D           BR        ??DATDeaInitialize_8
    313              {
    314              case cProcessRequest :
    315                  // End of the request opening
    316                  ProcessSupervisorIsActive=cTrue;
   \                     ??DATDeaInitialize_6:
   \   000D   A101           MOV       A,#1
   \   000F   9E....         MOV       ProcessSupervisorIsActive,A
    317                  StartAction();
   \   0012   16....         MOVW      HL,#LWRD(StartAction)
   \   0015   A4..           MOV       E,#BYTE3(StartAction)
   \   0017   ..             CALLT     [__T_?FAR_FAST_CALL_L07]
   \   0018   FA40           BR        ??DATDeaInitialize_8
    318                  break;
    319          
    320              case cActionRequest :
    321                  // End of the action (writing or reading)
    322                  DATDeaActionIsFinished=cTrue;
   \                     ??DATDeaInitialize_7:
   \   001A   A101           MOV       A,#1
   \   001C   9E....         MOV       DATDeaActionIsFinished,A
    323          
    324                  if (ActionRequest==cWriteByAddress)
   \   001F   8E....         MOV       A,ActionRequest
   \   0022   4D00           CMP       A,#0
   \   0024   BD16           BNZ       ??DATDeaInitialize_9
    325                  {
    326                      DATDeaWriteIsOk=cTrue;
   \   0026   A101           MOV       A,#1
   \   0028   9E....         MOV       DATDeaWriteIsOk,A
    327                      if (StatutOK==cFalse)
   \   002B   63             MOV       A,B
   \   002C   4D00           CMP       A,#0
   \   002E   BD05           BNZ       ??DATDeaInitialize_10
    328                      {
    329                          DATDeaWriteIsOk=cFalse;
   \   0030   A100           MOV       A,#0
   \   0032   9E....         MOV       DATDeaWriteIsOk,A
    330                      }
    331                      else
    332                      {
    333                          // nothing
    334                      }
    335                      WriteToEEPROM=cTrue;
   \                     ??DATDeaInitialize_10:
   \   0035   A101           MOV       A,#1
   \   0037   9E....         MOV       WriteToEEPROM,A
   \   003A   FA1E           BR        ??DATDeaInitialize_8
    336                      // The supervisor process is never closed after a writing
    337                  }
    338                  else
    339                  {
    340                      // Copy the result of reading to DATDeaBufferU8Bit
    341                      mLIBmemcpy(DATDeaBufferU8Bit, (U8*)DATEepBuffer, DATDeaSizeBufferInByte);
   \                     ??DATDeaInitialize_9:
   \   003C   8E....         MOV       A,DATDeaSizeBufferInByte
   \   003F   74             MOV       E,A
   \   0040   10....         MOVW      AX,#DATDeaBufferU8Bit
   \   0043   A500           MOV       D,#0
   \   0045   12....         MOVW      BC,#DATEepBuffer
   \   0048   9A....         CALL      memcpy
    342          
    343                      if (WriteToEEPROM==cFalse)
   \   004B   8E....         MOV       A,WriteToEEPROM
   \   004E   4D00           CMP       A,#0
   \   0050   BD08           BNZ       ??DATDeaInitialize_8
    344                      {
    345                          // Close the supervisor process if no writing have been done before
    346                          DATEepTerminateProcess();
   \   0052   9A....         CALL      DATEepTerminateProcess
    347                          ProcessSupervisorIsActive=cFalse;
   \   0055   A100           MOV       A,#0
   \   0057   9E....         MOV       ProcessSupervisorIsActive,A
    348                      }
    349                      else
    350                      {
    351                          // The supervisor process is never closed after a writing
    352                      }
    353                  }
    354                  break;
    355          
    356              default :
    357                  // impossible
    358                  mLIBassert( cFalse );
    359                  break;
    360              }
    361          }
   \                     ??DATDeaInitialize_8:
   \   005A   B2             POP       BC
   \   005B   AF             RET       
   \   005C                  REQUIRE ?CL78K_V4_6_L00
    362          
    363          //****************************************************************************
    364          //   Function Name :
    365          //    void DATDeaInitialize (void)
    366          //****************************************************************************

   \                                 In  segment CODE, align 1, keep-with-next
    367          void DATDeaInitialize (void)
   \                     DATDeaInitialize:
    368          {
   \   0000                  ; * Stack frame (at entry) *
   \   0000                  ; Param size: 0
   \   0000                  ; Total Auto size: 0
    369              mLIBassert( sizeof(DATDeaBufferU8Bit) <= sizeof(DATEepBuffer) );
    370          
    371              DATDeaWriteIsOk=cTrue;
   \   0000   A101           MOV       A,#1
   \   0002   9E....         MOV       DATDeaWriteIsOk,A
    372              DATDeaActionIsFinished=cTrue;
   \   0005   9E....         MOV       DATDeaActionIsFinished,A
    373              WriteToEEPROM=cFalse;
   \   0008   A100           MOV       A,#0
   \   000A   9E....         MOV       WriteToEEPROM,A
    374              ProcessSupervisorIsActive=cFalse;
   \   000D   9E....         MOV       ProcessSupervisorIsActive,A
    375          }
   \   0010   AF             RET       
   \   0011                  REQUIRE ?CL78K_V4_6_L00

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_CALL_L07:
   \   0000   ....           DW       ?FAR_CALL_L07

   \                                 In  segment CLTVEC, align 2
   \                     __T_?FAR_FAST_CALL_L07:
   \   0000   ....           DW       ?FAR_FAST_CALL_L07

   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     CallBackRequest                   1
     ActionRequest                     1
     WriteToEEPROM                     1
     ProcessSupervisorIsActive         1
     DATDeaBufferU8Bit                16
     DATDeaAddressInByte               2
     DATDeaSizeBufferInByte            1
     DATDeaWriteIsOk                   1
     DATDeaActionIsFinished            1
     CheckConditionBeforeStartAction
                                      64
     StartAction                      70
     DATDeaStartWriteEepromByAddress
                                       9
     DATDeaStartWriteEepromByAddress_Static
                                      42
     DATDeaStartReadEepromByAddress    9
     DATDeaStartReadEepromByAddress_Static
                                      40
     DATDeaCallBackEep                 9
     DATDeaCallBackEep_Static         92
     DATDeaInitialize                 17
     __T_?FAR_CALL_L07                 2
     __T_?FAR_FAST_CALL_L07            2

 
 308 bytes in segment BCODE
   4 bytes in segment CLTVEC
  44 bytes in segment CODE
  25 bytes in segment NEAR_Z
 
 352 bytes of CODE memory (+ 4 bytes shared)
  25 bytes of DATA memory

Errors: none
Warnings: none
