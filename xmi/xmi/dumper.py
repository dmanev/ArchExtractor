#
# dumper.py
#
# generated by pyemof v0.11.0 on [Sat Nov  3 21:36:20 2007] 
#
# Copyright (C) 2003-2007, Raphael Marvie 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.
# http://www.fsf.org/licensing/licenses/gpl.html
#
# Author contact: raphael.marvie@lifl.fr
#

from xml.dom import minidom

import xmi.core

class DumpElement (object):
    def __init__ (self, doc):
        super(DumpElement, self).__init__()
        self._doc = doc
    def process(self, obj, elt):
        elt.setAttributeNS('xmi', 'xmi:id', obj._xmi_id)
    def reference(self, obj, nodename):
        elt = self._doc.createElement(nodename)
        elt.setAttributeNS('xmi', 'xmi:idref', obj._xmi_id)
        return elt
    def __call__(self, obj, nodename):
        elt = self._doc.createElement(nodename)
        self.process(obj, elt)
        return elt

class ReferenceElement(DumpElement):
    def __init__(self, doc):
        super(ReferenceElement, self).__init__(doc)

    def __call__(self, obj, nodename):
        elt = super(ReferenceElement, self).reference(obj, nodename)
        elt.setAttributeNS('xmi', 'xmi:type', 'uml:Class')
        return elt    

class Element (DumpElement):

    def __init__(self, doc):
        super(Element, self).__init__(doc)

    def process(self, obj, elt):
        super(Element, self).process(obj, elt)
        if elt.nodeName == 'uml:Element':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Element')

class Object (Element):

    def __init__(self, doc):
        super(Object, self).__init__(doc)
        
    def process(self, obj, elt):
        super(Object, self).process(obj, elt)
        if elt.nodeName == 'uml:Object':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Object')

class NamedElement (Object):

    def __init__(self, doc):
        super(NamedElement, self).__init__(doc)

    def process(self, obj, elt):
        super(NamedElement, self).process(obj, elt)
        if elt.nodeName == 'uml:NamedElement':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:NamedElement')
        if obj.name:
            elt.setAttributeNS(None, 'name', str(obj.name))

class Tag (Object):

    def __init__(self, doc):
        super(Tag, self).__init__(doc)

    def process(self, obj, elt):
        super(Tag, self).process(obj, elt)
        if elt.nodeName == 'uml:Tag':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Tag')
        if obj.name:
            elt.setAttributeNS(None, 'name', str(obj.name))
        if obj.value:
            elt.setAttributeNS(None, 'value', str(obj.value))
        for o in obj.element:
            child = self._doc.createElement('element')
            value = self._doc.createTextNode(o._xmi_id)
            child.appendChild(value)
            elt.appendChild(child)


class Component(NamedElement):

    def __init__(self, doc):
        super(Component, self).__init__(doc)

    def process(self, obj, elt):
        super(Component, self).process(obj, elt)
        if elt.nodeName == 'uml:Component':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Component')
        i=0
        for o in obj.providedClass:
            child = self._doc.createElement('interfaceRealization')
            child.setAttributeNS('xmi', 'xmi:type', 'uml:InterfaceRealization')
            child.setAttributeNS('xmi', 'xmi:id', obj._xmi_id)
            child.setAttribute('supplier', o._xmi_id)
            child.setAttribute('client', obj._xmi_id)
            child.setAttribute('contract', o._xmi_id)                
            elt.appendChild(child)
            i+=1
        i=0
        for o in obj.requiredClass:
            child = self._doc.createElement('packagedElement')
            child.setAttributeNS('xmi', 'xmi:type', 'uml:Usage')
            child.setAttributeNS('xmi', 'xmi:id', obj._xmi_id)
            child.setAttribute('supplier', o._xmi_id)
            child.setAttribute('client', obj._xmi_id)            
            elt.appendChild(child)
            i+=1

class Package (NamedElement):

    def __init__(self, doc):
        super(Package, self).__init__(doc)

    def process(self, obj, elt):
        super(Package, self).process(obj, elt)
        if elt.nodeName == 'uml:Package':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Package')
        if obj.uri:
            elt.setAttributeNS(None, 'uri', str(obj.uri))
        for o in obj.nestedPackage:
            type_o = type(o)
            clss = dumpers[type_o]
            child = clss(self._doc)(o, 'packagedElement')
            elt.appendChild(child)
        if obj.nestingPackage:
            elt.setAttributeNS(None, 'nestingPackage', obj.nestingPackage._xmi_id)
        for o in obj.ownedType:
            clss = dumpers[type(o)]
            #child = clss(self._doc)(o, 'ownedType')
            child = clss(self._doc)(o, 'packagedElement')
            elt.appendChild(child)


class TypedElement (NamedElement):

    def __init__(self, doc):
        super(TypedElement, self).__init__(doc)

    def process(self, obj, elt):
        super(TypedElement, self).process(obj, elt)
        if elt.nodeName == 'uml:TypedElement':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:TypedElement')
        if obj.type:
            if type(obj.type) in dumpers:
                if dumpers[type(obj.type)] not in [DataType, Class]:
                    clss = dumpers[type(obj.type)]
                    child = clss(self._doc)(obj.type, 'type')
                    elt.appendChild(child)
                elif dumpers[type(obj)] is not Operation:
                    child = ReferenceElement(self._doc)(obj.type, 'type')
                    elt.appendChild(child)
            else:
                elt.setAttributeNS(None, 'type', obj.type._xmi_id)
        if obj.visibility:
            elt.setAttributeNS(None, 'visibility', obj.get_visibilityStr())
            
class EnumerationLiteral (NamedElement):

    def __init__(self, doc):
        super(EnumerationLiteral, self).__init__(doc)

    def process(self, obj, elt):
        super(EnumerationLiteral, self).process(obj, elt)
        if elt.nodeName == 'uml:EnumerationLiteral':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:EnumerationLiteral')
        if obj.enumeration:
            elt.setAttributeNS(None, 'enumeration', obj.enumeration._xmi_id)


class Type (NamedElement):

    def __init__(self, doc):
        super(Type, self).__init__(doc)

    def process(self, obj, elt):
        super(Type, self).process(obj, elt)
        if elt.nodeName == 'uml:Type':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Type')


class MultiplicityElement (TypedElement):

    def __init__(self, doc):
        super(MultiplicityElement, self).__init__(doc)

    def process(self, obj, elt):
        super(MultiplicityElement, self).process(obj, elt)
        if elt.nodeName == 'uml:MultiplicityElement':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:MultiplicityElement')
        if obj.isOrdered:
            elt.setAttributeNS(None, 'isOrdered', str(obj.isOrdered))
        if obj.isUnique:
            elt.setAttributeNS(None, 'isUnique', str(obj.isUnique))
        if obj.lower:
            #elt.setAttributeNS(None, 'lower', str(obj.lower))
            child = self._doc.createElement('lowerValue')
            child.setAttributeNS('xmi', 'xmi:type', 'uml:LiteralString')
            child.setAttributeNS('xmi', 'xmi:id', obj._xmi_id)
            child.setAttribute('value', str(obj.lower))
            elt.appendChild(child)
        if obj.upper:
            #elt.setAttributeNS(None, 'upper', str(obj.upper))
            child = self._doc.createElement('upperValue')
            child.setAttributeNS('xmi', 'xmi:type', 'uml:LiteralString')
            child.setAttributeNS('xmi', 'xmi:id', obj._xmi_id)
            child.setAttribute('value', str(obj.upper))
            elt.appendChild(child)
            

class DataType (Type):

    def __init__(self, doc):
        super(DataType, self).__init__(doc)

    def process(self, obj, elt):
        super(DataType, self).process(obj, elt)
        if elt.nodeName == 'uml:DataType':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:DataType')
        if obj.serializable:
            elt.setAttributeNS(None, 'serializable', str(obj.serializable))
        if obj.defaultValue:
            elt.setAttributeNS(None, 'defaultValue', str(obj.defaultValue))
        if obj.allowNull:
            elt.setAttributeNS(None, 'allowNull', str(obj.allowNull))


class Class (Type):

    def __init__(self, doc):
        super(Class, self).__init__(doc)

    def process(self, obj, elt):
        super(Class, self).process(obj, elt)
        if elt.nodeName == 'uml:Class':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Class')

        if obj.isAbstract:
            elt.setAttributeNS(None, 'isAbstract', str(obj.isAbstract))
        for o in obj.ownedAttribute:
            clss = dumpers[type(o)]
            child = clss(self._doc)(o, 'ownedAttribute')
            elt.appendChild(child)
        for o in obj.ownedOperation:
            clss = dumpers[type(o)]
            child = clss(self._doc)(o, 'ownedOperation')
            elt.appendChild(child)
        i=0
        for o in obj.superClass:
            child = self._doc.createElement('generalization')
            child.setAttributeNS(None, 'general', o._xmi_id)
            child.setAttributeNS('xmi', 'xmi:id', obj._xmi_id+'_'+str(i))
            child.setAttributeNS('xmi', 'xmi:type', 'uml:Generalization')
            elt.appendChild(child)


class Operation (MultiplicityElement):

    def __init__(self, doc):
        super(Operation, self).__init__(doc)

    def process(self, obj, elt):
        super(Operation, self).process(obj, elt)
        if elt.nodeName == 'uml:Operation':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Operation')
#             elt.removeAttributeNS(None, 'isUnique')
        if obj.type:
            child = self._doc.createElement('ownedParameter')
            child.setAttributeNS('xmi', 'xmi:id', obj._xmi_id)
            child.setAttribute('name', 'return')            
            child.setAttribute('direction', 'return')
            if type(obj.type) in dumpers:
                childType = ReferenceElement(self._doc)(obj.type, 'type')
                child.appendChild(childType)                
            elt.appendChild(child)            
        for o in obj.raisedException:
            child = self._doc.createElement('raisedException')
            value = self._doc.createTextNode(o._xmi_id)
            child.appendChild(value)
            elt.appendChild(child)
        for o in obj.ownedParameter:
            clss = dumpers[type(o)]
            child = clss(self._doc)(o, 'ownedParameter')
            elt.appendChild(child)

        if obj.class_:
            elt.setAttributeNS(None, 'class', obj.class_._xmi_id)


class Parameter (MultiplicityElement):

    def __init__(self, doc):
        super(Parameter, self).__init__(doc)

    def process(self, obj, elt):
        super(Parameter, self).process(obj, elt)
        if elt.nodeName == 'uml:Parameter':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Parameter')
#        for o in obj.operation:
#            child = self._doc.createElement('operation')
#            value = self._doc.createTextNode(o._xmi_id)
#            child.appendChild(value)
#            elt.appendChild(child)


class Property (MultiplicityElement):

    def __init__(self, doc):
        super(Property, self).__init__(doc)

    def process(self, obj, elt):
        super(Property, self).process(obj, elt)
        if elt.nodeName == 'uml:Property':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Property')
        if obj.isReadOnly:
            elt.setAttributeNS(None, 'isReadOnly', str(obj.isReadOnly))
        if obj.default:
            #elt.setAttributeNS(None, 'default', str(obj.default))
            child = self._doc.createElement('defaultValue')
            child.setAttributeNS('xmi', 'xmi:type', 'uml:LiteralString')
            child.setAttributeNS('xmi', 'xmi:id', obj._xmi_id)
            child.setAttribute('value', str(obj.default))
            elt.appendChild(child)
        if obj.isComposite:
            elt.setAttributeNS(None, 'isComposite', str(obj.isComposite))
        if obj.isDerived:
            elt.setAttributeNS(None, 'isDerived', str(obj.isDerived))
        if obj.isId:
            elt.setAttributeNS(None, 'isId', str(obj.isId))
        if obj.opposite:
            elt.setAttributeNS(None, 'opposite', obj.opposite._xmi_id)
        if obj.class_:
            elt.setAttributeNS(None, 'class', obj.class_._xmi_id)

class Enumeration (DataType):

    def __init__(self, doc):
        super(Enumeration, self).__init__(doc)

    def process(self, obj, elt):
        super(Enumeration, self).process(obj, elt)
        if elt.nodeName == 'uml:Enumeration':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:Enumeration')
        for o in obj.ownedLiteral:
            clss = dumpers[type(o)]
            child = clss(self._doc)(o, 'ownedLiteral')
            elt.appendChild(child)


class PrimitiveType (DataType):

    def __init__(self, doc):
        super(PrimitiveType, self).__init__(doc)

    def process(self, obj, elt):
        super(PrimitiveType, self).process(obj, elt)
        if elt.nodeName == 'uml:PrimitiveType':
            try: 
                elt.removeAttributeNS('xmi', 'type')
            except:
                pass
        else:
            elt.setAttributeNS('xmi', 'xmi:type', 'uml:PrimitiveType')


class Integer (PrimitiveType):

    def __init__(self, doc):
        super(Integer, self).__init__(doc)

    def process(self, obj, elt):
        #elt.setAttributeNS('xmi', 'xmi:type', 'uml:Integer')
        #content = self._doc.createTextNode(str(obj))
        #elt.appendChild(content)       
        elt.setAttribute('href', 'http://schema.omg.org/spec/UML/2.1/uml.xml#Integer')
        elt.setAttributeNS('xmi', 'xmi:type', 'uml:PrimitiveType')

class Boolean (PrimitiveType):

    def __init__(self, doc):
        super(Boolean, self).__init__(doc)

    def process(self, obj, elt):
        #elt.setAttributeNS('xmi', 'xmi:type', 'uml:Boolean')
        #content = self._doc.createTextNode(str(obj))
        #elt.appendChild(content)
        elt.setAttribute('href', 'http://schema.omg.org/spec/UML/2.1/uml.xml#Boolean')                
        elt.setAttributeNS('xmi', 'xmi:type', 'uml:PrimitiveType')
        



class String (PrimitiveType):

    def __init__(self, doc):
        super(String, self).__init__(doc)

    def process(self, obj, elt):
        #elt.setAttributeNS('xmi', 'xmi:type', 'uml:String')
        #content = self._doc.createTextNode(str(obj))
        #elt.appendChild(content)
        elt.setAttribute('href', 'http://schema.omg.org/spec/UML/2.1/uml.xml#String')                
        elt.setAttributeNS('xmi', 'xmi:type', 'uml:PrimitiveType')


dumpers = {
    xmi.core.Object: Object,
    xmi.core.Tag: Tag,
    xmi.core.Component: Component,
    xmi.core.Package: Package,
    xmi.core.EnumerationLiteral: EnumerationLiteral,
    xmi.core.Class: Class,
    xmi.core.Operation: Operation,
    xmi.core.Parameter: Parameter,
    xmi.core.Property: Property,
    xmi.core.Enumeration: Enumeration,
    xmi.core.DataType: DataType,
    xmi.core.PrimitiveType: PrimitiveType,
    xmi.core.Integer: Integer,
    xmi.core.Boolean: Boolean,
    xmi.core.String: String    
}

class Dumper (object):
    '''emof model dumper to an XMI file.'''
    
    def __init__(self):
        super(Dumper, self).__init__()
        self._doc = minidom.Document()
        root = self._doc.createElement('xmi:XMI')
        root.setAttribute('xmi:version', '2.1')
        root.setAttribute('xmlns:xmi', 'http://schema.omg.org/spec/XMI/2.1')
        root.setAttribute('xmlns:uml', 'http://schema.omg.org/spec/UML/2.1')
        documentation = self._doc.createElement('xmi:Documentation')
        documentation.setAttribute('exporter', 'XMIR')
        documentation.setAttribute('exporterVersion', "0.1")
        root.appendChild(documentation)
        self._model = self._doc.createElement('uml:Model')
        self._model.setAttribute('xmi:type', 'uml:Model')
#         self._model.setAttribute('xmi:version', '20110701')
#         self._model.setAttribute('xmlns:xmi', 'http://www.omg.org/spec/XMI/20110701')
#         self._model.setAttribute('xmlns:uml', 'http://www.eclipse.org/uml2/4.0.0/UML')
        self._model.setAttribute('xmi:id', 'themodel')
        self._model.setAttribute('name', 'NameToBeAdded')
        root.appendChild(self._model)
        self._doc.appendChild(root)
        
    def dump(self, rep, filename='out.xmi'):
        for x in rep.Object:
            if x.isRoot:
                elt = Object(self._doc)(x, 'uml:Object')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.Tag:
            if x.isRoot:
                elt = Tag(self._doc)(x, 'uml:Tag')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.Component:
            if x.isRoot:
                elt = Component(self._doc)(x, 'packagedElement')
                self._model.appendChild(elt)            
        for x in rep.Package:
            if x.isRoot:
                #elt = Package(self._doc)(x, 'uml:Package')
                elt = Package(self._doc)(x, 'packagedElement')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.EnumerationLiteral:
            if x.isRoot:
                elt = EnumerationLiteral(self._doc)(x, 'uml:EnumerationLiteral')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.Class:
            if x.isRoot:
                elt = Package(self._doc)(x, 'uml:Class')
                #elt = Class(self._doc)(x, 'packagedElement')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.Operation:
            if x.isRoot:
                elt = Operation(self._doc)(x, 'uml:Operation')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.Parameter:
            if x.isRoot:
                elt = Parameter(self._doc)(x, 'uml:Parameter')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.Property:
            if x.isRoot:
                elt = Property(self._doc)(x, 'uml:Property')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.Enumeration:
            if x.isRoot:
                elt = Enumeration(self._doc)(x, 'uml:Enumeration')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.PrimitiveType:
            if x.isRoot:
                elt = PrimitiveType(self._doc)(x, 'uml:PrimitiveType')
                #self._doc.documentElement.appendChild(elt)
                self._model.appendChild(elt)
        for x in rep.DataType:
            if x.isRoot:
                elt = DataType(self._doc)(x, 'packagedElement')                
                self._model.appendChild(elt)                
        o = open(filename, 'w')
        o.write(self._doc.toprettyxml())
        o.close()

# eof
